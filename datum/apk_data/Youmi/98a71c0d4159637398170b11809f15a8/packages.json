{
    "Lnet/youmi/android/ee;": [
        "Lnet/youmi/android/ee;->a()V",
        "Lnet/youmi/android/ee;->a()I",
        "Lnet/youmi/android/ee;->a()[B",
        "Lnet/youmi/android/ee;->a()Landroid/graphics/Bitmap;",
        "Lnet/youmi/android/ee;->a()[S",
        "Lnet/youmi/android/ee;->a()[I"
    ],
    "Ljava/lang/System;": [
        "Ljava/lang/System;->getSecurityManager()Ljava/lang/SecurityManager;",
        "Ljava/lang/System;->setProperty()Ljava/lang/String;",
        "Ljava/lang/System;->currentTimeMillis()J",
        "Ljava/lang/System;->loadLibrary()V",
        "Ljava/lang/System;->identityHashCode()I",
        "Ljava/lang/System;->arraycopy()V",
        "Ljava/lang/System;->nanoTime()J",
        "Ljava/lang/System;->getProperty()Ljava/lang/String;",
        "Ljava/lang/System;->exit()V"
    ],
    "Lnet/youmi/android/ef;": [
        "Lnet/youmi/android/ef;->a()V"
    ],
    "Lnet/youmi/android/bj;": [
        "Lnet/youmi/android/bj;->a()I",
        "Lnet/youmi/android/bj;->a()V"
    ],
    "Lnet/youmi/android/ao;": [
        "Lnet/youmi/android/ao;->a()V",
        "Lnet/youmi/android/ao;->a()Ljava/lang/String;",
        "Lnet/youmi/android/ao;->a()Z",
        "Lnet/youmi/android/ao;->a()Lnet/youmi/android/cz;",
        "Lnet/youmi/android/ao;->a()Lnet/youmi/android/cl;"
    ],
    "Landroid/os/AsyncTask;": [
        "Landroid/os/AsyncTask;->onProgressUpdate()V",
        "Landroid/os/AsyncTask;->onPostExecute()V"
    ],
    "Landroid/app/AlertDialog$Builder;": [
        "Landroid/app/AlertDialog$Builder;->setTitle()Landroid/app/AlertDialog$Builder;",
        "Landroid/app/AlertDialog$Builder;->setNegativeButton()Landroid/app/AlertDialog$Builder;",
        "Landroid/app/AlertDialog$Builder;->setView()Landroid/app/AlertDialog$Builder;",
        "Landroid/app/AlertDialog$Builder;->create()Landroid/app/AlertDialog;",
        "Landroid/app/AlertDialog$Builder;->show()Landroid/app/AlertDialog;",
        "Landroid/app/AlertDialog$Builder;->setItems()Landroid/app/AlertDialog$Builder;",
        "Landroid/app/AlertDialog$Builder;->setIcon()Landroid/app/AlertDialog$Builder;",
        "Landroid/app/AlertDialog$Builder;->setOnCancelListener()Landroid/app/AlertDialog$Builder;",
        "Landroid/app/AlertDialog$Builder;->setPositiveButton()Landroid/app/AlertDialog$Builder;",
        "Landroid/app/AlertDialog$Builder;->setMessage()Landroid/app/AlertDialog$Builder;",
        "Landroid/app/AlertDialog$Builder;->setCancelable()Landroid/app/AlertDialog$Builder;"
    ],
    "Landroid/app/AlertDialog;": [
        "Landroid/app/AlertDialog;->show()V"
    ],
    "Ljava/lang/StringBuilder;": [
        "Ljava/lang/StringBuilder;->deleteCharAt()Ljava/lang/StringBuilder;",
        "Ljava/lang/StringBuilder;->toString()Ljava/lang/String;",
        "Ljava/lang/StringBuilder;->setLength()V",
        "Ljava/lang/StringBuilder;->replace()Ljava/lang/StringBuilder;",
        "Ljava/lang/StringBuilder;->charAt()C",
        "Ljava/lang/StringBuilder;->length()I",
        "Ljava/lang/StringBuilder;->delete()Ljava/lang/StringBuilder;",
        "Ljava/lang/StringBuilder;->insert()Ljava/lang/StringBuilder;",
        "Ljava/lang/StringBuilder;->append()Ljava/lang/StringBuilder;"
    ],
    "Lnet/youmi/android/ci;": [
        "Lnet/youmi/android/ci;->a()V",
        "Lnet/youmi/android/ci;->execute()Landroid/os/AsyncTask;",
        "Lnet/youmi/android/ci;->a()Lnet/youmi/android/cl;"
    ],
    "Lorg/apache/http/client/methods/HttpGet;": [
        "Lorg/apache/http/client/methods/HttpGet;->setHeader()V",
        "Lorg/apache/http/client/methods/HttpGet;->abort()V"
    ],
    "Lorg/apache/http/impl/client/DefaultHttpClient;": [
        "Lorg/apache/http/impl/client/DefaultHttpClient;->getConnectionManager()Lorg/apache/http/conn/ClientConnectionManager;",
        "Lorg/apache/http/impl/client/DefaultHttpClient;->setRedirectHandler()V",
        "Lorg/apache/http/impl/client/DefaultHttpClient;->execute()Lorg/apache/http/HttpResponse;"
    ],
    "Lorg/apache/http/conn/ClientConnectionManager;": [
        "Lorg/apache/http/conn/ClientConnectionManager;->shutdown()V"
    ],
    "Lnet/youmi/android/hf;": [
        "Lnet/youmi/android/hf;->a()Lorg/apache/http/params/HttpParams;",
        "Lnet/youmi/android/hf;->a()Lorg/apache/http/impl/client/DefaultHttpClient;",
        "Lnet/youmi/android/hf;->a()Ljava/lang/String;",
        "Lnet/youmi/android/hf;->a()Z"
    ],
    "Lnet/youmi/android/ag;": [
        "Lnet/youmi/android/ag;->a()J",
        "Lnet/youmi/android/ag;->a()V",
        "Lnet/youmi/android/ag;->a()Z",
        "Lnet/youmi/android/ag;->a()I",
        "Lnet/youmi/android/ag;->a()Ljava/lang/String;"
    ],
    "Lorg/apache/http/HttpResponse;": [
        "Lorg/apache/http/HttpResponse;->getStatusLine()Lorg/apache/http/StatusLine;",
        "Lorg/apache/http/HttpResponse;->getFirstHeader()Lorg/apache/http/Header;",
        "Lorg/apache/http/HttpResponse;->getEntity()Lorg/apache/http/HttpEntity;",
        "Lorg/apache/http/HttpResponse;->getHeaders()[Lorg/apache/http/Header;",
        "Lorg/apache/http/HttpResponse;->containsHeader()Z",
        "Lorg/apache/http/HttpResponse;->getLastHeader()Lorg/apache/http/Header;"
    ],
    "Lorg/apache/http/StatusLine;": [
        "Lorg/apache/http/StatusLine;->getStatusCode()I"
    ],
    "Ljava/util/Locale;": [
        "Ljava/util/Locale;->getDefault()Ljava/util/Locale;",
        "Ljava/util/Locale;->getCountry()Ljava/lang/String;",
        "Ljava/util/Locale;->getLanguage()Ljava/lang/String;"
    ],
    "Ljava/lang/String;": [
        "Ljava/lang/String;->substring()Ljava/lang/String;",
        "Ljava/lang/String;->replaceAll()Ljava/lang/String;",
        "Ljava/lang/String;->length()I",
        "Ljava/lang/String;->charAt()C",
        "Ljava/lang/String;->indexOf()I",
        "Ljava/lang/String;->trim()Ljava/lang/String;",
        "Ljava/lang/String;->getChars()V",
        "Ljava/lang/String;->valueOf()Ljava/lang/String;",
        "Ljava/lang/String;->equalsIgnoreCase()Z",
        "Ljava/lang/String;->endsWith()Z",
        "Ljava/lang/String;->hashCode()I",
        "Ljava/lang/String;->matches()Z",
        "Ljava/lang/String;->getBytes()[B",
        "Ljava/lang/String;->toCharArray()[C",
        "Ljava/lang/String;->lastIndexOf()I",
        "Ljava/lang/String;->intern()Ljava/lang/String;",
        "Ljava/lang/String;->toString()Ljava/lang/String;",
        "Ljava/lang/String;->contains()Z",
        "Ljava/lang/String;->concat()Ljava/lang/String;",
        "Ljava/lang/String;->format()Ljava/lang/String;",
        "Ljava/lang/String;->equals()Z",
        "Ljava/lang/String;->startsWith()Z",
        "Ljava/lang/String;->split()[Ljava/lang/String;",
        "Ljava/lang/String;->replace()Ljava/lang/String;",
        "Ljava/lang/String;->toLowerCase()Ljava/lang/String;",
        "Ljava/lang/String;->toUpperCase()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/ah;": [
        "Lnet/youmi/android/ah;->a()V",
        "Lnet/youmi/android/ah;->a()Lnet/youmi/android/dg;",
        "Lnet/youmi/android/ah;->a()I",
        "Lnet/youmi/android/ah;->a()Z",
        "Lnet/youmi/android/ah;->a()J",
        "Lnet/youmi/android/ah;->a()Ljava/lang/String;"
    ],
    "Landroid/content/Context;": [
        "Landroid/content/Context;->openFileOutput()Ljava/io/FileOutputStream;",
        "Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;",
        "Landroid/content/Context;->getSystemService()Ljava/lang/Object;",
        "Landroid/content/Context;->startActivity()V",
        "Landroid/content/Context;->unregisterReceiver()V",
        "Landroid/content/Context;->deleteDatabase()Z",
        "Landroid/content/Context;->getFilesDir()Ljava/io/File;",
        "Landroid/content/Context;->registerReceiver()Landroid/content/Intent;",
        "Landroid/content/Context;->sendBroadcast()V",
        "Landroid/content/Context;->getAssets()Landroid/content/res/AssetManager;",
        "Landroid/content/Context;->getApplicationContext()Landroid/content/Context;",
        "Landroid/content/Context;->getCacheDir()Ljava/io/File;",
        "Landroid/content/Context;->checkCallingOrSelfPermission()I",
        "Landroid/content/Context;->getFileStreamPath()Ljava/io/File;",
        "Landroid/content/Context;->getDatabasePath()Ljava/io/File;",
        "Landroid/content/Context;->getSharedPreferences()Landroid/content/SharedPreferences;",
        "Landroid/content/Context;->openFileInput()Ljava/io/FileInputStream;",
        "Landroid/content/Context;->stopService()Z",
        "Landroid/content/Context;->getPackageName()Ljava/lang/String;",
        "Landroid/content/Context;->deleteFile()Z",
        "Landroid/content/Context;->getResources()Landroid/content/res/Resources;",
        "Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;"
    ],
    "Landroid/content/pm/PackageManager;": [
        "Landroid/content/pm/PackageManager;->resolveActivity()Landroid/content/pm/ResolveInfo;",
        "Landroid/content/pm/PackageManager;->getLaunchIntentForPackage()Landroid/content/Intent;",
        "Landroid/content/pm/PackageManager;->getApplicationInfo()Landroid/content/pm/ApplicationInfo;",
        "Landroid/content/pm/PackageManager;->getPackageArchiveInfo()Landroid/content/pm/PackageInfo;",
        "Landroid/content/pm/PackageManager;->getPackageInfo()Landroid/content/pm/PackageInfo;",
        "Landroid/content/pm/PackageManager;->getReceiverInfo()Landroid/content/pm/ActivityInfo;",
        "Landroid/content/pm/PackageManager;->getApplicationIcon()Landroid/graphics/drawable/Drawable;"
    ],
    "Landroid/content/pm/ApplicationInfo;": [
        "Landroid/content/pm/ApplicationInfo;->loadLabel()Ljava/lang/CharSequence;"
    ],
    "Ljava/lang/CharSequence;": [
        "Ljava/lang/CharSequence;->toString()Ljava/lang/String;",
        "Ljava/lang/CharSequence;->length()I"
    ],
    "Landroid/telephony/TelephonyManager;": [
        "Landroid/telephony/TelephonyManager;->getCellLocation()Landroid/telephony/CellLocation;",
        "Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;",
        "Landroid/telephony/TelephonyManager;->listen()V",
        "Landroid/telephony/TelephonyManager;->getPhoneType()I",
        "Landroid/telephony/TelephonyManager;->getNetworkOperatorName()Ljava/lang/String;",
        "Landroid/telephony/TelephonyManager;->getNetworkOperator()Ljava/lang/String;",
        "Landroid/telephony/TelephonyManager;->getSubscriberId()Ljava/lang/String;",
        "Landroid/telephony/TelephonyManager;->getLine1Number()Ljava/lang/String;"
    ],
    "Ljava/lang/Class;": [
        "Ljava/lang/Class;->getSimpleName()Ljava/lang/String;",
        "Ljava/lang/Class;->getMethod()Ljava/lang/reflect/Method;",
        "Ljava/lang/Class;->getField()Ljava/lang/reflect/Field;",
        "Ljava/lang/Class;->isAssignableFrom()Z",
        "Ljava/lang/Class;->getDeclaredMethod()Ljava/lang/reflect/Method;",
        "Ljava/lang/Class;->cast()Ljava/lang/Object;",
        "Ljava/lang/Class;->newInstance()Ljava/lang/Object;",
        "Ljava/lang/Class;->getClassLoader()Ljava/lang/ClassLoader;",
        "Ljava/lang/Class;->forName()Ljava/lang/Class;",
        "Ljava/lang/Class;->getDeclaredFields()[Ljava/lang/reflect/Field;",
        "Ljava/lang/Class;->getResourceAsStream()Ljava/io/InputStream;",
        "Ljava/lang/Class;->isInstance()Z",
        "Ljava/lang/Class;->getConstructor()Ljava/lang/reflect/Constructor;",
        "Ljava/lang/Class;->getPackage()Ljava/lang/Package;",
        "Ljava/lang/Class;->desiredAssertionStatus()Z",
        "Ljava/lang/Class;->getSuperclass()Ljava/lang/Class;",
        "Ljava/lang/Class;->getName()Ljava/lang/String;",
        "Ljava/lang/Class;->getMethods()[Ljava/lang/reflect/Method;"
    ],
    "Ljava/lang/reflect/Field;": [
        "Ljava/lang/reflect/Field;->get()Ljava/lang/Object;",
        "Ljava/lang/reflect/Field;->setAccessible()V",
        "Ljava/lang/reflect/Field;->set()V",
        "Ljava/lang/reflect/Field;->getDeclaringClass()Ljava/lang/Class;",
        "Ljava/lang/reflect/Field;->getInt()I",
        "Ljava/lang/reflect/Field;->getModifiers()I"
    ],
    "Ljava/lang/Object;": [
        "Ljava/lang/Object;->equals()Z",
        "Ljava/lang/Object;->notify()V",
        "Ljava/lang/Object;->toString()Ljava/lang/String;",
        "Ljava/lang/Object;->wait()V",
        "Ljava/lang/Object;->getClass()Ljava/lang/Class;",
        "Ljava/lang/Object;->clone()Ljava/lang/Object;",
        "Ljava/lang/Object;->notifyAll()V",
        "Ljava/lang/Object;->finalize()V",
        "Ljava/lang/Object;->hashCode()I"
    ],
    "Lnet/youmi/android/dg;": [
        "Lnet/youmi/android/dg;->a()Ljava/lang/String;",
        "Lnet/youmi/android/dg;->a()Z"
    ],
    "Lnet/youmi/android/ai;": [
        "Lnet/youmi/android/ai;->a()I",
        "Lnet/youmi/android/ai;->a()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/aj;": [
        "Lnet/youmi/android/aj;->a()J",
        "Lnet/youmi/android/aj;->a()V"
    ],
    "Lnet/youmi/android/hw;": [
        "Lnet/youmi/android/hw;->a()Z"
    ],
    "Lnet/youmi/android/gz;": [
        "Lnet/youmi/android/gz;->a()V"
    ],
    "Landroid/telephony/gsm/GsmCellLocation;": [
        "Landroid/telephony/gsm/GsmCellLocation;->getLac()I",
        "Landroid/telephony/gsm/GsmCellLocation;->getCid()I"
    ],
    "Ljava/lang/reflect/Method;": [
        "Ljava/lang/reflect/Method;->invoke()Ljava/lang/Object;",
        "Ljava/lang/reflect/Method;->getReturnType()Ljava/lang/Class;",
        "Ljava/lang/reflect/Method;->getName()Ljava/lang/String;"
    ],
    "Ljava/lang/Integer;": [
        "Ljava/lang/Integer;->getInteger()Ljava/lang/Integer;",
        "Ljava/lang/Integer;->parseInt()I",
        "Ljava/lang/Integer;->toHexString()Ljava/lang/String;",
        "Ljava/lang/Integer;->intValue()I",
        "Ljava/lang/Integer;->decode()Ljava/lang/Integer;",
        "Ljava/lang/Integer;->valueOf()Ljava/lang/Integer;",
        "Ljava/lang/Integer;->toString()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/gg;": [
        "Lnet/youmi/android/gg;->a()Lnet/youmi/android/gg;",
        "Lnet/youmi/android/gg;->a()V",
        "Lnet/youmi/android/gg;->a()Ljava/util/LinkedList;"
    ],
    "Ljava/util/LinkedList;": [
        "Ljava/util/LinkedList;->size()I",
        "Ljava/util/LinkedList;->get()Ljava/lang/Object;",
        "Ljava/util/LinkedList;->isEmpty()Z",
        "Ljava/util/LinkedList;->add()Z",
        "Ljava/util/LinkedList;->removeLast()Ljava/lang/Object;",
        "Ljava/util/LinkedList;->addFirst()V",
        "Ljava/util/LinkedList;->remove()Z"
    ],
    "Lnet/youmi/android/ew;": [
        "Lnet/youmi/android/ew;->a()V"
    ],
    "Lnet/youmi/android/hk;": [
        "Lnet/youmi/android/hk;->a()I"
    ],
    "Lnet/youmi/android/hl;": [
        "Lnet/youmi/android/hl;->a()Lnet/youmi/android/hl;"
    ],
    "Lnet/youmi/android/hm;": [
        "Lnet/youmi/android/hm;->a()Lnet/youmi/android/hm;"
    ],
    "Lnet/youmi/android/hn;": [
        "Lnet/youmi/android/hn;->a()Lnet/youmi/android/hn;"
    ],
    "Lnet/youmi/android/ho;": [
        "Lnet/youmi/android/ho;->a()Lnet/youmi/android/ho;"
    ],
    "Lnet/youmi/android/hp;": [
        "Lnet/youmi/android/hp;->a()V"
    ],
    "Lnet/youmi/android/hq;": [
        "Lnet/youmi/android/hq;->a()V"
    ],
    "Lnet/youmi/android/dt;": [
        "Lnet/youmi/android/dt;->a()V",
        "Lnet/youmi/android/dt;->addView()V"
    ],
    "Lnet/youmi/android/dw;": [
        "Lnet/youmi/android/dw;->addView()V",
        "Lnet/youmi/android/dw;->a()V",
        "Lnet/youmi/android/dw;->setVisibility()V"
    ],
    "Lnet/youmi/android/du;": [
        "Lnet/youmi/android/du;->a()V",
        "Lnet/youmi/android/du;->setVisibility()V",
        "Lnet/youmi/android/du;->addView()V"
    ],
    "Landroid/graphics/drawable/ShapeDrawable;": [
        "Landroid/graphics/drawable/ShapeDrawable;->setShape()V",
        "Landroid/graphics/drawable/ShapeDrawable;->draw()V",
        "Landroid/graphics/drawable/ShapeDrawable;->getPaint()Landroid/graphics/Paint;",
        "Landroid/graphics/drawable/ShapeDrawable;->setBounds()V"
    ],
    "Lnet/youmi/android/dm;": [
        "Lnet/youmi/android/dm;->a()Lnet/youmi/android/dm;",
        "Lnet/youmi/android/dm;->a()Lnet/youmi/android/dq;",
        "Lnet/youmi/android/dm;->a()Lnet/youmi/android/dr;",
        "Lnet/youmi/android/dm;->a()I",
        "Lnet/youmi/android/dm;->a()Lnet/youmi/android/ds;",
        "Lnet/youmi/android/dm;->a()Z",
        "Lnet/youmi/android/dm;->a()F",
        "Lnet/youmi/android/dm;->a()Lnet/youmi/android/dn;"
    ],
    "Lnet/youmi/android/dq;": [
        "Lnet/youmi/android/dq;->a()I"
    ],
    "Landroid/graphics/Color;": [
        "Landroid/graphics/Color;->green()I",
        "Landroid/graphics/Color;->red()I",
        "Landroid/graphics/Color;->blue()I",
        "Landroid/graphics/Color;->rgb()I",
        "Landroid/graphics/Color;->argb()I"
    ],
    "Landroid/graphics/Paint;": [
        "Landroid/graphics/Paint;->setShadowLayer()V",
        "Landroid/graphics/Paint;->setStyle()V",
        "Landroid/graphics/Paint;->setStrokeWidth()V",
        "Landroid/graphics/Paint;->setXfermode()Landroid/graphics/Xfermode;",
        "Landroid/graphics/Paint;->setARGB()V",
        "Landroid/graphics/Paint;->setTextAlign()V",
        "Landroid/graphics/Paint;->setTextSize()V",
        "Landroid/graphics/Paint;->setColor()V",
        "Landroid/graphics/Paint;->setShader()Landroid/graphics/Shader;",
        "Landroid/graphics/Paint;->getTextBounds()V",
        "Landroid/graphics/Paint;->setAntiAlias()V",
        "Landroid/graphics/Paint;->setAlpha()V",
        "Landroid/graphics/Paint;->reset()V"
    ],
    "Landroid/graphics/Path;": [
        "Landroid/graphics/Path;->moveTo()V",
        "Landroid/graphics/Path;->addPath()V",
        "Landroid/graphics/Path;->cubicTo()V",
        "Landroid/graphics/Path;->arcTo()V",
        "Landroid/graphics/Path;->setFillType()V",
        "Landroid/graphics/Path;->lineTo()V",
        "Landroid/graphics/Path;->addRect()V",
        "Landroid/graphics/Path;->close()V",
        "Landroid/graphics/Path;->addRoundRect()V"
    ],
    "Lnet/youmi/android/dx;": [
        "Lnet/youmi/android/dx;->a()Landroid/graphics/drawable/Drawable;"
    ],
    "Landroid/graphics/drawable/StateListDrawable;": [
        "Landroid/graphics/drawable/StateListDrawable;->addState()V"
    ],
    "Lnet/youmi/android/dr;": [
        "Lnet/youmi/android/dr;->a()I"
    ],
    "Lnet/youmi/android/bw;": [
        "Lnet/youmi/android/bw;->a()V",
        "Lnet/youmi/android/bw;->a()Z"
    ],
    "Lnet/youmi/android/AdView;": [
        "Lnet/youmi/android/AdView;->getActivity()Landroid/app/Activity;",
        "Lnet/youmi/android/AdView;->a()V",
        "Lnet/youmi/android/AdView;->getContext()Landroid/content/Context;",
        "Lnet/youmi/android/AdView;->getAdWidth()I",
        "Lnet/youmi/android/AdView;->addView()V",
        "Lnet/youmi/android/AdView;->getAdHeight()I",
        "Lnet/youmi/android/AdView;->postInvalidate()V",
        "Lnet/youmi/android/AdView;->a()Lnet/youmi/android/dm;",
        "Lnet/youmi/android/AdView;->getLayoutParams()Landroid/view/ViewGroup$LayoutParams;",
        "Lnet/youmi/android/AdView;->a()I",
        "Lnet/youmi/android/AdView;->getVisibility()I",
        "Lnet/youmi/android/AdView;->a()Lnet/youmi/android/bw;"
    ],
    "Lnet/youmi/android/ad;": [
        "Lnet/youmi/android/ad;->a()V",
        "Lnet/youmi/android/ad;->notifyDataSetChanged()V"
    ],
    "Landroid/view/View;": [
        "Landroid/view/View;->setBackgroundDrawable()V",
        "Landroid/view/View;->getId()I",
        "Landroid/view/View;->setId()V",
        "Landroid/view/View;->setOnClickListener()V",
        "Landroid/view/View;->setBackgroundColor()V",
        "Landroid/view/View;->onAttachedToWindow()V",
        "Landroid/view/View;->setBackgroundResource()V",
        "Landroid/view/View;->getMeasuredWidth()I",
        "Landroid/view/View;->findViewById()Landroid/view/View;",
        "Landroid/view/View;->layout()V",
        "Landroid/view/View;->setTag()V",
        "Landroid/view/View;->invalidate()V",
        "Landroid/view/View;->getMeasuredHeight()I",
        "Landroid/view/View;->measure()V",
        "Landroid/view/View;->onFocusChanged()V",
        "Landroid/view/View;->setVisibility()V",
        "Landroid/view/View;->onLayout()V",
        "Landroid/view/View;->onDraw()V",
        "Landroid/view/View;->getLayoutParams()Landroid/view/ViewGroup$LayoutParams;",
        "Landroid/view/View;->setLayoutParams()V",
        "Landroid/view/View;->onTouchEvent()Z",
        "Landroid/view/View;->setEnabled()V",
        "Landroid/view/View;->getTag()Ljava/lang/Object;",
        "Landroid/view/View;->setPadding()V",
        "Landroid/view/View;->getTop()I",
        "Landroid/view/View;->setClickable()V",
        "Landroid/view/View;->getLeft()I",
        "Landroid/view/View;->getWidth()I"
    ],
    "Ljava/util/ArrayList;": [
        "Ljava/util/ArrayList;->iterator()Ljava/util/Iterator;",
        "Ljava/util/ArrayList;->clear()V",
        "Ljava/util/ArrayList;->get()Ljava/lang/Object;",
        "Ljava/util/ArrayList;->contains()Z",
        "Ljava/util/ArrayList;->size()I",
        "Ljava/util/ArrayList;->remove()Ljava/lang/Object;",
        "Ljava/util/ArrayList;->clone()Ljava/lang/Object;",
        "Ljava/util/ArrayList;->add()Z",
        "Ljava/util/ArrayList;->listIterator()Ljava/util/ListIterator;",
        "Ljava/util/ArrayList;->toArray()[Ljava/lang/Object;"
    ],
    "Landroid/widget/TextView;": [
        "Landroid/widget/TextView;->setFocusable()V",
        "Landroid/widget/TextView;->setLayoutParams()V",
        "Landroid/widget/TextView;->setEllipsize()V",
        "Landroid/widget/TextView;->setTextColor()V",
        "Landroid/widget/TextView;->setId()V",
        "Landroid/widget/TextView;->getId()I",
        "Landroid/widget/TextView;->setGravity()V",
        "Landroid/widget/TextView;->setWidth()V",
        "Landroid/widget/TextView;->setMarqueeRepeatLimit()V",
        "Landroid/widget/TextView;->setText()V",
        "Landroid/widget/TextView;->setVisibility()V",
        "Landroid/widget/TextView;->setTypeface()V",
        "Landroid/widget/TextView;->setPadding()V",
        "Landroid/widget/TextView;->setMaxLines()V",
        "Landroid/widget/TextView;->setFocusableInTouchMode()V",
        "Landroid/widget/TextView;->setLines()V",
        "Landroid/widget/TextView;->setTextSize()V",
        "Landroid/widget/TextView;->setOnClickListener()V",
        "Landroid/widget/TextView;->setSingleLine()V"
    ],
    "Lnet/youmi/android/r;": [
        "Lnet/youmi/android/r;->addView()V",
        "Lnet/youmi/android/r;->a()Z",
        "Lnet/youmi/android/r;->startAnimation()V",
        "Lnet/youmi/android/r;->setVisibility()V",
        "Lnet/youmi/android/r;->setGravity()V"
    ],
    "Lnet/youmi/android/y;": [
        "Lnet/youmi/android/y;->a()Lnet/youmi/android/r;",
        "Lnet/youmi/android/y;->setVisibility()V",
        "Lnet/youmi/android/y;->setId()V",
        "Lnet/youmi/android/y;->a()Z",
        "Lnet/youmi/android/y;->addView()V",
        "Lnet/youmi/android/y;->a()V"
    ],
    "Lnet/youmi/android/ay;": [
        "Lnet/youmi/android/ay;->a()Landroid/view/animation/Animation;"
    ],
    "Ljava/util/Hashtable;": [
        "Ljava/util/Hashtable;->put()Ljava/lang/Object;",
        "Ljava/util/Hashtable;->remove()Ljava/lang/Object;",
        "Ljava/util/Hashtable;->get()Ljava/lang/Object;",
        "Ljava/util/Hashtable;->containsKey()Z",
        "Ljava/util/Hashtable;->isEmpty()Z",
        "Ljava/util/Hashtable;->equals()Z",
        "Ljava/util/Hashtable;->keys()Ljava/util/Enumeration;",
        "Ljava/util/Hashtable;->hashCode()I"
    ],
    "Lnet/youmi/android/gk;": [
        "Lnet/youmi/android/gk;->a()Lnet/youmi/android/gb;",
        "Lnet/youmi/android/gk;->a()V",
        "Lnet/youmi/android/gk;->a()Lnet/youmi/android/gk;"
    ],
    "Lnet/youmi/android/gb;": [
        "Lnet/youmi/android/gb;->a()V",
        "Lnet/youmi/android/gb;->a()Ljava/lang/String;",
        "Lnet/youmi/android/gb;->a()Landroid/app/Notification;",
        "Lnet/youmi/android/gb;->a()Lnet/youmi/android/fv;",
        "Lnet/youmi/android/gb;->a()Landroid/app/PendingIntent;",
        "Lnet/youmi/android/gb;->a()Z"
    ],
    "Ljava/util/HashSet;": [
        "Ljava/util/HashSet;->contains()Z",
        "Ljava/util/HashSet;->iterator()Ljava/util/Iterator;",
        "Ljava/util/HashSet;->add()Z"
    ],
    "Ljava/util/Iterator;": [
        "Ljava/util/Iterator;->hasNext()Z",
        "Ljava/util/Iterator;->next()Ljava/lang/Object;",
        "Ljava/util/Iterator;->remove()V"
    ],
    "Lnet/youmi/android/ez;": [
        "Lnet/youmi/android/ez;->a()V"
    ],
    "Lnet/youmi/android/gm;": [
        "Lnet/youmi/android/gm;->a()Ljava/lang/String;",
        "Lnet/youmi/android/gm;->a()Lnet/youmi/android/gm;"
    ],
    "Lnet/youmi/android/gq;": [
        "Lnet/youmi/android/gq;->a()Lnet/youmi/android/gq;",
        "Lnet/youmi/android/gq;->a()Ljava/io/File;"
    ],
    "Ljava/io/File;": [
        "Ljava/io/File;->canRead()Z",
        "Ljava/io/File;->delete()Z",
        "Ljava/io/File;->renameTo()Z",
        "Ljava/io/File;->listFiles()[Ljava/io/File;",
        "Ljava/io/File;->canWrite()Z",
        "Ljava/io/File;->getName()Ljava/lang/String;",
        "Ljava/io/File;->getPath()Ljava/lang/String;",
        "Ljava/io/File;->deleteOnExit()V",
        "Ljava/io/File;->getAbsolutePath()Ljava/lang/String;",
        "Ljava/io/File;->setLastModified()Z",
        "Ljava/io/File;->createNewFile()Z",
        "Ljava/io/File;->getParentFile()Ljava/io/File;",
        "Ljava/io/File;->isDirectory()Z",
        "Ljava/io/File;->mkdir()Z",
        "Ljava/io/File;->list()[Ljava/lang/String;",
        "Ljava/io/File;->getParent()Ljava/lang/String;",
        "Ljava/io/File;->exists()Z",
        "Ljava/io/File;->lastModified()J",
        "Ljava/io/File;->length()J",
        "Ljava/io/File;->mkdirs()Z"
    ],
    "Lnet/youmi/android/fv;": [
        "Lnet/youmi/android/fv;->a()V",
        "Lnet/youmi/android/fv;->a()I",
        "Lnet/youmi/android/fv;->a()Lnet/youmi/android/fx;",
        "Lnet/youmi/android/fv;->a()Lnet/youmi/android/fw;",
        "Lnet/youmi/android/fv;->a()Lnet/youmi/android/ga;"
    ],
    "Lnet/youmi/android/ga;": [
        "Lnet/youmi/android/ga;->a()V",
        "Lnet/youmi/android/ga;->a()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/bu;": [
        "Lnet/youmi/android/bu;->a()V"
    ],
    "Lnet/youmi/android/ej;": [
        "Lnet/youmi/android/ej;->a()Ljava/lang/String;"
    ],
    "Lorg/apache/http/params/HttpConnectionParams;": [
        "Lorg/apache/http/params/HttpConnectionParams;->setConnectionTimeout()V",
        "Lorg/apache/http/params/HttpConnectionParams;->setSocketBufferSize()V",
        "Lorg/apache/http/params/HttpConnectionParams;->setStaleCheckingEnabled()V",
        "Lorg/apache/http/params/HttpConnectionParams;->setSoTimeout()V"
    ],
    "Lorg/apache/http/client/params/HttpClientParams;": [
        "Lorg/apache/http/client/params/HttpClientParams;->setRedirecting()V"
    ],
    "Lorg/apache/http/params/HttpProtocolParams;": [
        "Lorg/apache/http/params/HttpProtocolParams;->setVersion()V",
        "Lorg/apache/http/params/HttpProtocolParams;->setUseExpectContinue()V",
        "Lorg/apache/http/params/HttpProtocolParams;->setUserAgent()V",
        "Lorg/apache/http/params/HttpProtocolParams;->setContentCharset()V",
        "Lorg/apache/http/params/HttpProtocolParams;->setHttpElementCharset()V"
    ],
    "Lnet/youmi/android/hc;": [
        "Lnet/youmi/android/hc;->a()Ljava/lang/String;"
    ],
    "Lorg/apache/http/params/BasicHttpParams;": [
        "Lorg/apache/http/params/BasicHttpParams;->setParameter()Lorg/apache/http/params/HttpParams;"
    ],
    "Landroid/net/ConnectivityManager;": [
        "Landroid/net/ConnectivityManager;->getNetworkInfo()Landroid/net/NetworkInfo;",
        "Landroid/net/ConnectivityManager;->getActiveNetworkInfo()Landroid/net/NetworkInfo;"
    ],
    "Landroid/net/NetworkInfo;": [
        "Landroid/net/NetworkInfo;->isConnectedOrConnecting()Z",
        "Landroid/net/NetworkInfo;->getType()I",
        "Landroid/net/NetworkInfo;->isAvailable()Z",
        "Landroid/net/NetworkInfo;->getSubtypeName()Ljava/lang/String;",
        "Landroid/net/NetworkInfo;->getState()Landroid/net/NetworkInfo$State;",
        "Landroid/net/NetworkInfo;->getExtraInfo()Ljava/lang/String;",
        "Landroid/net/NetworkInfo;->isConnected()Z",
        "Landroid/net/NetworkInfo;->getTypeName()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/fy;": [
        "Lnet/youmi/android/fy;->a()Ljava/lang/String;",
        "Lnet/youmi/android/fy;->a()Lnet/youmi/android/fy;",
        "Lnet/youmi/android/fy;->a()J",
        "Lnet/youmi/android/fy;->a()Z",
        "Lnet/youmi/android/fy;->a()Lnet/youmi/android/ce;"
    ],
    "Lnet/youmi/android/dl;": [
        "Lnet/youmi/android/dl;->a()Ljava/lang/String;"
    ],
    "Lorg/json/JSONObject;": [
        "Lorg/json/JSONObject;->getLong()J",
        "Lorg/json/JSONObject;->isNull()Z",
        "Lorg/json/JSONObject;->remove()Ljava/lang/Object;",
        "Lorg/json/JSONObject;->toString()Ljava/lang/String;",
        "Lorg/json/JSONObject;->getInt()I",
        "Lorg/json/JSONObject;->getString()Ljava/lang/String;",
        "Lorg/json/JSONObject;->getJSONObject()Lorg/json/JSONObject;",
        "Lorg/json/JSONObject;->length()I",
        "Lorg/json/JSONObject;->put()Lorg/json/JSONObject;",
        "Lorg/json/JSONObject;->getJSONArray()Lorg/json/JSONArray;"
    ],
    "Lnet/youmi/android/ce;": [
        "Lnet/youmi/android/ce;->a()Lorg/json/JSONObject;",
        "Lnet/youmi/android/ce;->a()V"
    ],
    "Lnet/youmi/android/gw;": [
        "Lnet/youmi/android/gw;->a()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/hb;": [
        "Lnet/youmi/android/hb;->a()Lorg/json/JSONObject;",
        "Lnet/youmi/android/hb;->a()I",
        "Lnet/youmi/android/hb;->a()J",
        "Lnet/youmi/android/hb;->a()Lorg/json/JSONArray;",
        "Lnet/youmi/android/hb;->a()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/eo;": [
        "Lnet/youmi/android/eo;->a()Landroid/widget/ImageSwitcher;",
        "Lnet/youmi/android/eo;->a()Lnet/youmi/android/ed;",
        "Lnet/youmi/android/eo;->a()Ljava/lang/String;",
        "Lnet/youmi/android/eo;->addView()V",
        "Lnet/youmi/android/eo;->a()V",
        "Lnet/youmi/android/eo;->setBackgroundColor()V",
        "Lnet/youmi/android/eo;->a()Landroid/widget/Gallery;",
        "Lnet/youmi/android/eo;->a()Lnet/youmi/android/ec;",
        "Lnet/youmi/android/eo;->a()Z"
    ],
    "Landroid/widget/Gallery;": [
        "Landroid/widget/Gallery;->setVisibility()V",
        "Landroid/widget/Gallery;->getSelectedItemPosition()I",
        "Landroid/widget/Gallery;->setAdapter()V",
        "Landroid/widget/Gallery;->getVisibility()I",
        "Landroid/widget/Gallery;->setSelection()V",
        "Landroid/widget/Gallery;->setOnItemClickListener()V",
        "Landroid/widget/Gallery;->onSizeChanged()V"
    ],
    "Lnet/youmi/android/a;": [
        "Lnet/youmi/android/a;->a()V",
        "Lnet/youmi/android/a;->a()Lnet/youmi/android/ce;"
    ],
    "Lnet/youmi/android/cz;": [
        "Lnet/youmi/android/cz;->a()Ljava/lang/String;",
        "Lnet/youmi/android/cz;->a()Lnet/youmi/android/bx;",
        "Lnet/youmi/android/cz;->a()[Ljava/lang/String;",
        "Lnet/youmi/android/cz;->a()I",
        "Lnet/youmi/android/cz;->ac()I",
        "Lnet/youmi/android/cz;->a()V",
        "Lnet/youmi/android/cz;->ae()I",
        "Lnet/youmi/android/cz;->ad()I",
        "Lnet/youmi/android/cz;->a()Lnet/youmi/android/cz;",
        "Lnet/youmi/android/cz;->ab()Lnet/youmi/android/ih;",
        "Lnet/youmi/android/cz;->a()Landroid/graphics/Bitmap;",
        "Lnet/youmi/android/cz;->a()Z",
        "Lnet/youmi/android/cz;->aa()I",
        "Lnet/youmi/android/cz;->a()Lnet/youmi/android/ee;",
        "Lnet/youmi/android/cz;->a()J"
    ],
    "Lnet/youmi/android/cp;": [
        "Lnet/youmi/android/cp;->a()Lnet/youmi/android/cz;",
        "Lnet/youmi/android/cp;->a()V"
    ],
    "Landroid/content/Intent;": [
        "Landroid/content/Intent;->setClass()Landroid/content/Intent;",
        "Landroid/content/Intent;->getAction()Ljava/lang/String;",
        "Landroid/content/Intent;->setClassName()Landroid/content/Intent;",
        "Landroid/content/Intent;->getBooleanExtra()Z",
        "Landroid/content/Intent;->putExtra()Landroid/content/Intent;",
        "Landroid/content/Intent;->createChooser()Landroid/content/Intent;",
        "Landroid/content/Intent;->parseUri()Landroid/content/Intent;",
        "Landroid/content/Intent;->setFlags()Landroid/content/Intent;",
        "Landroid/content/Intent;->getStringExtra()Ljava/lang/String;",
        "Landroid/content/Intent;->setType()Landroid/content/Intent;",
        "Landroid/content/Intent;->setDataAndType()Landroid/content/Intent;",
        "Landroid/content/Intent;->setComponent()Landroid/content/Intent;",
        "Landroid/content/Intent;->addCategory()Landroid/content/Intent;",
        "Landroid/content/Intent;->getData()Landroid/net/Uri;",
        "Landroid/content/Intent;->putExtras()Landroid/content/Intent;",
        "Landroid/content/Intent;->addFlags()Landroid/content/Intent;",
        "Landroid/content/Intent;->getExtras()Landroid/os/Bundle;",
        "Landroid/content/Intent;->getDataString()Ljava/lang/String;",
        "Landroid/content/Intent;->getStringArrayExtra()[Ljava/lang/String;"
    ],
    "Lnet/youmi/android/bm;": [
        "Lnet/youmi/android/bm;->a()V",
        "Lnet/youmi/android/bm;->a()Z"
    ],
    "Lnet/youmi/android/br;": [
        "Lnet/youmi/android/br;->a()Z",
        "Lnet/youmi/android/br;->a()[B"
    ],
    "Ljava/lang/Thread;": [
        "Ljava/lang/Thread;->setDaemon()V",
        "Ljava/lang/Thread;->isAlive()Z",
        "Ljava/lang/Thread;->sleep()V",
        "Ljava/lang/Thread;->setName()V",
        "Ljava/lang/Thread;->getContextClassLoader()Ljava/lang/ClassLoader;",
        "Ljava/lang/Thread;->start()V",
        "Ljava/lang/Thread;->join()V",
        "Ljava/lang/Thread;->currentThread()Ljava/lang/Thread;",
        "Ljava/lang/Thread;->interrupt()V"
    ],
    "Landroid/webkit/WebView;": [
        "Landroid/webkit/WebView;->setClickable()V",
        "Landroid/webkit/WebView;->post()Z",
        "Landroid/webkit/WebView;->reload()V",
        "Landroid/webkit/WebView;->clearCache()V",
        "Landroid/webkit/WebView;->enablePlatformNotifications()V",
        "Landroid/webkit/WebView;->getSettings()Landroid/webkit/WebSettings;",
        "Landroid/webkit/WebView;->onAttachedToWindow()V",
        "Landroid/webkit/WebView;->onDetachedFromWindow()V",
        "Landroid/webkit/WebView;->setOnTouchListener()V",
        "Landroid/webkit/WebView;->setLongClickable()V",
        "Landroid/webkit/WebView;->loadDataWithBaseURL()V",
        "Landroid/webkit/WebView;->loadUrl()V",
        "Landroid/webkit/WebView;->setWebViewClient()V"
    ],
    "Lnet/youmi/android/fu;": [
        "Lnet/youmi/android/fu;->a()I"
    ],
    "Ljava/lang/Exception;": [
        "Ljava/lang/Exception;->getMessage()Ljava/lang/String;",
        "Ljava/lang/Exception;->toString()Ljava/lang/String;",
        "Ljava/lang/Exception;->printStackTrace()V"
    ],
    "Lnet/youmi/android/m;": [
        "Lnet/youmi/android/m;->a()Landroid/graphics/drawable/Drawable;"
    ],
    "Lnet/youmi/android/g;": [
        "Lnet/youmi/android/g;->a()[I",
        "Lnet/youmi/android/g;->addView()V",
        "Lnet/youmi/android/g;->a()V",
        "Lnet/youmi/android/g;->a()Landroid/view/View;",
        "Lnet/youmi/android/g;->getId()I",
        "Lnet/youmi/android/g;->setBackgroundDrawable()V",
        "Lnet/youmi/android/g;->setStretchAllColumns()V",
        "Lnet/youmi/android/g;->setId()V"
    ],
    "Landroid/graphics/BitmapFactory;": [
        "Landroid/graphics/BitmapFactory;->decodeFile()Landroid/graphics/Bitmap;",
        "Landroid/graphics/BitmapFactory;->decodeStream()Landroid/graphics/Bitmap;",
        "Landroid/graphics/BitmapFactory;->decodeResource()Landroid/graphics/Bitmap;",
        "Landroid/graphics/BitmapFactory;->decodeByteArray()Landroid/graphics/Bitmap;"
    ],
    "Lnet/youmi/android/dk;": [
        "Lnet/youmi/android/dk;->a()Ljava/lang/String;",
        "Lnet/youmi/android/dk;->a()Z"
    ],
    "Ljava/io/ByteArrayOutputStream;": [
        "Ljava/io/ByteArrayOutputStream;->write()V",
        "Ljava/io/ByteArrayOutputStream;->reset()V",
        "Ljava/io/ByteArrayOutputStream;->toByteArray()[B",
        "Ljava/io/ByteArrayOutputStream;->size()I",
        "Ljava/io/ByteArrayOutputStream;->toString()Ljava/lang/String;",
        "Ljava/io/ByteArrayOutputStream;->close()V"
    ],
    "Lnet/youmi/android/gx;": [
        "Lnet/youmi/android/gx;->a()B",
        "Lnet/youmi/android/gx;->a()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/ff;": [
        "Lnet/youmi/android/ff;->a()Ljava/lang/String;",
        "Lnet/youmi/android/ff;->a()Lorg/json/JSONObject;"
    ],
    "Lnet/youmi/android/fm;": [
        "Lnet/youmi/android/fm;->a()Lnet/youmi/android/ev;"
    ],
    "Lnet/youmi/android/ev;": [
        "Lnet/youmi/android/ev;->a()Ljava/lang/String;"
    ],
    "Lorg/apache/http/client/methods/HttpRequestBase;": [
        "Lorg/apache/http/client/methods/HttpRequestBase;->abort()V",
        "Lorg/apache/http/client/methods/HttpRequestBase;->setHeader()V"
    ],
    "Ljava/util/List;": [
        "Ljava/util/List;->remove()Ljava/lang/Object;",
        "Ljava/util/List;->contains()Z",
        "Ljava/util/List;->isEmpty()Z",
        "Ljava/util/List;->toArray()[Ljava/lang/Object;",
        "Ljava/util/List;->size()I",
        "Ljava/util/List;->add()Z",
        "Ljava/util/List;->get()Ljava/lang/Object;",
        "Ljava/util/List;->iterator()Ljava/util/Iterator;",
        "Ljava/util/List;->clear()V",
        "Ljava/util/List;->indexOf()I",
        "Ljava/util/List;->add()V",
        "Ljava/util/List;->subList()Ljava/util/List;",
        "Ljava/util/List;->removeAll()Z",
        "Ljava/util/List;->remove()Z",
        "Ljava/util/List;->set()Ljava/lang/Object;",
        "Ljava/util/List;->addAll()Z"
    ],
    "Lorg/apache/http/client/methods/HttpPost;": [
        "Lorg/apache/http/client/methods/HttpPost;->abort()V",
        "Lorg/apache/http/client/methods/HttpPost;->setEntity()V",
        "Lorg/apache/http/client/methods/HttpPost;->setHeader()V"
    ],
    "Lorg/apache/http/util/EntityUtils;": [
        "Lorg/apache/http/util/EntityUtils;->getContentCharSet()Ljava/lang/String;",
        "Lorg/apache/http/util/EntityUtils;->toString()Ljava/lang/String;",
        "Lorg/apache/http/util/EntityUtils;->toByteArray()[B"
    ],
    "Lnet/youmi/android/ft;": [
        "Lnet/youmi/android/ft;->a()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/eg;": [
        "Lnet/youmi/android/eg;->publishProgress()V",
        "Lnet/youmi/android/eg;->a()Ljava/lang/Integer;",
        "Lnet/youmi/android/eg;->execute()Landroid/os/AsyncTask;",
        "Lnet/youmi/android/eg;->cancel()Z",
        "Lnet/youmi/android/eg;->a()V"
    ],
    "Lnet/youmi/android/eh;": [
        "Lnet/youmi/android/eh;->a()V",
        "Lnet/youmi/android/eh;->setScaleType()V",
        "Lnet/youmi/android/eh;->setImageBitmap()V"
    ],
    "Landroid/app/PendingIntent;": [
        "Landroid/app/PendingIntent;->getActivity()Landroid/app/PendingIntent;"
    ],
    "Landroid/app/Notification;": [
        "Landroid/app/Notification;->setLatestEventInfo()V"
    ],
    "Landroid/app/NotificationManager;": [
        "Landroid/app/NotificationManager;->cancel()V",
        "Landroid/app/NotificationManager;->notify()V"
    ],
    "Lnet/youmi/android/ch;": [
        "Lnet/youmi/android/ch;->execute()Landroid/os/AsyncTask;",
        "Lnet/youmi/android/ch;->a()Ljava/io/File;",
        "Lnet/youmi/android/ch;->publishProgress()V",
        "Lnet/youmi/android/ch;->a()V"
    ],
    "Lnet/youmi/android/bd;": [
        "Lnet/youmi/android/bd;->a()Z",
        "Lnet/youmi/android/bd;->a()V"
    ],
    "Lnet/youmi/android/hx;": [
        "Lnet/youmi/android/hx;->a()Z"
    ],
    "Lnet/youmi/android/dj;": [
        "Lnet/youmi/android/dj;->a()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/bf;": [
        "Lnet/youmi/android/bf;->a()Lnet/youmi/android/dd;"
    ],
    "Lnet/youmi/android/dd;": [
        "Lnet/youmi/android/dd;->a()Z",
        "Lnet/youmi/android/dd;->a()Ljava/lang/String;",
        "Lnet/youmi/android/dd;->a()[Ljava/lang/String;",
        "Lnet/youmi/android/dd;->a()V",
        "Lnet/youmi/android/dd;->a()Ljava/io/File;",
        "Lnet/youmi/android/dd;->a()Landroid/graphics/Bitmap;",
        "Lnet/youmi/android/dd;->a()J"
    ],
    "Lorg/apache/http/client/methods/HttpUriRequest;": [
        "Lorg/apache/http/client/methods/HttpUriRequest;->setHeader()V",
        "Lorg/apache/http/client/methods/HttpUriRequest;->abort()V"
    ],
    "Lorg/apache/http/HttpEntity;": [
        "Lorg/apache/http/HttpEntity;->getContent()Ljava/io/InputStream;",
        "Lorg/apache/http/HttpEntity;->getContentType()Lorg/apache/http/Header;",
        "Lorg/apache/http/HttpEntity;->getContentEncoding()Lorg/apache/http/Header;",
        "Lorg/apache/http/HttpEntity;->getContentLength()J"
    ],
    "Ljava/io/InputStream;": [
        "Ljava/io/InputStream;->read()I",
        "Ljava/io/InputStream;->available()I",
        "Ljava/io/InputStream;->close()V"
    ],
    "Ljava/io/FileOutputStream;": [
        "Ljava/io/FileOutputStream;->close()V",
        "Ljava/io/FileOutputStream;->flush()V",
        "Ljava/io/FileOutputStream;->write()V"
    ],
    "Landroid/widget/Button;": [
        "Landroid/widget/Button;->setWidth()V",
        "Landroid/widget/Button;->setBackgroundResource()V",
        "Landroid/widget/Button;->setId()V",
        "Landroid/widget/Button;->getId()I",
        "Landroid/widget/Button;->setBackgroundDrawable()V",
        "Landroid/widget/Button;->setOnClickListener()V",
        "Landroid/widget/Button;->setHeight()V",
        "Landroid/widget/Button;->setText()V"
    ],
    "Lnet/youmi/android/bo;": [
        "Lnet/youmi/android/bo;->a()Landroid/widget/RelativeLayout$LayoutParams;"
    ],
    "Landroid/widget/RelativeLayout$LayoutParams;": [
        "Landroid/widget/RelativeLayout$LayoutParams;->addRule()V",
        "Landroid/widget/RelativeLayout$LayoutParams;->setMargins()V"
    ],
    "Landroid/net/Uri;": [
        "Landroid/net/Uri;->parse()Landroid/net/Uri;",
        "Landroid/net/Uri;->getQueryParameter()Ljava/lang/String;",
        "Landroid/net/Uri;->fromFile()Landroid/net/Uri;",
        "Landroid/net/Uri;->getPath()Ljava/lang/String;",
        "Landroid/net/Uri;->getSchemeSpecificPart()Ljava/lang/String;",
        "Landroid/net/Uri;->getQueryParameters()Ljava/util/List;"
    ],
    "Landroid/app/Activity;": [
        "Landroid/app/Activity;->startActivity()V",
        "Landroid/app/Activity;->onDestroy()V",
        "Landroid/app/Activity;->onActivityResult()V",
        "Landroid/app/Activity;->getPackageName()Ljava/lang/String;",
        "Landroid/app/Activity;->getTaskId()I",
        "Landroid/app/Activity;->onKeyDown()Z",
        "Landroid/app/Activity;->setTitle()V",
        "Landroid/app/Activity;->getFileStreamPath()Ljava/io/File;",
        "Landroid/app/Activity;->runOnUiThread()V",
        "Landroid/app/Activity;->getCacheDir()Ljava/io/File;",
        "Landroid/app/Activity;->onNewIntent()V",
        "Landroid/app/Activity;->onPrepareOptionsMenu()Z",
        "Landroid/app/Activity;->getWindowManager()Landroid/view/WindowManager;",
        "Landroid/app/Activity;->onTouchEvent()Z",
        "Landroid/app/Activity;->onPause()V",
        "Landroid/app/Activity;->onOptionsItemSelected()Z",
        "Landroid/app/Activity;->getComponentName()Landroid/content/ComponentName;",
        "Landroid/app/Activity;->onCreateOptionsMenu()Z",
        "Landroid/app/Activity;->setProgressBarVisibility()V",
        "Landroid/app/Activity;->getDatabasePath()Ljava/io/File;",
        "Landroid/app/Activity;->onResume()V",
        "Landroid/app/Activity;->setProgress()V",
        "Landroid/app/Activity;->setProgressBarIndeterminateVisibility()V",
        "Landroid/app/Activity;->onCreate()V",
        "Landroid/app/Activity;->getLayoutInflater()Landroid/view/LayoutInflater;",
        "Landroid/app/Activity;->getPackageManager()Landroid/content/pm/PackageManager;",
        "Landroid/app/Activity;->getResources()Landroid/content/res/Resources;",
        "Landroid/app/Activity;->onBackPressed()V",
        "Landroid/app/Activity;->openFileOutput()Ljava/io/FileOutputStream;",
        "Landroid/app/Activity;->finish()V",
        "Landroid/app/Activity;->onConfigurationChanged()V",
        "Landroid/app/Activity;->setContentView()V"
    ],
    "Lnet/youmi/android/fr;": [
        "Lnet/youmi/android/fr;->a()I",
        "Lnet/youmi/android/fr;->a()Ljava/lang/Integer;",
        "Lnet/youmi/android/fr;->a()Z",
        "Lnet/youmi/android/fr;->a()V",
        "Lnet/youmi/android/fr;->a()J",
        "Lnet/youmi/android/fr;->execute()Landroid/os/AsyncTask;",
        "Lnet/youmi/android/fr;->publishProgress()V",
        "Lnet/youmi/android/fr;->a()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/by;": [
        "Lnet/youmi/android/by;->setDownloadListener()V",
        "Lnet/youmi/android/by;->setScrollContainer()V",
        "Lnet/youmi/android/by;->a()Z",
        "Lnet/youmi/android/by;->setId()V",
        "Lnet/youmi/android/by;->setWebViewClient()V",
        "Lnet/youmi/android/by;->getSettings()Landroid/webkit/WebSettings;",
        "Lnet/youmi/android/by;->loadDataWithBaseURL()V",
        "Lnet/youmi/android/by;->a()V",
        "Lnet/youmi/android/by;->setClickable()V",
        "Lnet/youmi/android/by;->setWebChromeClient()V"
    ],
    "Lnet/youmi/android/t;": [
        "Lnet/youmi/android/t;->setVisibility()V",
        "Lnet/youmi/android/t;->a()V",
        "Lnet/youmi/android/t;->addView()V",
        "Lnet/youmi/android/t;->a()Z"
    ],
    "Lnet/youmi/android/bl;": [
        "Lnet/youmi/android/bl;->a()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/x;": [
        "Lnet/youmi/android/x;->addView()V",
        "Lnet/youmi/android/x;->startAnimation()V",
        "Lnet/youmi/android/x;->a()V",
        "Lnet/youmi/android/x;->setVisibility()V",
        "Lnet/youmi/android/x;->a()Z"
    ],
    "Lnet/youmi/android/dn;": [
        "Lnet/youmi/android/dn;->a()Lnet/youmi/android/cy;",
        "Lnet/youmi/android/dn;->a()Lnet/youmi/android/do;",
        "Lnet/youmi/android/dn;->a()Lnet/youmi/android/dp;",
        "Lnet/youmi/android/dn;->a()I"
    ],
    "Lnet/youmi/android/dp;": [
        "Lnet/youmi/android/dp;->a()I"
    ],
    "Landroid/graphics/Canvas;": [
        "Landroid/graphics/Canvas;->save()I",
        "Landroid/graphics/Canvas;->getWidth()I",
        "Landroid/graphics/Canvas;->drawCircle()V",
        "Landroid/graphics/Canvas;->drawPoint()V",
        "Landroid/graphics/Canvas;->drawLine()V",
        "Landroid/graphics/Canvas;->drawPath()V",
        "Landroid/graphics/Canvas;->scale()V",
        "Landroid/graphics/Canvas;->restore()V",
        "Landroid/graphics/Canvas;->drawRoundRect()V",
        "Landroid/graphics/Canvas;->drawRGB()V",
        "Landroid/graphics/Canvas;->getHeight()I",
        "Landroid/graphics/Canvas;->drawRect()V",
        "Landroid/graphics/Canvas;->skew()V",
        "Landroid/graphics/Canvas;->drawColor()V",
        "Landroid/graphics/Canvas;->drawText()V",
        "Landroid/graphics/Canvas;->drawBitmap()V"
    ],
    "Lnet/youmi/android/AdActivity;": [
        "Lnet/youmi/android/AdActivity;->a()Landroid/content/Intent;",
        "Lnet/youmi/android/AdActivity;->finish()V",
        "Lnet/youmi/android/AdActivity;->setContentView()V",
        "Lnet/youmi/android/AdActivity;->setTitle()V",
        "Lnet/youmi/android/AdActivity;->getIntent()Landroid/content/Intent;",
        "Lnet/youmi/android/AdActivity;->startActivity()V",
        "Lnet/youmi/android/AdActivity;->requestWindowFeature()Z",
        "Lnet/youmi/android/AdActivity;->getWindow()Landroid/view/Window;",
        "Lnet/youmi/android/AdActivity;->a()V",
        "Lnet/youmi/android/AdActivity;->setProgressBarIndeterminate()V"
    ],
    "Lnet/youmi/android/go;": [
        "Lnet/youmi/android/go;->a()V",
        "Lnet/youmi/android/go;->a()Ljava/lang/String;",
        "Lnet/youmi/android/go;->a()Z",
        "Lnet/youmi/android/go;->a()J",
        "Lnet/youmi/android/go;->a()Lnet/youmi/android/go;",
        "Lnet/youmi/android/go;->a()Ljava/io/File;"
    ],
    "Ljava/lang/Math;": [
        "Ljava/lang/Math;->abs()F",
        "Ljava/lang/Math;->log()D",
        "Ljava/lang/Math;->max()I",
        "Ljava/lang/Math;->abs()J",
        "Ljava/lang/Math;->abs()I",
        "Ljava/lang/Math;->max()F",
        "Ljava/lang/Math;->abs()D",
        "Ljava/lang/Math;->sqrt()D",
        "Ljava/lang/Math;->min()F",
        "Ljava/lang/Math;->ceil()D",
        "Ljava/lang/Math;->round()I",
        "Ljava/lang/Math;->random()D",
        "Ljava/lang/Math;->min()I",
        "Ljava/lang/Math;->pow()D"
    ],
    "Landroid/view/WindowManager;": [
        "Landroid/view/WindowManager;->getDefaultDisplay()Landroid/view/Display;"
    ],
    "Landroid/view/Display;": [
        "Landroid/view/Display;->getMetrics()V",
        "Landroid/view/Display;->getWidth()I",
        "Landroid/view/Display;->getHeight()I"
    ],
    "Landroid/content/res/Resources;": [
        "Landroid/content/res/Resources;->openRawResource()Ljava/io/InputStream;",
        "Landroid/content/res/Resources;->getIdentifier()I",
        "Landroid/content/res/Resources;->getDisplayMetrics()Landroid/util/DisplayMetrics;",
        "Landroid/content/res/Resources;->getColor()I",
        "Landroid/content/res/Resources;->getString()Ljava/lang/String;",
        "Landroid/content/res/Resources;->getConfiguration()Landroid/content/res/Configuration;"
    ],
    "Lnet/youmi/android/az;": [
        "Lnet/youmi/android/az;->a()Lnet/youmi/android/cg;",
        "Lnet/youmi/android/az;->a()Z",
        "Lnet/youmi/android/az;->a()Ljava/util/Properties;",
        "Lnet/youmi/android/az;->a()V"
    ],
    "Landroid/os/Handler;": [
        "Landroid/os/Handler;->post()Z",
        "Landroid/os/Handler;->removeCallbacks()V",
        "Landroid/os/Handler;->sendMessage()Z",
        "Landroid/os/Handler;->obtainMessage()Landroid/os/Message;",
        "Landroid/os/Handler;->sendMessageDelayed()Z",
        "Landroid/os/Handler;->postDelayed()Z"
    ],
    "Lnet/youmi/android/as;": [
        "Lnet/youmi/android/as;->a()Lnet/youmi/android/ge;",
        "Lnet/youmi/android/as;->a()Landroid/location/Location;",
        "Lnet/youmi/android/as;->a()V"
    ],
    "Lnet/youmi/android/aw;": [
        "Lnet/youmi/android/aw;->a()Z",
        "Lnet/youmi/android/aw;->a()V"
    ],
    "Lnet/youmi/android/n;": [
        "Lnet/youmi/android/n;->a()V"
    ],
    "Lnet/youmi/android/av;": [
        "Lnet/youmi/android/av;->a()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/bt;": [
        "Lnet/youmi/android/bt;->a()Z"
    ],
    "Lnet/youmi/android/cy;": [
        "Lnet/youmi/android/cy;->a()I"
    ],
    "Lnet/youmi/android/ei;": [
        "Lnet/youmi/android/ei;->a()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/aq;": [
        "Lnet/youmi/android/aq;->a()Ljava/lang/String;",
        "Lnet/youmi/android/aq;->a()V"
    ],
    "Lnet/youmi/android/he;": [
        "Lnet/youmi/android/he;->a()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/hy;": [
        "Lnet/youmi/android/hy;->getContext()Landroid/content/Context;",
        "Lnet/youmi/android/hy;->addJavascriptInterface()V",
        "Lnet/youmi/android/hy;->reload()V",
        "Lnet/youmi/android/hy;->getUrl()Ljava/lang/String;",
        "Lnet/youmi/android/hy;->setScrollBarStyle()V",
        "Lnet/youmi/android/hy;->setDownloadListener()V",
        "Lnet/youmi/android/hy;->post()Z",
        "Lnet/youmi/android/hy;->loadUrl()V",
        "Lnet/youmi/android/hy;->a()V",
        "Lnet/youmi/android/hy;->setWebChromeClient()V",
        "Lnet/youmi/android/hy;->setWebViewClient()V",
        "Lnet/youmi/android/hy;->getSettings()Landroid/webkit/WebSettings;"
    ],
    "Lnet/youmi/android/fl;": [
        "Lnet/youmi/android/fl;->a()Lorg/json/JSONObject;",
        "Lnet/youmi/android/fl;->a()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/bb;": [
        "Lnet/youmi/android/bb;->a()V"
    ],
    "Landroid/location/LocationManager;": [
        "Landroid/location/LocationManager;->removeUpdates()V",
        "Landroid/location/LocationManager;->getLastKnownLocation()Landroid/location/Location;",
        "Landroid/location/LocationManager;->addGpsStatusListener()Z",
        "Landroid/location/LocationManager;->requestLocationUpdates()V"
    ],
    "Landroid/location/Location;": [
        "Landroid/location/Location;->getSpeed()F",
        "Landroid/location/Location;->hasAccuracy()Z",
        "Landroid/location/Location;->getTime()J",
        "Landroid/location/Location;->getAltitude()D",
        "Landroid/location/Location;->getLongitude()D",
        "Landroid/location/Location;->getAccuracy()F",
        "Landroid/location/Location;->distanceTo()F",
        "Landroid/location/Location;->getBearing()F",
        "Landroid/location/Location;->setLatitude()V",
        "Landroid/location/Location;->setLongitude()V",
        "Landroid/location/Location;->setAccuracy()V",
        "Landroid/location/Location;->getLatitude()D"
    ],
    "Lnet/youmi/android/ge;": [
        "Lnet/youmi/android/ge;->a()V"
    ],
    "Lorg/apache/http/Header;": [
        "Lorg/apache/http/Header;->getValue()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/ex;": [
        "Lnet/youmi/android/ex;->a()V"
    ],
    "Ljava/net/URI;": [
        "Ljava/net/URI;->resolve()Ljava/net/URI;",
        "Ljava/net/URI;->toString()Ljava/lang/String;",
        "Ljava/net/URI;->create()Ljava/net/URI;"
    ],
    "Landroid/widget/ImageView;": [
        "Landroid/widget/ImageView;->setOnClickListener()V",
        "Landroid/widget/ImageView;->setImageResource()V",
        "Landroid/widget/ImageView;->onDetachedFromWindow()V",
        "Landroid/widget/ImageView;->setLayoutParams()V",
        "Landroid/widget/ImageView;->setVisibility()V",
        "Landroid/widget/ImageView;->getMeasuredHeight()I",
        "Landroid/widget/ImageView;->getLayoutParams()Landroid/view/ViewGroup$LayoutParams;",
        "Landroid/widget/ImageView;->setTag()V",
        "Landroid/widget/ImageView;->setBackgroundResource()V",
        "Landroid/widget/ImageView;->setImageDrawable()V",
        "Landroid/widget/ImageView;->onWindowFocusChanged()V",
        "Landroid/widget/ImageView;->layout()V",
        "Landroid/widget/ImageView;->getMeasuredWidth()I",
        "Landroid/widget/ImageView;->setImageBitmap()V",
        "Landroid/widget/ImageView;->setPadding()V",
        "Landroid/widget/ImageView;->setScaleType()V",
        "Landroid/widget/ImageView;->startAnimation()V",
        "Landroid/widget/ImageView;->measure()V"
    ],
    "Lnet/youmi/android/q;": [
        "Lnet/youmi/android/q;->a()Lnet/youmi/android/s;",
        "Lnet/youmi/android/q;->a()I",
        "Lnet/youmi/android/q;->setVisibility()V",
        "Lnet/youmi/android/q;->a()Lnet/youmi/android/t;",
        "Lnet/youmi/android/q;->a()Lnet/youmi/android/x;",
        "Lnet/youmi/android/q;->a()V",
        "Lnet/youmi/android/q;->a()Lnet/youmi/android/w;",
        "Lnet/youmi/android/q;->addView()V",
        "Lnet/youmi/android/q;->a()Lnet/youmi/android/v;"
    ],
    "Lnet/youmi/android/w;": [
        "Lnet/youmi/android/w;->startAnimation()V",
        "Lnet/youmi/android/w;->setBackgroundColor()V",
        "Lnet/youmi/android/w;->a()V",
        "Lnet/youmi/android/w;->a()Landroid/widget/ImageView;",
        "Lnet/youmi/android/w;->addView()V",
        "Lnet/youmi/android/w;->a()Z",
        "Lnet/youmi/android/w;->setVisibility()V",
        "Lnet/youmi/android/w;->getId()I",
        "Lnet/youmi/android/w;->setId()V"
    ],
    "Lnet/youmi/android/bx;": [
        "Lnet/youmi/android/bx;->a()V",
        "Lnet/youmi/android/bx;->a()Ljava/lang/String;"
    ],
    "Landroid/webkit/WebSettings;": [
        "Landroid/webkit/WebSettings;->setAppCacheMaxSize()V",
        "Landroid/webkit/WebSettings;->setCacheMode()V",
        "Landroid/webkit/WebSettings;->setDatabaseEnabled()V",
        "Landroid/webkit/WebSettings;->setAppCacheEnabled()V",
        "Landroid/webkit/WebSettings;->setSupportZoom()V",
        "Landroid/webkit/WebSettings;->setUseWideViewPort()V",
        "Landroid/webkit/WebSettings;->setJavaScriptEnabled()V",
        "Landroid/webkit/WebSettings;->setSaveFormData()V",
        "Landroid/webkit/WebSettings;->setAllowFileAccess()V",
        "Landroid/webkit/WebSettings;->setJavaScriptCanOpenWindowsAutomatically()V",
        "Landroid/webkit/WebSettings;->setSavePassword()V",
        "Landroid/webkit/WebSettings;->setGeolocationDatabasePath()V",
        "Landroid/webkit/WebSettings;->setLightTouchEnabled()V",
        "Landroid/webkit/WebSettings;->setAppCachePath()V",
        "Landroid/webkit/WebSettings;->setGeolocationEnabled()V",
        "Landroid/webkit/WebSettings;->setDatabasePath()V",
        "Landroid/webkit/WebSettings;->setBuiltInZoomControls()V",
        "Landroid/webkit/WebSettings;->setLayoutAlgorithm()V",
        "Landroid/webkit/WebSettings;->setDomStorageEnabled()V"
    ],
    "Lnet/youmi/android/cc;": [
        "Lnet/youmi/android/cc;->a()Z",
        "Lnet/youmi/android/cc;->a()Lnet/youmi/android/bx;"
    ],
    "Lnet/youmi/android/bg;": [
        "Lnet/youmi/android/bg;->a()Ljava/lang/String;",
        "Lnet/youmi/android/bg;->a()Ljava/util/ArrayList;",
        "Lnet/youmi/android/bg;->a()Z",
        "Lnet/youmi/android/bg;->a()Lnet/youmi/android/dh;",
        "Lnet/youmi/android/bg;->a()V",
        "Lnet/youmi/android/bg;->a()Landroid/app/Notification;",
        "Lnet/youmi/android/bg;->a()Lnet/youmi/android/di;"
    ],
    "Lnet/youmi/android/bh;": [
        "Lnet/youmi/android/bh;->a()Ljava/lang/String;",
        "Lnet/youmi/android/bh;->a()V",
        "Lnet/youmi/android/bh;->a()Ljava/util/ArrayList;"
    ],
    "Landroid/widget/Toast;": [
        "Landroid/widget/Toast;->setView()V",
        "Landroid/widget/Toast;->makeText()Landroid/widget/Toast;",
        "Landroid/widget/Toast;->getView()Landroid/view/View;",
        "Landroid/widget/Toast;->show()V"
    ],
    "Landroid/graphics/Bitmap;": [
        "Landroid/graphics/Bitmap;->setPixels()V",
        "Landroid/graphics/Bitmap;->createBitmap()Landroid/graphics/Bitmap;",
        "Landroid/graphics/Bitmap;->copyPixelsFromBuffer()V",
        "Landroid/graphics/Bitmap;->isRecycled()Z",
        "Landroid/graphics/Bitmap;->getWidth()I",
        "Landroid/graphics/Bitmap;->recycle()V",
        "Landroid/graphics/Bitmap;->compress()Z",
        "Landroid/graphics/Bitmap;->createScaledBitmap()Landroid/graphics/Bitmap;",
        "Landroid/graphics/Bitmap;->getHeight()I"
    ],
    "Lnet/youmi/android/gi;": [
        "Lnet/youmi/android/gi;->a()Lnet/youmi/android/gi;",
        "Lnet/youmi/android/gi;->a()V",
        "Lnet/youmi/android/gi;->a()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/hr;": [
        "Lnet/youmi/android/hr;->a()V"
    ],
    "Lnet/youmi/android/hi;": [
        "Lnet/youmi/android/hi;->a()Z"
    ],
    "Lnet/youmi/android/hd;": [
        "Lnet/youmi/android/hd;->a()I"
    ],
    "Lnet/youmi/android/gv;": [
        "Lnet/youmi/android/gv;->a()Ljava/io/FileOutputStream;",
        "Lnet/youmi/android/gv;->a()J",
        "Lnet/youmi/android/gv;->a()Z",
        "Lnet/youmi/android/gv;->a()Ljava/io/File;"
    ],
    "Ljava/lang/Long;": [
        "Ljava/lang/Long;->compareTo()I",
        "Ljava/lang/Long;->longValue()J",
        "Ljava/lang/Long;->valueOf()Ljava/lang/Long;",
        "Ljava/lang/Long;->toOctalString()Ljava/lang/String;",
        "Ljava/lang/Long;->toHexString()Ljava/lang/String;",
        "Ljava/lang/Long;->equals()Z",
        "Ljava/lang/Long;->toString()Ljava/lang/String;",
        "Ljava/lang/Long;->parseLong()J"
    ],
    "Lorg/apache/http/client/HttpClient;": [
        "Lorg/apache/http/client/HttpClient;->getConnectionManager()Lorg/apache/http/conn/ClientConnectionManager;",
        "Lorg/apache/http/client/HttpClient;->getParams()Lorg/apache/http/params/HttpParams;",
        "Lorg/apache/http/client/HttpClient;->execute()Lorg/apache/http/HttpResponse;",
        "Lorg/apache/http/client/HttpClient;->execute()Ljava/lang/Object;"
    ],
    "Ljava/io/RandomAccessFile;": [
        "Ljava/io/RandomAccessFile;->seek()V",
        "Ljava/io/RandomAccessFile;->write()V",
        "Ljava/io/RandomAccessFile;->close()V"
    ],
    "Lnet/youmi/android/fb;": [
        "Lnet/youmi/android/fb;->a()V"
    ],
    "Landroid/text/Html;": [
        "Landroid/text/Html;->fromHtml()Landroid/text/Spanned;"
    ],
    "Ljava/net/URLDecoder;": [
        "Ljava/net/URLDecoder;->decode()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/gc;": [
        "Lnet/youmi/android/gc;->a()J",
        "Lnet/youmi/android/gc;->a()Z",
        "Lnet/youmi/android/gc;->a()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/ey;": [
        "Lnet/youmi/android/ey;->a()Lnet/youmi/android/gv;",
        "Lnet/youmi/android/ey;->a()Ljava/io/File;",
        "Lnet/youmi/android/ey;->a()Z",
        "Lnet/youmi/android/ey;->a()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/co;": [
        "Lnet/youmi/android/co;->a()V",
        "Lnet/youmi/android/co;->a()Z",
        "Lnet/youmi/android/co;->execute()Landroid/os/AsyncTask;",
        "Lnet/youmi/android/co;->publishProgress()V",
        "Lnet/youmi/android/co;->a()Ljava/lang/Void;"
    ],
    "Lnet/youmi/android/ec;": [
        "Lnet/youmi/android/ec;->a()V",
        "Lnet/youmi/android/ec;->getCount()I",
        "Lnet/youmi/android/ec;->a()Lnet/youmi/android/ed;",
        "Lnet/youmi/android/ec;->a()Lnet/youmi/android/ec;"
    ],
    "Landroid/widget/ImageSwitcher;": [
        "Landroid/widget/ImageSwitcher;->setOutAnimation()V",
        "Landroid/widget/ImageSwitcher;->setFactory()V",
        "Landroid/widget/ImageSwitcher;->setOnTouchListener()V",
        "Landroid/widget/ImageSwitcher;->setBackgroundColor()V",
        "Landroid/widget/ImageSwitcher;->setInAnimation()V",
        "Landroid/widget/ImageSwitcher;->setOnClickListener()V",
        "Landroid/widget/ImageSwitcher;->setImageURI()V"
    ],
    "Lnet/youmi/android/fo;": [
        "Lnet/youmi/android/fo;->a()Ljava/lang/Boolean;",
        "Lnet/youmi/android/fo;->publishProgress()V",
        "Lnet/youmi/android/fo;->a()Lnet/youmi/android/fo;",
        "Lnet/youmi/android/fo;->isCancelled()Z",
        "Lnet/youmi/android/fo;->cancel()Z",
        "Lnet/youmi/android/fo;->a()V",
        "Lnet/youmi/android/fo;->execute()Landroid/os/AsyncTask;"
    ],
    "Ljava/lang/Boolean;": [
        "Ljava/lang/Boolean;->equals()Z",
        "Ljava/lang/Boolean;->valueOf()Ljava/lang/Boolean;",
        "Ljava/lang/Boolean;->parseBoolean()Z",
        "Ljava/lang/Boolean;->getBoolean()Z",
        "Ljava/lang/Boolean;->booleanValue()Z"
    ],
    "Lnet/youmi/android/ib;": [
        "Lnet/youmi/android/ib;->setVisibility()V",
        "Lnet/youmi/android/ib;->setFocusable()V",
        "Lnet/youmi/android/ib;->getVisibility()I",
        "Lnet/youmi/android/ib;->setBackgroundDrawable()V",
        "Lnet/youmi/android/ib;->addView()V",
        "Lnet/youmi/android/ib;->a()V",
        "Lnet/youmi/android/ib;->a()Lnet/youmi/android/cz;",
        "Lnet/youmi/android/ib;->setClickable()V"
    ],
    "Lnet/youmi/android/dc;": [
        "Lnet/youmi/android/dc;->a()I",
        "Lnet/youmi/android/dc;->a()V"
    ],
    "Lnet/youmi/android/do;": [
        "Lnet/youmi/android/do;->a()I",
        "Lnet/youmi/android/do;->a()F"
    ],
    "Lnet/youmi/android/if;": [
        "Lnet/youmi/android/if;->setBackgroundDrawable()V",
        "Lnet/youmi/android/if;->postInvalidate()V",
        "Lnet/youmi/android/if;->a()Lnet/youmi/android/cz;",
        "Lnet/youmi/android/if;->bringToFront()V",
        "Lnet/youmi/android/if;->setClickable()V",
        "Lnet/youmi/android/if;->a()V",
        "Lnet/youmi/android/if;->setBackgroundColor()V",
        "Lnet/youmi/android/if;->getHandler()Landroid/os/Handler;"
    ],
    "Lnet/youmi/android/ie;": [
        "Lnet/youmi/android/ie;->invalidate()V",
        "Lnet/youmi/android/ie;->bringToFront()V",
        "Lnet/youmi/android/ie;->a()V",
        "Lnet/youmi/android/ie;->getVisibility()I",
        "Lnet/youmi/android/ie;->setVisibility()V"
    ],
    "Landroid/view/animation/Animation;": [
        "Landroid/view/animation/Animation;->setDuration()V"
    ],
    "Lnet/youmi/android/ea;": [
        "Lnet/youmi/android/ea;->a()Z",
        "Lnet/youmi/android/ea;->a()V",
        "Lnet/youmi/android/ea;->execute()Landroid/os/AsyncTask;",
        "Lnet/youmi/android/ea;->a()[Ljava/lang/String;",
        "Lnet/youmi/android/ea;->publishProgress()V",
        "Lnet/youmi/android/ea;->a()Ljava/lang/String;",
        "Lnet/youmi/android/ea;->a()J"
    ],
    "Lnet/youmi/android/fx;": [
        "Lnet/youmi/android/fx;->a()Ljava/lang/String;",
        "Lnet/youmi/android/fx;->a()J",
        "Lnet/youmi/android/fx;->a()V"
    ],
    "Lnet/youmi/android/fz;": [
        "Lnet/youmi/android/fz;->a()Z",
        "Lnet/youmi/android/fz;->a()V"
    ],
    "Lnet/youmi/android/fw;": [
        "Lnet/youmi/android/fw;->a()I",
        "Lnet/youmi/android/fw;->a()Ljava/lang/String;",
        "Lnet/youmi/android/fw;->a()V"
    ],
    "Lnet/youmi/android/au;": [
        "Lnet/youmi/android/au;->a()V",
        "Lnet/youmi/android/au;->a()Z"
    ],
    "Landroid/widget/FrameLayout;": [
        "Landroid/widget/FrameLayout;->onWindowFocusChanged()V",
        "Landroid/widget/FrameLayout;->getWidth()I",
        "Landroid/widget/FrameLayout;->setVisibility()V",
        "Landroid/widget/FrameLayout;->getLeft()I",
        "Landroid/widget/FrameLayout;->addView()V",
        "Landroid/widget/FrameLayout;->setLayoutParams()V"
    ],
    "Lnet/youmi/android/o;": [
        "Lnet/youmi/android/o;->a()Ljava/lang/String;",
        "Lnet/youmi/android/o;->a()V",
        "Lnet/youmi/android/o;->a()J"
    ],
    "Lnet/youmi/android/ba;": [
        "Lnet/youmi/android/ba;->a()Z",
        "Lnet/youmi/android/ba;->a()Lnet/youmi/android/cz;",
        "Lnet/youmi/android/ba;->a()Ljava/lang/String;",
        "Lnet/youmi/android/ba;->a()I"
    ],
    "Landroid/content/SharedPreferences;": [
        "Landroid/content/SharedPreferences;->getInt()I",
        "Landroid/content/SharedPreferences;->contains()Z",
        "Landroid/content/SharedPreferences;->edit()Landroid/content/SharedPreferences$Editor;",
        "Landroid/content/SharedPreferences;->getBoolean()Z",
        "Landroid/content/SharedPreferences;->getString()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/al;": [
        "Lnet/youmi/android/al;->a()[B",
        "Lnet/youmi/android/al;->a()V"
    ],
    "Lnet/youmi/android/am;": [
        "Lnet/youmi/android/am;->a()Ljava/lang/String;",
        "Lnet/youmi/android/am;->a()[B",
        "Lnet/youmi/android/am;->a()Ljava/security/Key;"
    ],
    "Lnet/youmi/android/gy;": [
        "Lnet/youmi/android/gy;->a()I"
    ],
    "Landroid/content/SharedPreferences$Editor;": [
        "Landroid/content/SharedPreferences$Editor;->commit()Z",
        "Landroid/content/SharedPreferences$Editor;->putBoolean()Landroid/content/SharedPreferences$Editor;",
        "Landroid/content/SharedPreferences$Editor;->putString()Landroid/content/SharedPreferences$Editor;",
        "Landroid/content/SharedPreferences$Editor;->putLong()Landroid/content/SharedPreferences$Editor;",
        "Landroid/content/SharedPreferences$Editor;->putInt()Landroid/content/SharedPreferences$Editor;",
        "Landroid/content/SharedPreferences$Editor;->remove()Landroid/content/SharedPreferences$Editor;",
        "Landroid/content/SharedPreferences$Editor;->clear()Landroid/content/SharedPreferences$Editor;"
    ],
    "Lnet/youmi/android/gt;": [
        "Lnet/youmi/android/gt;->setId()V",
        "Lnet/youmi/android/gt;->setVisibility()V",
        "Lnet/youmi/android/gt;->getLayoutParams()Landroid/view/ViewGroup$LayoutParams;",
        "Lnet/youmi/android/gt;->postInvalidate()V",
        "Lnet/youmi/android/gt;->a()V"
    ],
    "Lnet/youmi/android/ac;": [
        "Lnet/youmi/android/ac;->addView()V",
        "Lnet/youmi/android/ac;->setId()V",
        "Lnet/youmi/android/ac;->a()V"
    ],
    "Ljava/io/OutputStream;": [
        "Ljava/io/OutputStream;->flush()V",
        "Ljava/io/OutputStream;->write()V",
        "Ljava/io/OutputStream;->close()V"
    ],
    "Lnet/youmi/android/gd;": [
        "Lnet/youmi/android/gd;->a()Z",
        "Lnet/youmi/android/gd;->a()I"
    ],
    "Ljava/lang/StringBuffer;": [
        "Ljava/lang/StringBuffer;->substring()Ljava/lang/String;",
        "Ljava/lang/StringBuffer;->charAt()C",
        "Ljava/lang/StringBuffer;->insert()Ljava/lang/StringBuffer;",
        "Ljava/lang/StringBuffer;->deleteCharAt()Ljava/lang/StringBuffer;",
        "Ljava/lang/StringBuffer;->toString()Ljava/lang/String;",
        "Ljava/lang/StringBuffer;->setCharAt()V",
        "Ljava/lang/StringBuffer;->append()Ljava/lang/StringBuffer;",
        "Ljava/lang/StringBuffer;->setLength()V",
        "Ljava/lang/StringBuffer;->length()I",
        "Ljava/lang/StringBuffer;->delete()Ljava/lang/StringBuffer;"
    ],
    "Lnet/youmi/android/v;": [
        "Lnet/youmi/android/v;->startAnimation()V",
        "Lnet/youmi/android/v;->a()V",
        "Lnet/youmi/android/v;->setVisibility()V",
        "Lnet/youmi/android/v;->a()Z",
        "Lnet/youmi/android/v;->addView()V"
    ],
    "Landroid/content/DialogInterface;": [
        "Landroid/content/DialogInterface;->cancel()V"
    ],
    "Ljava/util/Vector;": [
        "Ljava/util/Vector;->add()Z",
        "Ljava/util/Vector;->contains()Z",
        "Ljava/util/Vector;->size()I",
        "Ljava/util/Vector;->removeElementAt()V",
        "Ljava/util/Vector;->setSize()V",
        "Ljava/util/Vector;->addElement()V",
        "Ljava/util/Vector;->elementAt()Ljava/lang/Object;",
        "Ljava/util/Vector;->lastElement()Ljava/lang/Object;",
        "Ljava/util/Vector;->remove()Z",
        "Ljava/util/Vector;->addAll()Z",
        "Ljava/util/Vector;->isEmpty()Z",
        "Ljava/util/Vector;->setElementAt()V",
        "Ljava/util/Vector;->elements()Ljava/util/Enumeration;"
    ],
    "Lnet/youmi/android/hv;": [
        "Lnet/youmi/android/hv;->a()V",
        "Lnet/youmi/android/hv;->a()Landroid/content/pm/PackageInfo;",
        "Lnet/youmi/android/hv;->a()Z"
    ],
    "Lnet/youmi/android/ha;": [
        "Lnet/youmi/android/ha;->a()Ljava/lang/String;",
        "Lnet/youmi/android/ha;->a()V"
    ],
    "Lnet/youmi/android/gh;": [
        "Lnet/youmi/android/gh;->a()V",
        "Lnet/youmi/android/gh;->a()Lnet/youmi/android/gh;",
        "Lnet/youmi/android/gh;->a()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/bp;": [
        "Lnet/youmi/android/bp;->a()I",
        "Lnet/youmi/android/bp;->a()Landroid/content/pm/PackageInfo;",
        "Lnet/youmi/android/bp;->a()Z"
    ],
    "Lnet/youmi/android/aa;": [
        "Lnet/youmi/android/aa;->setBackgroundDrawable()V",
        "Lnet/youmi/android/aa;->addView()V",
        "Lnet/youmi/android/aa;->getId()I",
        "Lnet/youmi/android/aa;->setId()V"
    ],
    "Lnet/youmi/android/z;": [
        "Lnet/youmi/android/z;->addView()V",
        "Lnet/youmi/android/z;->a()V"
    ],
    "Ljava/util/regex/Pattern;": [
        "Ljava/util/regex/Pattern;->compile()Ljava/util/regex/Pattern;",
        "Ljava/util/regex/Pattern;->split()[Ljava/lang/String;",
        "Ljava/util/regex/Pattern;->matcher()Ljava/util/regex/Matcher;"
    ],
    "Ljava/util/regex/Matcher;": [
        "Ljava/util/regex/Matcher;->matches()Z",
        "Ljava/util/regex/Matcher;->find()Z",
        "Ljava/util/regex/Matcher;->groupCount()I",
        "Ljava/util/regex/Matcher;->end()I",
        "Ljava/util/regex/Matcher;->group()Ljava/lang/String;"
    ],
    "Landroid/graphics/RectF;": [
        "Landroid/graphics/RectF;->contains()Z",
        "Landroid/graphics/RectF;->inset()V",
        "Landroid/graphics/RectF;->set()V"
    ],
    "Landroid/graphics/Rect;": [
        "Landroid/graphics/Rect;->centerY()I",
        "Landroid/graphics/Rect;->height()I",
        "Landroid/graphics/Rect;->centerX()I",
        "Landroid/graphics/Rect;->contains()Z",
        "Landroid/graphics/Rect;->set()V",
        "Landroid/graphics/Rect;->width()I"
    ],
    "Lnet/youmi/android/ds;": [
        "Lnet/youmi/android/ds;->a()F"
    ],
    "Lnet/youmi/android/cn;": [
        "Lnet/youmi/android/cn;->a()Lnet/youmi/android/fy;",
        "Lnet/youmi/android/cn;->a()Ljava/lang/String;",
        "Lnet/youmi/android/cn;->a()V",
        "Lnet/youmi/android/cn;->execute()Landroid/os/AsyncTask;",
        "Lnet/youmi/android/cn;->a()Z"
    ],
    "Landroid/view/GestureDetector;": [
        "Landroid/view/GestureDetector;->setIsLongpressEnabled()V",
        "Landroid/view/GestureDetector;->onTouchEvent()Z"
    ],
    "Lorg/json/JSONArray;": [
        "Lorg/json/JSONArray;->getJSONObject()Lorg/json/JSONObject;",
        "Lorg/json/JSONArray;->toString()Ljava/lang/String;",
        "Lorg/json/JSONArray;->opt()Ljava/lang/Object;",
        "Lorg/json/JSONArray;->getString()Ljava/lang/String;",
        "Lorg/json/JSONArray;->length()I",
        "Lorg/json/JSONArray;->put()Lorg/json/JSONArray;"
    ],
    "Landroid/os/Environment;": [
        "Landroid/os/Environment;->getDataDirectory()Ljava/io/File;",
        "Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;",
        "Landroid/os/Environment;->getExternalStorageState()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/bs;": [
        "Lnet/youmi/android/bs;->a()Ljava/lang/String;",
        "Lnet/youmi/android/bs;->a()C",
        "Lnet/youmi/android/bs;->a()Ljava/lang/StringBuilder;",
        "Lnet/youmi/android/bs;->a()[Ljava/lang/String;"
    ],
    "Landroid/webkit/WebChromeClient;": [
        "Landroid/webkit/WebChromeClient;->onProgressChanged()V",
        "Landroid/webkit/WebChromeClient;->onReceivedTitle()V",
        "Landroid/webkit/WebChromeClient;->onGeolocationPermissionsShowPrompt()V"
    ],
    "Lnet/youmi/android/fp;": [
        "Lnet/youmi/android/fp;->a()Lnet/youmi/android/fp;",
        "Lnet/youmi/android/fp;->isCancelled()Z",
        "Lnet/youmi/android/fp;->publishProgress()V",
        "Lnet/youmi/android/fp;->a()V",
        "Lnet/youmi/android/fp;->a()Ljava/lang/Boolean;",
        "Lnet/youmi/android/fp;->execute()Landroid/os/AsyncTask;",
        "Lnet/youmi/android/fp;->cancel()Z"
    ],
    "Landroid/util/AttributeSet;": [
        "Landroid/util/AttributeSet;->getAttributeUnsignedIntValue()I"
    ],
    "Landroid/widget/RelativeLayout;": [
        "Landroid/widget/RelativeLayout;->onLayout()V",
        "Landroid/widget/RelativeLayout;->onDetachedFromWindow()V",
        "Landroid/widget/RelativeLayout;->setOnClickListener()V",
        "Landroid/widget/RelativeLayout;->addViewInLayout()Z",
        "Landroid/widget/RelativeLayout;->onMeasure()V",
        "Landroid/widget/RelativeLayout;->setVisibility()V",
        "Landroid/widget/RelativeLayout;->onWindowFocusChanged()V",
        "Landroid/widget/RelativeLayout;->onAttachedToWindow()V",
        "Landroid/widget/RelativeLayout;->addView()V"
    ],
    "Lnet/youmi/android/AdViewListener;": [
        "Lnet/youmi/android/AdViewListener;->onAdViewSwitchedAd()V",
        "Lnet/youmi/android/AdViewListener;->onConnectFailed()V"
    ],
    "Landroid/webkit/WebStorage$QuotaUpdater;": [
        "Landroid/webkit/WebStorage$QuotaUpdater;->updateQuota()V"
    ],
    "Landroid/webkit/GeolocationPermissions$Callback;": [
        "Landroid/webkit/GeolocationPermissions$Callback;->invoke()V"
    ],
    "Lnet/youmi/android/fd;": [
        "Lnet/youmi/android/fd;->a()V"
    ],
    "Ljava/io/ByteArrayInputStream;": [
        "Ljava/io/ByteArrayInputStream;->close()V"
    ],
    "Lnet/youmi/android/u;": [
        "Lnet/youmi/android/u;->a()V"
    ],
    "Lnet/youmi/android/s;": [
        "Lnet/youmi/android/s;->a()Z",
        "Lnet/youmi/android/s;->setVisibility()V",
        "Lnet/youmi/android/s;->addView()V",
        "Lnet/youmi/android/s;->a()Ljava/lang/Object;"
    ],
    "Ljava/io/FileInputStream;": [
        "Ljava/io/FileInputStream;->skip()J",
        "Ljava/io/FileInputStream;->available()I",
        "Ljava/io/FileInputStream;->read()I",
        "Ljava/io/FileInputStream;->close()V"
    ],
    "Lnet/youmi/android/d;": [
        "Lnet/youmi/android/d;->a()Landroid/view/View;",
        "Lnet/youmi/android/d;->a()V"
    ],
    "Lnet/youmi/android/e;": [
        "Lnet/youmi/android/e;->a()V",
        "Lnet/youmi/android/e;->a()Lnet/youmi/android/AdActivity;",
        "Lnet/youmi/android/e;->a()Lnet/youmi/android/by;",
        "Lnet/youmi/android/e;->addView()V"
    ],
    "Landroid/view/Window;": [
        "Landroid/view/Window;->setFlags()V",
        "Landroid/view/Window;->addFlags()V"
    ],
    "Lnet/youmi/android/eu;": [
        "Lnet/youmi/android/eu;->a()Z",
        "Lnet/youmi/android/eu;->a()Landroid/content/Context;"
    ],
    "Lnet/youmi/android/fi;": [
        "Lnet/youmi/android/fi;->a()Lorg/json/JSONObject;"
    ],
    "Lnet/youmi/android/cu;": [
        "Lnet/youmi/android/cu;->a()V"
    ],
    "Landroid/app/Dialog;": [
        "Landroid/app/Dialog;->show()V",
        "Landroid/app/Dialog;->setContentView()V",
        "Landroid/app/Dialog;->dismiss()V"
    ],
    "Landroid/widget/LinearLayout;": [
        "Landroid/widget/LinearLayout;->setOrientation()V",
        "Landroid/widget/LinearLayout;->setPadding()V",
        "Landroid/widget/LinearLayout;->onWindowFocusChanged()V",
        "Landroid/widget/LinearLayout;->onDraw()V",
        "Landroid/widget/LinearLayout;->addView()V",
        "Landroid/widget/LinearLayout;->setLayoutParams()V",
        "Landroid/widget/LinearLayout;->onLayout()V",
        "Landroid/widget/LinearLayout;->setBackgroundResource()V",
        "Landroid/widget/LinearLayout;->onMeasure()V",
        "Landroid/widget/LinearLayout;->setGravity()V",
        "Landroid/widget/LinearLayout;->onDetachedFromWindow()V"
    ],
    "Lnet/youmi/android/ih;": [
        "Lnet/youmi/android/ih;->a()V"
    ],
    "Landroid/widget/ImageButton;": [
        "Landroid/widget/ImageButton;->setBackgroundDrawable()V",
        "Landroid/widget/ImageButton;->setOnClickListener()V"
    ],
    "Lnet/youmi/android/ij;": [
        "Lnet/youmi/android/ij;->setWillNotDraw()V",
        "Lnet/youmi/android/ij;->addView()V",
        "Lnet/youmi/android/ij;->setPadding()V"
    ],
    "Landroid/widget/ProgressBar;": [
        "Landroid/widget/ProgressBar;->setVisibility()V"
    ],
    "Landroid/content/Intent$ShortcutIconResource;": [
        "Landroid/content/Intent$ShortcutIconResource;->fromContext()Landroid/content/Intent$ShortcutIconResource;"
    ],
    "Landroid/graphics/drawable/BitmapDrawable;": [
        "Landroid/graphics/drawable/BitmapDrawable;->getBitmap()Landroid/graphics/Bitmap;"
    ],
    "Ljava/lang/Throwable;": [
        "Ljava/lang/Throwable;->toString()Ljava/lang/String;",
        "Ljava/lang/Throwable;->getStackTrace()[Ljava/lang/StackTraceElement;",
        "Ljava/lang/Throwable;->getCause()Ljava/lang/Throwable;",
        "Ljava/lang/Throwable;->printStackTrace()V"
    ],
    "Lnet/youmi/android/gn;": [
        "Lnet/youmi/android/gn;->a()Ljava/lang/String;",
        "Lnet/youmi/android/gn;->a()Lnet/youmi/android/gv;"
    ],
    "Landroid/view/animation/AnimationUtils;": [
        "Landroid/view/animation/AnimationUtils;->loadAnimation()Landroid/view/animation/Animation;"
    ],
    "Landroid/view/MotionEvent;": [
        "Landroid/view/MotionEvent;->getX()F",
        "Landroid/view/MotionEvent;->getAction()I",
        "Landroid/view/MotionEvent;->getRawY()F",
        "Landroid/view/MotionEvent;->getY()F"
    ],
    "Lnet/youmi/android/fq;": [
        "Lnet/youmi/android/fq;->a()Lnet/youmi/android/dm;",
        "Lnet/youmi/android/fq;->a()Z",
        "Lnet/youmi/android/fq;->a()V"
    ],
    "Lnet/youmi/android/gj;": [
        "Lnet/youmi/android/gj;->a()I",
        "Lnet/youmi/android/gj;->a()Z"
    ],
    "Landroid/webkit/WebViewClient;": [
        "Landroid/webkit/WebViewClient;->onPageStarted()V",
        "Landroid/webkit/WebViewClient;->onPageFinished()V",
        "Landroid/webkit/WebViewClient;->onReceivedError()V",
        "Landroid/webkit/WebViewClient;->shouldOverrideUrlLoading()Z"
    ],
    "Lnet/youmi/android/fe;": [
        "Lnet/youmi/android/fe;->a()V"
    ],
    "Ljavax/crypto/SecretKeyFactory;": [
        "Ljavax/crypto/SecretKeyFactory;->getInstance()Ljavax/crypto/SecretKeyFactory;",
        "Ljavax/crypto/SecretKeyFactory;->generateSecret()Ljavax/crypto/SecretKey;"
    ],
    "Ljava/util/Random;": [
        "Ljava/util/Random;->nextBytes()V",
        "Ljava/util/Random;->nextInt()I",
        "Ljava/util/Random;->nextLong()J"
    ],
    "Ljavax/crypto/Cipher;": [
        "Ljavax/crypto/Cipher;->getInstance()Ljavax/crypto/Cipher;",
        "Ljavax/crypto/Cipher;->doFinal()[B"
    ],
    "Lnet/youmi/android/hj;": [
        "Lnet/youmi/android/hj;->a()I",
        "Lnet/youmi/android/hj;->a()V",
        "Lnet/youmi/android/hj;->a()Landroid/webkit/WebChromeClient;",
        "Lnet/youmi/android/hj;->a()Landroid/webkit/WebViewClient;"
    ],
    "Landroid/util/Log;": [
        "Landroid/util/Log;->a()I"
    ],
    "Lnet/youmi/android/cm;": [
        "Lnet/youmi/android/cm;->a()Ljava/lang/Object;"
    ],
    "Lnet/youmi/android/ak;": [
        "Lnet/youmi/android/ak;->a()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/fh;": [
        "Lnet/youmi/android/fh;->a()Lorg/json/JSONObject;"
    ],
    "Lnet/youmi/android/fc;": [
        "Lnet/youmi/android/fc;->a()I",
        "Lnet/youmi/android/fc;->a()Ljava/io/FileOutputStream;",
        "Lnet/youmi/android/fc;->a()Ljava/io/File;"
    ],
    "Landroid/view/animation/AnimationSet;": [
        "Landroid/view/animation/AnimationSet;->addAnimation()V"
    ],
    "Ljava/util/Stack;": [
        "Ljava/util/Stack;->clear()V",
        "Ljava/util/Stack;->pop()Ljava/lang/Object;",
        "Ljava/util/Stack;->size()I",
        "Ljava/util/Stack;->push()Ljava/lang/Object;"
    ],
    "Lnet/youmi/android/cd;": [
        "Lnet/youmi/android/cd;->a()V"
    ],
    "Lnet/youmi/android/dz;": [
        "Lnet/youmi/android/dz;->a()V"
    ],
    "Lnet/youmi/android/ht;": [
        "Lnet/youmi/android/ht;->a()Z"
    ],
    "Lnet/youmi/android/gl;": [
        "Lnet/youmi/android/gl;->a()Lnet/youmi/android/gl;",
        "Lnet/youmi/android/gl;->a()Ljava/io/File;"
    ],
    "Lnet/youmi/android/gr;": [
        "Lnet/youmi/android/gr;->a()Lnet/youmi/android/gr;"
    ],
    "Lnet/youmi/android/hu;": [
        "Lnet/youmi/android/hu;->a()Z"
    ],
    "Lnet/youmi/android/bq;": [
        "Lnet/youmi/android/bq;->a()Ljava/util/Properties;",
        "Lnet/youmi/android/bq;->a()Z",
        "Lnet/youmi/android/bq;->a()I",
        "Lnet/youmi/android/bq;->a()Ljava/lang/String;"
    ],
    "Ljava/util/Properties;": [
        "Ljava/util/Properties;->load()V",
        "Ljava/util/Properties;->get()Ljava/lang/Object;",
        "Ljava/util/Properties;->setProperty()Ljava/lang/Object;",
        "Ljava/util/Properties;->getProperty()Ljava/lang/String;",
        "Ljava/util/Properties;->containsKey()Z",
        "Ljava/util/Properties;->store()V",
        "Ljava/util/Properties;->put()Ljava/lang/Object;"
    ],
    "Ljava/io/ObjectOutputStream;": [
        "Ljava/io/ObjectOutputStream;->writeBoolean()V",
        "Ljava/io/ObjectOutputStream;->writeUTF()V",
        "Ljava/io/ObjectOutputStream;->defaultWriteObject()V",
        "Ljava/io/ObjectOutputStream;->writeObject()V",
        "Ljava/io/ObjectOutputStream;->close()V",
        "Ljava/io/ObjectOutputStream;->writeInt()V",
        "Ljava/io/ObjectOutputStream;->writeFloat()V"
    ],
    "Ljava/io/ObjectInputStream;": [
        "Ljava/io/ObjectInputStream;->readBoolean()Z",
        "Ljava/io/ObjectInputStream;->readInt()I",
        "Ljava/io/ObjectInputStream;->readObject()Ljava/lang/Object;",
        "Ljava/io/ObjectInputStream;->readUTF()Ljava/lang/String;",
        "Ljava/io/ObjectInputStream;->defaultReadObject()V",
        "Ljava/io/ObjectInputStream;->close()V",
        "Ljava/io/ObjectInputStream;->readFloat()F"
    ],
    "Lnet/youmi/android/fa;": [
        "Lnet/youmi/android/fa;->a()V"
    ],
    "Lnet/youmi/android/fk;": [
        "Lnet/youmi/android/fk;->a()Ljava/lang/String;",
        "Lnet/youmi/android/fk;->a()Lorg/json/JSONObject;"
    ],
    "Lnet/youmi/android/cw;": [
        "Lnet/youmi/android/cw;->a()V",
        "Lnet/youmi/android/cw;->a()I",
        "Lnet/youmi/android/cw;->a()Lorg/apache/http/params/HttpParams;",
        "Lnet/youmi/android/cw;->a()Ljava/lang/String;"
    ],
    "Lnet/youmi/android/df;": [
        "Lnet/youmi/android/df;->a()V"
    ],
    "Ljava/net/URLEncoder;": [
        "Ljava/net/URLEncoder;->encode()Ljava/lang/String;"
    ],
    "Ljava/security/MessageDigest;": [
        "Ljava/security/MessageDigest;->digest()[B",
        "Ljava/security/MessageDigest;->getInstance()Ljava/security/MessageDigest;",
        "Ljava/security/MessageDigest;->update()V",
        "Ljava/security/MessageDigest;->reset()V"
    ],
    "Landroid/os/StatFs;": [
        "Landroid/os/StatFs;->getBlockSize()I",
        "Landroid/os/StatFs;->getAvailableBlocks()I"
    ],
    "Landroid/widget/TableRow;": [
        "Landroid/widget/TableRow;->addView()V"
    ],
    "Lnet/youmi/android/cg;": [
        "Lnet/youmi/android/cg;->a()V",
        "Lnet/youmi/android/cg;->a()Z",
        "Lnet/youmi/android/cg;->a()I"
    ],
    "Lnet/youmi/android/gu;": [
        "Lnet/youmi/android/gu;->a()V",
        "Lnet/youmi/android/gu;->a()Z",
        "Lnet/youmi/android/gu;->a()Lorg/apache/http/impl/client/DefaultHttpClient;"
    ],
    "Lnet/youmi/android/bk;": [
        "Lnet/youmi/android/bk;->a()Z"
    ],
    "Lnet/youmi/android/fg;": [
        "Lnet/youmi/android/fg;->a()Lorg/json/JSONObject;"
    ],
    "Lnet/youmi/android/em;": [
        "Lnet/youmi/android/em;->a()Ljava/lang/String;",
        "Lnet/youmi/android/em;->a()V",
        "Lnet/youmi/android/em;->a()I",
        "Lnet/youmi/android/em;->a()Lorg/apache/http/impl/client/DefaultHttpClient;"
    ],
    "Landroid/os/Bundle;": [
        "Landroid/os/Bundle;->getStringArray()[Ljava/lang/String;",
        "Landroid/os/Bundle;->remove()V",
        "Landroid/os/Bundle;->getString()Ljava/lang/String;",
        "Landroid/os/Bundle;->get()Ljava/lang/Object;",
        "Landroid/os/Bundle;->clear()V",
        "Landroid/os/Bundle;->getParcelableArray()[Landroid/os/Parcelable;",
        "Landroid/os/Bundle;->putBoolean()V",
        "Landroid/os/Bundle;->getParcelable()Landroid/os/Parcelable;",
        "Landroid/os/Bundle;->putParcelable()V",
        "Landroid/os/Bundle;->putInt()V",
        "Landroid/os/Bundle;->containsKey()Z",
        "Landroid/os/Bundle;->getIntArray()[I",
        "Landroid/os/Bundle;->putString()V",
        "Landroid/os/Bundle;->getInt()I",
        "Landroid/os/Bundle;->getFloat()F",
        "Landroid/os/Bundle;->putByteArray()V",
        "Landroid/os/Bundle;->getBoolean()Z"
    ],
    "Ljava/lang/Double;": [
        "Ljava/lang/Double;->valueOf()Ljava/lang/Double;",
        "Ljava/lang/Double;->parseDouble()D",
        "Ljava/lang/Double;->toString()Ljava/lang/String;"
    ],
    "Landroid/widget/ExpandableListView;": [
        "Landroid/widget/ExpandableListView;->setAdapter()V"
    ],
    "Lnet/youmi/android/gf;": [
        "Lnet/youmi/android/gf;->a()Ljava/lang/String;",
        "Lnet/youmi/android/gf;->a()I"
    ],
    "Lnet/youmi/android/eb;": [
        "Lnet/youmi/android/eb;->a()V"
    ],
    "Ljava/util/Date;": [
        "Ljava/util/Date;->toString()Ljava/lang/String;",
        "Ljava/util/Date;->after()Z",
        "Ljava/util/Date;->compareTo()I",
        "Ljava/util/Date;->getTime()J"
    ],
    "Lnet/youmi/android/fs;": [
        "Lnet/youmi/android/fs;->a()V"
    ],
    "Ljava/lang/Runtime;": [
        "Ljava/lang/Runtime;->getRuntime()Ljava/lang/Runtime;",
        "Ljava/lang/Runtime;->exec()Ljava/lang/Process;"
    ],
    "Ljava/lang/Character;": [
        "Ljava/lang/Character;->toUpperCase()C",
        "Ljava/lang/Character;->toLowerCase()C",
        "Ljava/lang/Character;->isDigit()Z",
        "Ljava/lang/Character;->isWhitespace()Z",
        "Ljava/lang/Character;->digit()I",
        "Ljava/lang/Character;->getNumericValue()I"
    ],
    "Landroid/provider/Settings$Secure;": [
        "Landroid/provider/Settings$Secure;->getString()Ljava/lang/String;"
    ],
    "Landroid/net/wifi/WifiManager;": [
        "Landroid/net/wifi/WifiManager;->startScan()Z",
        "Landroid/net/wifi/WifiManager;->getWifiState()I",
        "Landroid/net/wifi/WifiManager;->isWifiEnabled()Z",
        "Landroid/net/wifi/WifiManager;->getConnectionInfo()Landroid/net/wifi/WifiInfo;",
        "Landroid/net/wifi/WifiManager;->getScanResults()Ljava/util/List;"
    ],
    "Landroid/net/wifi/WifiInfo;": [
        "Landroid/net/wifi/WifiInfo;->getMacAddress()Ljava/lang/String;",
        "Landroid/net/wifi/WifiInfo;->getSSID()Ljava/lang/String;",
        "Landroid/net/wifi/WifiInfo;->getRssi()I"
    ],
    "Landroid/database/sqlite/SQLiteDatabase;": [
        "Landroid/database/sqlite/SQLiteDatabase;->query()Landroid/database/Cursor;",
        "Landroid/database/sqlite/SQLiteDatabase;->close()V",
        "Landroid/database/sqlite/SQLiteDatabase;->rawQuery()Landroid/database/Cursor;",
        "Landroid/database/sqlite/SQLiteDatabase;->delete()I",
        "Landroid/database/sqlite/SQLiteDatabase;->insert()J",
        "Landroid/database/sqlite/SQLiteDatabase;->openDatabase()Landroid/database/sqlite/SQLiteDatabase;",
        "Landroid/database/sqlite/SQLiteDatabase;->execSQL()V"
    ],
    "Landroid/database/Cursor;": [
        "Landroid/database/Cursor;->getColumnIndex()I",
        "Landroid/database/Cursor;->getColumnIndexOrThrow()I",
        "Landroid/database/Cursor;->getString()Ljava/lang/String;",
        "Landroid/database/Cursor;->close()V",
        "Landroid/database/Cursor;->moveToNext()Z",
        "Landroid/database/Cursor;->isAfterLast()Z",
        "Landroid/database/Cursor;->moveToFirst()Z",
        "Landroid/database/Cursor;->getCount()I",
        "Landroid/database/Cursor;->getLong()J"
    ],
    "Lnet/youmi/android/db;": [
        "Lnet/youmi/android/db;->a()Z"
    ],
    "Lnet/youmi/android/da;": [
        "Lnet/youmi/android/da;->a()Z"
    ],
    "Lnet/youmi/android/ek;": [
        "Lnet/youmi/android/ek;->a()Landroid/graphics/Bitmap;",
        "Lnet/youmi/android/ek;->a()I"
    ],
    "Lnet/youmi/android/el;": [
        "Lnet/youmi/android/el;->a()Lnet/youmi/android/ee;",
        "Lnet/youmi/android/el;->a()I"
    ],
    "Lorg/jivesoftware/smack/Roster;": [
        "Lorg/jivesoftware/smack/Roster;->createGroup()Lorg/jivesoftware/smack/RosterGroup;",
        "Lorg/jivesoftware/smack/Roster;->getDefaultSubscriptionMode()Lorg/jivesoftware/smack/Roster$SubscriptionMode;",
        "Lorg/jivesoftware/smack/Roster;->setOfflinePresences()V",
        "Lorg/jivesoftware/smack/Roster;->getEntry()Lorg/jivesoftware/smack/RosterEntry;",
        "Lorg/jivesoftware/smack/Roster;->contains()Z",
        "Lorg/jivesoftware/smack/Roster;->fireRosterPresenceEvent()V",
        "Lorg/jivesoftware/smack/Roster;->insertRosterItem()V",
        "Lorg/jivesoftware/smack/Roster;->reload()V",
        "Lorg/jivesoftware/smack/Roster;->getPresenceMapKey()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/Roster;->fireRosterChangedEvent()V",
        "Lorg/jivesoftware/smack/Roster;->cleanup()V",
        "Lorg/jivesoftware/smack/Roster;->createEntry()V",
        "Lorg/jivesoftware/smack/Roster;->removeEntry()V",
        "Lorg/jivesoftware/smack/Roster;->getPresence()Lorg/jivesoftware/smack/packet/Presence;",
        "Lorg/jivesoftware/smack/Roster;->getGroup()Lorg/jivesoftware/smack/RosterGroup;",
        "Lorg/jivesoftware/smack/Roster;->getGroups()Ljava/util/Collection;",
        "Lorg/jivesoftware/smack/Roster;->getEntries()Ljava/util/Collection;"
    ],
    "Lorg/jivesoftware/smack/Connection;": [
        "Lorg/jivesoftware/smack/Connection;->removePacketListener()V",
        "Lorg/jivesoftware/smack/Connection;->isConnected()Z",
        "Lorg/jivesoftware/smack/Connection;->addConnectionCreationListener()V",
        "Lorg/jivesoftware/smack/Connection;->removePacketCollector()V",
        "Lorg/jivesoftware/smack/Connection;->getUser()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/Connection;->isAnonymous()Z",
        "Lorg/jivesoftware/smack/Connection;->getHost()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/Connection;->getServiceName()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/Connection;->getRoster()Lorg/jivesoftware/smack/Roster;",
        "Lorg/jivesoftware/smack/Connection;->getPort()I",
        "Lorg/jivesoftware/smack/Connection;->addConnectionListener()V",
        "Lorg/jivesoftware/smack/Connection;->getChatManager()Lorg/jivesoftware/smack/ChatManager;",
        "Lorg/jivesoftware/smack/Connection;->isReconnectionAllowed()Z",
        "Lorg/jivesoftware/smack/Connection;->getCapsNode()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/Connection;->isAuthenticated()Z",
        "Lorg/jivesoftware/smack/Connection;->getAccountManager()Lorg/jivesoftware/smack/AccountManager;",
        "Lorg/jivesoftware/smack/Connection;->login()V",
        "Lorg/jivesoftware/smack/Connection;->disconnect()V",
        "Lorg/jivesoftware/smack/Connection;->getConfiguration()Lorg/jivesoftware/smack/ConnectionConfiguration;",
        "Lorg/jivesoftware/smack/Connection;->addPacketInterceptor()V",
        "Lorg/jivesoftware/smack/Connection;->createPacketCollector()Lorg/jivesoftware/smack/PacketCollector;",
        "Lorg/jivesoftware/smack/Connection;->sendPacket()V",
        "Lorg/jivesoftware/smack/Connection;->connect()V",
        "Lorg/jivesoftware/smack/Connection;->addPacketSendingListener()V",
        "Lorg/jivesoftware/smack/Connection;->removeConnectionListener()V",
        "Lorg/jivesoftware/smack/Connection;->getConnectionID()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/Connection;->addPacketListener()V"
    ],
    "Lorg/jivesoftware/smack/ConnectionConfiguration;": [
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->setCompressionEnabled()V",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->getCapsNode()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->setSASLAuthenticationEnabled()V",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->getTruststoreType()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->isExpiredCertificatesCheckEnabled()Z",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->isSASLAuthenticationEnabled()Z",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->getHost()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->getCustomSSLContext()Ljavax/net/ssl/SSLContext;",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->isVerifyChainEnabled()Z",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->getCallbackHandler()Lorg/apache/harmony/javax/security/auth/callback/CallbackHandler;",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->getTruststorePath()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->setVerifyRootCAEnabled()V",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->setRosterVersioningAvailable()V",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->setCallbackHandler()V",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->getPKCS11Library()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->getPort()I",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->setServiceName()V",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->isDebuggerEnabled()Z",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->setLoginInfo()V",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->getSecurityMode()Lorg/jivesoftware/smack/ConnectionConfiguration$SecurityMode;",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->isReconnectionAllowed()Z",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->getKeystorePath()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->isCompressionEnabled()Z",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->getResource()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->isRosterLoadedAtLogin()Z",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->isRosterVersioningAvailable()Z",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->getServiceName()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->setCapsNode()V",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->isNotMatchingDomainCheckEnabled()Z",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->isSelfSignedCertificateEnabled()Z",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->getSocketFactory()Ljavax/net/SocketFactory;",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->getTruststorePassword()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->getUsername()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->isVerifyRootCAEnabled()Z",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->setDebuggerEnabled()V",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->getKeystoreType()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->isSendPresence()Z",
        "Lorg/jivesoftware/smack/ConnectionConfiguration;->getPassword()Ljava/lang/String;"
    ],
    "Ljava/util/Collection;": [
        "Ljava/util/Collection;->remove()Z",
        "Ljava/util/Collection;->add()Z",
        "Ljava/util/Collection;->size()I",
        "Ljava/util/Collection;->contains()Z",
        "Ljava/util/Collection;->clear()V",
        "Ljava/util/Collection;->iterator()Ljava/util/Iterator;",
        "Ljava/util/Collection;->isEmpty()Z"
    ],
    "Lorg/jivesoftware/smack/RosterListener;": [
        "Lorg/jivesoftware/smack/RosterListener;->entriesDeleted()V",
        "Lorg/jivesoftware/smack/RosterListener;->presenceChanged()V",
        "Lorg/jivesoftware/smack/RosterListener;->entriesAdded()V",
        "Lorg/jivesoftware/smack/RosterListener;->entriesUpdated()V"
    ],
    "Lorg/jivesoftware/smack/util/StringUtils;": [
        "Lorg/jivesoftware/smack/util/StringUtils;->decodeBase64()[B",
        "Lorg/jivesoftware/smack/util/StringUtils;->encodeHex()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/util/StringUtils;->parseServer()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/util/StringUtils;->parseResource()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/util/StringUtils;->hash()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/util/StringUtils;->encodeBase64()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/util/StringUtils;->escapeForXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/util/StringUtils;->parseName()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/util/StringUtils;->randomString()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/util/StringUtils;->parseBareAddress()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smack/packet/RosterPacket$Item;": [
        "Lorg/jivesoftware/smack/packet/RosterPacket$Item;->getUser()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/RosterPacket$Item;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/RosterPacket$Item;->setItemStatus()V",
        "Lorg/jivesoftware/smack/packet/RosterPacket$Item;->getItemStatus()Lorg/jivesoftware/smack/packet/RosterPacket$ItemStatus;",
        "Lorg/jivesoftware/smack/packet/RosterPacket$Item;->getGroupNames()Ljava/util/Set;",
        "Lorg/jivesoftware/smack/packet/RosterPacket$Item;->getName()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/RosterPacket$Item;->addGroupName()V",
        "Lorg/jivesoftware/smack/packet/RosterPacket$Item;->removeGroupName()V",
        "Lorg/jivesoftware/smack/packet/RosterPacket$Item;->getItemType()Lorg/jivesoftware/smack/packet/RosterPacket$ItemType;",
        "Lorg/jivesoftware/smack/packet/RosterPacket$Item;->setItemType()V"
    ],
    "Lorg/jivesoftware/smack/packet/RosterPacket$ItemType;": [
        "Lorg/jivesoftware/smack/packet/RosterPacket$ItemType;->equals()Z",
        "Lorg/jivesoftware/smack/packet/RosterPacket$ItemType;->valueOf()Lorg/jivesoftware/smack/packet/RosterPacket$ItemType;"
    ],
    "Ljava/util/Map;": [
        "Ljava/util/Map;->keySet()Ljava/util/Set;",
        "Ljava/util/Map;->get()Ljava/lang/Object;",
        "Ljava/util/Map;->clear()V",
        "Ljava/util/Map;->containsValue()Z",
        "Ljava/util/Map;->remove()Ljava/lang/Object;",
        "Ljava/util/Map;->values()Ljava/util/Collection;",
        "Ljava/util/Map;->containsKey()Z",
        "Ljava/util/Map;->isEmpty()Z",
        "Ljava/util/Map;->entrySet()Ljava/util/Set;",
        "Ljava/util/Map;->put()Ljava/lang/Object;",
        "Ljava/util/Map;->size()I"
    ],
    "Lorg/jivesoftware/smack/RosterGroup;": [
        "Lorg/jivesoftware/smack/RosterGroup;->getEntries()Ljava/util/Collection;",
        "Lorg/jivesoftware/smack/RosterGroup;->removeEntryLocal()V",
        "Lorg/jivesoftware/smack/RosterGroup;->getName()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/RosterGroup;->contains()Z",
        "Lorg/jivesoftware/smack/RosterGroup;->getEntryCount()I",
        "Lorg/jivesoftware/smack/RosterGroup;->getEntry()Lorg/jivesoftware/smack/RosterEntry;",
        "Lorg/jivesoftware/smack/RosterGroup;->addEntryLocal()V"
    ],
    "Ljava/util/Set;": [
        "Ljava/util/Set;->containsAll()Z",
        "Ljava/util/Set;->addAll()Z",
        "Ljava/util/Set;->size()I",
        "Ljava/util/Set;->toArray()[Ljava/lang/Object;",
        "Ljava/util/Set;->isEmpty()Z",
        "Ljava/util/Set;->clear()V",
        "Ljava/util/Set;->iterator()Ljava/util/Iterator;",
        "Ljava/util/Set;->add()Z",
        "Ljava/util/Set;->remove()Z",
        "Ljava/util/Set;->contains()Z"
    ],
    "Lorg/jivesoftware/smack/packet/Presence;": [
        "Lorg/jivesoftware/smack/packet/Presence;->setTo()V",
        "Lorg/jivesoftware/smack/packet/Presence;->setPacketID()V",
        "Lorg/jivesoftware/smack/packet/Presence;->getType()Lorg/jivesoftware/smack/packet/Presence$Type;",
        "Lorg/jivesoftware/smack/packet/Presence;->setStatus()V",
        "Lorg/jivesoftware/smack/packet/Presence;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Presence;->setMode()V",
        "Lorg/jivesoftware/smack/packet/Presence;->getXmlns()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Presence;->getMode()Lorg/jivesoftware/smack/packet/Presence$Mode;",
        "Lorg/jivesoftware/smack/packet/Presence;->setPriority()V",
        "Lorg/jivesoftware/smack/packet/Presence;->setProperty()V",
        "Lorg/jivesoftware/smack/packet/Presence;->getPriority()I",
        "Lorg/jivesoftware/smack/packet/Presence;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Presence;->setFrom()V",
        "Lorg/jivesoftware/smack/packet/Presence;->setLanguage()V",
        "Lorg/jivesoftware/smack/packet/Presence;->getExtensionsXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Presence;->setType()V",
        "Lorg/jivesoftware/smack/packet/Presence;->getExtension()Lorg/jivesoftware/smack/packet/PacketExtension;",
        "Lorg/jivesoftware/smack/packet/Presence;->setError()V",
        "Lorg/jivesoftware/smack/packet/Presence;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smack/packet/Presence;->getStatus()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Presence;->getTo()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Presence;->getFrom()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Presence;->getLanguage()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Presence;->addExtension()V",
        "Lorg/jivesoftware/smack/packet/Presence;->isAvailable()Z"
    ],
    "Lorg/jivesoftware/smack/Roster$PresencePacketListener;": [
        "Lorg/jivesoftware/smack/Roster$PresencePacketListener;->processPacket()V"
    ],
    "Lorg/jivesoftware/smack/packet/RosterPacket;": [
        "Lorg/jivesoftware/smack/packet/RosterPacket;->setVersion()V",
        "Lorg/jivesoftware/smack/packet/RosterPacket;->addRosterItem()V",
        "Lorg/jivesoftware/smack/packet/RosterPacket;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/RosterPacket;->setType()V"
    ],
    "Lorg/jivesoftware/smack/SmackConfiguration;": [
        "Lorg/jivesoftware/smack/SmackConfiguration;->getKeepAliveInterval()I",
        "Lorg/jivesoftware/smack/SmackConfiguration;->parseIntProperty()I",
        "Lorg/jivesoftware/smack/SmackConfiguration;->getVersion()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/SmackConfiguration;->getClassLoaders()[Ljava/lang/ClassLoader;",
        "Lorg/jivesoftware/smack/SmackConfiguration;->addSaslMech()V",
        "Lorg/jivesoftware/smack/SmackConfiguration;->removeSaslMech()V",
        "Lorg/jivesoftware/smack/SmackConfiguration;->isLocalSocks5ProxyEnabled()Z",
        "Lorg/jivesoftware/smack/SmackConfiguration;->parseClassToLoad()V",
        "Lorg/jivesoftware/smack/SmackConfiguration;->getPacketReplyTimeout()I",
        "Lorg/jivesoftware/smack/SmackConfiguration;->getLocalSocks5ProxyPort()I"
    ],
    "Lorg/jivesoftware/smack/PacketCollector;": [
        "Lorg/jivesoftware/smack/PacketCollector;->processPacket()V",
        "Lorg/jivesoftware/smack/PacketCollector;->cancel()V",
        "Lorg/jivesoftware/smack/PacketCollector;->nextResult()Lorg/jivesoftware/smack/packet/Packet;"
    ],
    "Lorg/jivesoftware/smack/packet/IQ;": [
        "Lorg/jivesoftware/smack/packet/IQ;->setType()V",
        "Lorg/jivesoftware/smack/packet/IQ;->getFrom()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/IQ;->setPacketID()V",
        "Lorg/jivesoftware/smack/packet/IQ;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/IQ;->getChildElementXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/IQ;->createErrorResponse()Lorg/jivesoftware/smack/packet/IQ;",
        "Lorg/jivesoftware/smack/packet/IQ;->setError()V",
        "Lorg/jivesoftware/smack/packet/IQ;->getType()Lorg/jivesoftware/smack/packet/IQ$Type;",
        "Lorg/jivesoftware/smack/packet/IQ;->createResultIQ()Lorg/jivesoftware/smack/packet/IQ;",
        "Lorg/jivesoftware/smack/packet/IQ;->setFrom()V",
        "Lorg/jivesoftware/smack/packet/IQ;->getTo()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/IQ;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/IQ;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smack/packet/IQ;->setTo()V"
    ],
    "Ljava/util/Collections;": [
        "Ljava/util/Collections;->synchronizedSet()Ljava/util/Set;",
        "Ljava/util/Collections;->emptySet()Ljava/util/Set;",
        "Ljava/util/Collections;->sort()V",
        "Ljava/util/Collections;->unmodifiableMap()Ljava/util/Map;",
        "Ljava/util/Collections;->enumeration()Ljava/util/Enumeration;",
        "Ljava/util/Collections;->unmodifiableList()Ljava/util/List;",
        "Ljava/util/Collections;->singletonList()Ljava/util/List;",
        "Ljava/util/Collections;->unmodifiableSet()Ljava/util/Set;",
        "Ljava/util/Collections;->unmodifiableCollection()Ljava/util/Collection;",
        "Ljava/util/Collections;->emptyList()Ljava/util/List;",
        "Ljava/util/Collections;->synchronizedList()Ljava/util/List;"
    ],
    "Lorg/jivesoftware/smack/packet/Presence$Mode;": [
        "Lorg/jivesoftware/smack/packet/Presence$Mode;->compareTo()I",
        "Lorg/jivesoftware/smack/packet/Presence$Mode;->valueOf()Lorg/jivesoftware/smack/packet/Presence$Mode;"
    ],
    "Ljava/util/Arrays;": [
        "Ljava/util/Arrays;->fill()V",
        "Ljava/util/Arrays;->asList()Ljava/util/List;",
        "Ljava/util/Arrays;->sort()V",
        "Ljava/util/Arrays;->equals()Z"
    ],
    "Lorg/jivesoftware/smack/RosterStorage;": [
        "Lorg/jivesoftware/smack/RosterStorage;->getRosterVersion()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smack/RosterEntry;": [
        "Lorg/jivesoftware/smack/RosterEntry;->getGroups()Ljava/util/Collection;",
        "Lorg/jivesoftware/smack/RosterEntry;->getStatus()Lorg/jivesoftware/smack/packet/RosterPacket$ItemStatus;",
        "Lorg/jivesoftware/smack/RosterEntry;->getName()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/RosterEntry;->getType()Lorg/jivesoftware/smack/packet/RosterPacket$ItemType;",
        "Lorg/jivesoftware/smack/RosterEntry;->toRosterItem()Lorg/jivesoftware/smack/packet/RosterPacket$Item;",
        "Lorg/jivesoftware/smack/RosterEntry;->getUser()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smack/packet/Privacy;": [
        "Lorg/jivesoftware/smack/packet/Privacy;->isDeclineDefaultList()Z",
        "Lorg/jivesoftware/smack/packet/Privacy;->setActiveName()V",
        "Lorg/jivesoftware/smack/packet/Privacy;->getDefaultName()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Privacy;->getExtensionsXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Privacy;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Privacy;->getPrivacyList()Ljava/util/List;",
        "Lorg/jivesoftware/smack/packet/Privacy;->getPrivacyListNames()Ljava/util/Set;",
        "Lorg/jivesoftware/smack/packet/Privacy;->isDeclineActiveList()Z",
        "Lorg/jivesoftware/smack/packet/Privacy;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smack/packet/Privacy;->setType()V",
        "Lorg/jivesoftware/smack/packet/Privacy;->addExtension()V",
        "Lorg/jivesoftware/smack/packet/Privacy;->setDeclineActiveList()V",
        "Lorg/jivesoftware/smack/packet/Privacy;->getActiveName()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Privacy;->setDefaultName()V",
        "Lorg/jivesoftware/smack/packet/Privacy;->setFrom()V",
        "Lorg/jivesoftware/smack/packet/Privacy;->getItemLists()Ljava/util/Map;",
        "Lorg/jivesoftware/smack/packet/Privacy;->setDeclineDefaultList()V",
        "Lorg/jivesoftware/smack/packet/Privacy;->setPrivacyList()Ljava/util/List;"
    ],
    "Lorg/jivesoftware/smack/PrivacyListManager;": [
        "Lorg/jivesoftware/smack/PrivacyListManager;->setRequest()Lorg/jivesoftware/smack/packet/Packet;",
        "Lorg/jivesoftware/smack/PrivacyListManager;->getUser()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/PrivacyListManager;->getPrivacyWithListNames()Lorg/jivesoftware/smack/packet/Privacy;",
        "Lorg/jivesoftware/smack/PrivacyListManager;->getPrivacyListItems()Ljava/util/List;",
        "Lorg/jivesoftware/smack/PrivacyListManager;->updatePrivacyList()V",
        "Lorg/jivesoftware/smack/PrivacyListManager;->getRequest()Lorg/jivesoftware/smack/packet/Privacy;"
    ],
    "Lorg/jivesoftware/smack/packet/Packet;": [
        "Lorg/jivesoftware/smack/packet/Packet;->getFrom()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Packet;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smack/packet/Packet;->getTo()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Packet;->equals()Z",
        "Lorg/jivesoftware/smack/packet/Packet;->getExtensions()Ljava/util/Collection;",
        "Lorg/jivesoftware/smack/packet/Packet;->setTo()V",
        "Lorg/jivesoftware/smack/packet/Packet;->addExtension()V",
        "Lorg/jivesoftware/smack/packet/Packet;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Packet;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Packet;->getPropertyNames()Ljava/util/Collection;",
        "Lorg/jivesoftware/smack/packet/Packet;->getProperty()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/packet/Packet;->nextID()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Packet;->getDefaultLanguage()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Packet;->getExtension()Lorg/jivesoftware/smack/packet/PacketExtension;"
    ],
    "Lorg/jivesoftware/smack/BOSHConnection;": [
        "Lorg/jivesoftware/smack/BOSHConnection;->getConfiguration()Lorg/jivesoftware/smack/ConnectionConfiguration;",
        "Lorg/jivesoftware/smack/BOSHConnection;->isConnected()Z",
        "Lorg/jivesoftware/smack/BOSHConnection;->notifyConnectionError()V",
        "Lorg/jivesoftware/smack/BOSHConnection;->getSASLAuthentication()Lorg/jivesoftware/smack/SASLAuthentication;",
        "Lorg/jivesoftware/smack/BOSHConnection;->shutdown()V",
        "Lorg/jivesoftware/smack/BOSHConnection;->processPacket()V",
        "Lorg/jivesoftware/smack/BOSHConnection;->getPacketCollectors()Ljava/util/Collection;",
        "Lorg/jivesoftware/smack/BOSHConnection;->send()V",
        "Lorg/jivesoftware/smack/BOSHConnection;->getServiceName()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/BOSHConnection;->sendPacket()V",
        "Lorg/jivesoftware/smack/BOSHConnection;->setWasAuthenticated()V",
        "Lorg/jivesoftware/smack/BOSHConnection;->addPacketListener()V",
        "Lorg/jivesoftware/smack/BOSHConnection;->addPacketSendingListener()V",
        "Lorg/jivesoftware/smack/BOSHConnection;->getConnectionListeners()Ljava/util/Collection;",
        "Lorg/jivesoftware/smack/BOSHConnection;->firePacketInterceptors()V",
        "Lorg/jivesoftware/smack/BOSHConnection;->getHost()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/BOSHConnection;->getPort()I",
        "Lorg/jivesoftware/smack/BOSHConnection;->firePacketSendingListeners()V",
        "Lorg/jivesoftware/smack/BOSHConnection;->getAccountManager()Lorg/jivesoftware/smack/AccountManager;"
    ],
    "Lcom/kenai/jbosh/BOSHClient;": [
        "Lcom/kenai/jbosh/BOSHClient;->addBOSHClientRequestListener()V",
        "Lcom/kenai/jbosh/BOSHClient;->blockUntilSendable()V",
        "Lcom/kenai/jbosh/BOSHClient;->applyRoute()V",
        "Lcom/kenai/jbosh/BOSHClient;->send()V",
        "Lcom/kenai/jbosh/BOSHClient;->fireRequestSent()V",
        "Lcom/kenai/jbosh/BOSHClient;->fireConnectionClosed()V",
        "Lcom/kenai/jbosh/BOSHClient;->getDefaultEmptyRequestDelay()J",
        "Lcom/kenai/jbosh/BOSHClient;->applyFrom()V",
        "Lcom/kenai/jbosh/BOSHClient;->close()V",
        "Lcom/kenai/jbosh/BOSHClient;->sendEmptyRequest()V",
        "Lcom/kenai/jbosh/BOSHClient;->applySessionData()Lcom/kenai/jbosh/ComposableBody;",
        "Lcom/kenai/jbosh/BOSHClient;->isRecoverableBindingCondition()Z",
        "Lcom/kenai/jbosh/BOSHClient;->processExchange()V",
        "Lcom/kenai/jbosh/BOSHClient;->assertLocked()V",
        "Lcom/kenai/jbosh/BOSHClient;->isPause()Z",
        "Lcom/kenai/jbosh/BOSHClient;->processRequestAcknowledgements()V",
        "Lcom/kenai/jbosh/BOSHClient;->processPauseRequest()J",
        "Lcom/kenai/jbosh/BOSHClient;->addBOSHClientResponseListener()V",
        "Lcom/kenai/jbosh/BOSHClient;->checkForTerminalBindingConditions()V",
        "Lcom/kenai/jbosh/BOSHClient;->applyResponseAcknowledgement()V",
        "Lcom/kenai/jbosh/BOSHClient;->processResponseAcknowledgementReport()Lcom/kenai/jbosh/HTTPExchange;",
        "Lcom/kenai/jbosh/BOSHClient;->assertUnlocked()V",
        "Lcom/kenai/jbosh/BOSHClient;->addBOSHClientConnListener()V",
        "Lcom/kenai/jbosh/BOSHClient;->fireResponseReceived()V",
        "Lcom/kenai/jbosh/BOSHClient;->scheduleEmptyRequest()V",
        "Lcom/kenai/jbosh/BOSHClient;->create()Lcom/kenai/jbosh/BOSHClient;",
        "Lcom/kenai/jbosh/BOSHClient;->isTermination()Z",
        "Lcom/kenai/jbosh/BOSHClient;->applySessionCreationRequest()Lcom/kenai/jbosh/ComposableBody;",
        "Lcom/kenai/jbosh/BOSHClient;->processMessages()V",
        "Lcom/kenai/jbosh/BOSHClient;->dispose()V",
        "Lcom/kenai/jbosh/BOSHClient;->clearEmptyRequest()V",
        "Lcom/kenai/jbosh/BOSHClient;->fireConnectionEstablished()V",
        "Lcom/kenai/jbosh/BOSHClient;->processResponseAcknowledgementData()V",
        "Lcom/kenai/jbosh/BOSHClient;->isImmediatelySendable()Z",
        "Lcom/kenai/jbosh/BOSHClient;->fireConnectionClosedOnError()V",
        "Lcom/kenai/jbosh/BOSHClient;->getTerminalBindingCondition()Lcom/kenai/jbosh/TerminalBindingCondition;",
        "Lcom/kenai/jbosh/BOSHClient;->nextExchange()Lcom/kenai/jbosh/HTTPExchange;",
        "Lcom/kenai/jbosh/BOSHClient;->isWorking()Z",
        "Lcom/kenai/jbosh/BOSHClient;->disconnect()V"
    ],
    "Lorg/jivesoftware/smack/BOSHConfiguration;": [
        "Lorg/jivesoftware/smack/BOSHConfiguration;->getProxyAddress()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/BOSHConfiguration;->setSASLAuthenticationEnabled()V",
        "Lorg/jivesoftware/smack/BOSHConfiguration;->isRosterLoadedAtLogin()Z",
        "Lorg/jivesoftware/smack/BOSHConfiguration;->getHost()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/BOSHConfiguration;->isDebuggerEnabled()Z",
        "Lorg/jivesoftware/smack/BOSHConfiguration;->setServiceName()V",
        "Lorg/jivesoftware/smack/BOSHConfiguration;->getURI()Ljava/net/URI;",
        "Lorg/jivesoftware/smack/BOSHConfiguration;->getCallbackHandler()Lorg/apache/harmony/javax/security/auth/callback/CallbackHandler;",
        "Lorg/jivesoftware/smack/BOSHConfiguration;->isSASLAuthenticationEnabled()Z",
        "Lorg/jivesoftware/smack/BOSHConfiguration;->isProxyEnabled()Z",
        "Lorg/jivesoftware/smack/BOSHConfiguration;->getServiceName()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/BOSHConfiguration;->isSendPresence()Z",
        "Lorg/jivesoftware/smack/BOSHConfiguration;->getPort()I",
        "Lorg/jivesoftware/smack/BOSHConfiguration;->setLoginInfo()V",
        "Lorg/jivesoftware/smack/BOSHConfiguration;->getProxyPort()I"
    ],
    "Lcom/kenai/jbosh/BOSHClientConfig$Builder;": [
        "Lcom/kenai/jbosh/BOSHClientConfig$Builder;->build()Lcom/kenai/jbosh/BOSHClientConfig;",
        "Lcom/kenai/jbosh/BOSHClientConfig$Builder;->setProxy()Lcom/kenai/jbosh/BOSHClientConfig$Builder;",
        "Lcom/kenai/jbosh/BOSHClientConfig$Builder;->create()Lcom/kenai/jbosh/BOSHClientConfig$Builder;"
    ],
    "Ljava/util/concurrent/Executors;": [
        "Ljava/util/concurrent/Executors;->newCachedThreadPool()Ljava/util/concurrent/ExecutorService;",
        "Ljava/util/concurrent/Executors;->newSingleThreadScheduledExecutor()Ljava/util/concurrent/ScheduledExecutorService;",
        "Ljava/util/concurrent/Executors;->newFixedThreadPool()Ljava/util/concurrent/ExecutorService;",
        "Ljava/util/concurrent/Executors;->newSingleThreadExecutor()Ljava/util/concurrent/ExecutorService;"
    ],
    "Lorg/jivesoftware/smack/debugger/SmackDebugger;": [
        "Lorg/jivesoftware/smack/debugger/SmackDebugger;->getReader()Ljava/io/Reader;",
        "Lorg/jivesoftware/smack/debugger/SmackDebugger;->getWriterListener()Lorg/jivesoftware/smack/PacketListener;",
        "Lorg/jivesoftware/smack/debugger/SmackDebugger;->userHasLogged()V",
        "Lorg/jivesoftware/smack/debugger/SmackDebugger;->newConnectionWriter()Ljava/io/Writer;",
        "Lorg/jivesoftware/smack/debugger/SmackDebugger;->getWriter()Ljava/io/Writer;",
        "Lorg/jivesoftware/smack/debugger/SmackDebugger;->getReaderListener()Lorg/jivesoftware/smack/PacketListener;",
        "Lorg/jivesoftware/smack/debugger/SmackDebugger;->newConnectionReader()Ljava/io/Reader;"
    ],
    "Lcom/kenai/jbosh/ComposableBody;": [
        "Lcom/kenai/jbosh/ComposableBody;->escape()Ljava/lang/String;",
        "Lcom/kenai/jbosh/ComposableBody;->builder()Lcom/kenai/jbosh/ComposableBody$Builder;",
        "Lcom/kenai/jbosh/ComposableBody;->computeXML()Ljava/lang/String;",
        "Lcom/kenai/jbosh/ComposableBody;->getBodyQName()Lcom/kenai/jbosh/BodyQName;",
        "Lcom/kenai/jbosh/ComposableBody;->rebuild()Lcom/kenai/jbosh/ComposableBody$Builder;"
    ],
    "Lcom/kenai/jbosh/BodyQName;": [
        "Lcom/kenai/jbosh/BodyQName;->createWithPrefix()Lcom/kenai/jbosh/BodyQName;",
        "Lcom/kenai/jbosh/BodyQName;->equalsQName()Z",
        "Lcom/kenai/jbosh/BodyQName;->getPrefix()Ljava/lang/String;",
        "Lcom/kenai/jbosh/BodyQName;->getNamespaceURI()Ljava/lang/String;",
        "Lcom/kenai/jbosh/BodyQName;->create()Lcom/kenai/jbosh/BodyQName;",
        "Lcom/kenai/jbosh/BodyQName;->getLocalPart()Ljava/lang/String;",
        "Lcom/kenai/jbosh/BodyQName;->createBOSH()Lcom/kenai/jbosh/BodyQName;"
    ],
    "Lcom/kenai/jbosh/ComposableBody$Builder;": [
        "Lcom/kenai/jbosh/ComposableBody$Builder;->access$300()Lcom/kenai/jbosh/ComposableBody$Builder;",
        "Lcom/kenai/jbosh/ComposableBody$Builder;->setAttribute()Lcom/kenai/jbosh/ComposableBody$Builder;",
        "Lcom/kenai/jbosh/ComposableBody$Builder;->setPayloadXML()Lcom/kenai/jbosh/ComposableBody$Builder;",
        "Lcom/kenai/jbosh/ComposableBody$Builder;->build()Lcom/kenai/jbosh/ComposableBody;"
    ],
    "Lorg/jivesoftware/smack/ConnectionListener;": [
        "Lorg/jivesoftware/smack/ConnectionListener;->reconnectionFailed()V",
        "Lorg/jivesoftware/smack/ConnectionListener;->connectionClosedOnError()V",
        "Lorg/jivesoftware/smack/ConnectionListener;->reconnectionSuccessful()V",
        "Lorg/jivesoftware/smack/ConnectionListener;->connectionClosed()V",
        "Lorg/jivesoftware/smack/ConnectionListener;->reconnectingIn()V"
    ],
    "Lorg/jivesoftware/smack/SASLAuthentication;": [
        "Lorg/jivesoftware/smack/SASLAuthentication;->authenticate()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/SASLAuthentication;->bindResourceAndEstablishSession()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/SASLAuthentication;->hasNonAnonymousAuthentication()Z",
        "Lorg/jivesoftware/smack/SASLAuthentication;->send()V",
        "Lorg/jivesoftware/smack/SASLAuthentication;->supportSASLMechanism()V",
        "Lorg/jivesoftware/smack/SASLAuthentication;->registerSASLMechanism()V",
        "Lorg/jivesoftware/smack/SASLAuthentication;->bindingRequired()V",
        "Lorg/jivesoftware/smack/SASLAuthentication;->authenticationFailed()V",
        "Lorg/jivesoftware/smack/SASLAuthentication;->challengeReceived()V",
        "Lorg/jivesoftware/smack/SASLAuthentication;->hasAnonymousAuthentication()Z",
        "Lorg/jivesoftware/smack/SASLAuthentication;->setAvailableSASLMethods()V",
        "Lorg/jivesoftware/smack/SASLAuthentication;->sessionsSupported()V",
        "Lorg/jivesoftware/smack/SASLAuthentication;->authenticated()V",
        "Lorg/jivesoftware/smack/SASLAuthentication;->authenticateAnonymously()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smack/NonSASLAuthentication;": [
        "Lorg/jivesoftware/smack/NonSASLAuthentication;->authenticateAnonymously()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/NonSASLAuthentication;->authenticate()Ljava/lang/String;"
    ],
    "Ljava/util/concurrent/ExecutorService;": [
        "Ljava/util/concurrent/ExecutorService;->shutdown()V",
        "Ljava/util/concurrent/ExecutorService;->shutdownNow()Ljava/util/List;",
        "Ljava/util/concurrent/ExecutorService;->submit()Ljava/util/concurrent/Future;",
        "Ljava/util/concurrent/ExecutorService;->execute()V"
    ],
    "Lcom/kenai/jbosh/BOSHException;": [
        "Lcom/kenai/jbosh/BOSHException;->printStackTrace()V"
    ],
    "Ljava/io/PipedWriter;": [
        "Ljava/io/PipedWriter;->close()V"
    ],
    "Ljava/io/Reader;": [
        "Ljava/io/Reader;->reset()V",
        "Ljava/io/Reader;->close()V",
        "Ljava/io/Reader;->ready()Z",
        "Ljava/io/Reader;->skip()J",
        "Ljava/io/Reader;->markSupported()Z",
        "Ljava/io/Reader;->read()I",
        "Ljava/io/Reader;->mark()V"
    ],
    "Ljava/io/Writer;": [
        "Ljava/io/Writer;->close()V",
        "Ljava/io/Writer;->write()V",
        "Ljava/io/Writer;->flush()V"
    ],
    "Lorg/xmlpull/v1/XmlPullParser;": [
        "Lorg/xmlpull/v1/XmlPullParser;->getEventType()I",
        "Lorg/xmlpull/v1/XmlPullParser;->next()I",
        "Lorg/xmlpull/v1/XmlPullParser;->getPrefix()Ljava/lang/String;",
        "Lorg/xmlpull/v1/XmlPullParser;->getDepth()I",
        "Lorg/xmlpull/v1/XmlPullParser;->getNamespace()Ljava/lang/String;",
        "Lorg/xmlpull/v1/XmlPullParser;->getAttributePrefix()Ljava/lang/String;",
        "Lorg/xmlpull/v1/XmlPullParser;->getText()Ljava/lang/String;",
        "Lorg/xmlpull/v1/XmlPullParser;->nextText()Ljava/lang/String;",
        "Lorg/xmlpull/v1/XmlPullParser;->getAttributeNamespace()Ljava/lang/String;",
        "Lorg/xmlpull/v1/XmlPullParser;->getAttributeValue()Ljava/lang/String;",
        "Lorg/xmlpull/v1/XmlPullParser;->getAttributeName()Ljava/lang/String;",
        "Lorg/xmlpull/v1/XmlPullParser;->getName()Ljava/lang/String;",
        "Lorg/xmlpull/v1/XmlPullParser;->nextTag()I",
        "Lorg/xmlpull/v1/XmlPullParser;->isEmptyElementTag()Z",
        "Lorg/xmlpull/v1/XmlPullParser;->setFeature()V",
        "Lorg/xmlpull/v1/XmlPullParser;->setInput()V",
        "Lorg/xmlpull/v1/XmlPullParser;->getAttributeCount()I"
    ],
    "Lorg/jivesoftware/smack/util/PacketParserUtils;": [
        "Lorg/jivesoftware/smack/util/PacketParserUtils;->parseResourceBinding()Lorg/jivesoftware/smack/packet/Bind;",
        "Lorg/jivesoftware/smack/util/PacketParserUtils;->parseRegistration()Lorg/jivesoftware/smack/packet/Registration;",
        "Lorg/jivesoftware/smack/util/PacketParserUtils;->parseWithIntrospection()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/PacketParserUtils;->parseMechanisms()Ljava/util/Collection;",
        "Lorg/jivesoftware/smack/util/PacketParserUtils;->parseContent()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/util/PacketParserUtils;->parseProperties()Ljava/util/Map;",
        "Lorg/jivesoftware/smack/util/PacketParserUtils;->parseStreamError()Lorg/jivesoftware/smack/packet/StreamError;",
        "Lorg/jivesoftware/smack/util/PacketParserUtils;->parseCompressionMethods()Ljava/util/Collection;",
        "Lorg/jivesoftware/smack/util/PacketParserUtils;->parseRoster()Lorg/jivesoftware/smack/packet/RosterPacket;",
        "Lorg/jivesoftware/smack/util/PacketParserUtils;->parseMessage()Lorg/jivesoftware/smack/packet/Packet;",
        "Lorg/jivesoftware/smack/util/PacketParserUtils;->getLanguageAttribute()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/util/PacketParserUtils;->parsePresence()Lorg/jivesoftware/smack/packet/Presence;",
        "Lorg/jivesoftware/smack/util/PacketParserUtils;->parsePacketExtension()Lorg/jivesoftware/smack/packet/PacketExtension;",
        "Lorg/jivesoftware/smack/util/PacketParserUtils;->parseError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smack/util/PacketParserUtils;->parseIQ()Lorg/jivesoftware/smack/packet/IQ;",
        "Lorg/jivesoftware/smack/util/PacketParserUtils;->parseAuthentication()Lorg/jivesoftware/smack/packet/Authentication;",
        "Lorg/jivesoftware/smack/util/PacketParserUtils;->decode()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/PacketParserUtils;->parseSASLFailure()Lorg/jivesoftware/smack/sasl/SASLMechanism$Failure;"
    ],
    "Lorg/jivesoftware/smack/AccountManager;": [
        "Lorg/jivesoftware/smack/AccountManager;->createAccount()V",
        "Lorg/jivesoftware/smack/AccountManager;->getRegistrationInfo()V",
        "Lorg/jivesoftware/smack/AccountManager;->supportsAccountCreation()Z",
        "Lorg/jivesoftware/smack/AccountManager;->getAccountAttributes()Ljava/util/Collection;",
        "Lorg/jivesoftware/smack/AccountManager;->setSupportsAccountCreation()V"
    ],
    "Lcom/kenai/jbosh/BOSHMessageEvent;": [
        "Lcom/kenai/jbosh/BOSHMessageEvent;->getBody()Lcom/kenai/jbosh/AbstractBody;",
        "Lcom/kenai/jbosh/BOSHMessageEvent;->createResponseReceivedEvent()Lcom/kenai/jbosh/BOSHMessageEvent;",
        "Lcom/kenai/jbosh/BOSHMessageEvent;->createRequestSentEvent()Lcom/kenai/jbosh/BOSHMessageEvent;"
    ],
    "Lcom/kenai/jbosh/AbstractBody;": [
        "Lcom/kenai/jbosh/AbstractBody;->getBodyQName()Lcom/kenai/jbosh/BodyQName;",
        "Lcom/kenai/jbosh/AbstractBody;->toXML()Ljava/lang/String;",
        "Lcom/kenai/jbosh/AbstractBody;->getAttributes()Ljava/util/Map;",
        "Lcom/kenai/jbosh/AbstractBody;->getAttribute()Ljava/lang/String;"
    ],
    "Lorg/xmlpull/v1/XmlPullParserFactory;": [
        "Lorg/xmlpull/v1/XmlPullParserFactory;->newPullParser()Lorg/xmlpull/v1/XmlPullParser;",
        "Lorg/xmlpull/v1/XmlPullParserFactory;->setNamespaceAware()V",
        "Lorg/xmlpull/v1/XmlPullParserFactory;->newInstance()Lorg/xmlpull/v1/XmlPullParserFactory;",
        "Lorg/xmlpull/v1/XmlPullParserFactory;->setValidating()V"
    ],
    "Lorg/jivesoftware/smack/BOSHPacketReader;": [
        "Lorg/jivesoftware/smack/BOSHPacketReader;->parseFeatures()V"
    ],
    "Ljavax/net/SocketFactory;": [
        "Ljavax/net/SocketFactory;->createSocket()Ljava/net/Socket;"
    ],
    "Lorg/jivesoftware/smack/XMPPConnection;": [
        "Lorg/jivesoftware/smack/XMPPConnection;->proceedTLSReceived()V",
        "Lorg/jivesoftware/smack/XMPPConnection;->startTLSReceived()V",
        "Lorg/jivesoftware/smack/XMPPConnection;->addConnectionCreationListener()V",
        "Lorg/jivesoftware/smack/XMPPConnection;->addPacketInterceptor()V",
        "Lorg/jivesoftware/smack/XMPPConnection;->isSecureConnection()Z",
        "Lorg/jivesoftware/smack/XMPPConnection;->getConnectionCreationListeners()Ljava/util/Collection;",
        "Lorg/jivesoftware/smack/XMPPConnection;->getChatManager()Lorg/jivesoftware/smack/ChatManager;",
        "Lorg/jivesoftware/smack/XMPPConnection;->getRoster()Lorg/jivesoftware/smack/Roster;",
        "Lorg/jivesoftware/smack/XMPPConnection;->isAnonymous()Z",
        "Lorg/jivesoftware/smack/XMPPConnection;->removePacketInterceptor()V",
        "Lorg/jivesoftware/smack/XMPPConnection;->connect()V",
        "Lorg/jivesoftware/smack/XMPPConnection;->getAccountManager()Lorg/jivesoftware/smack/AccountManager;",
        "Lorg/jivesoftware/smack/XMPPConnection;->shutdown()V",
        "Lorg/jivesoftware/smack/XMPPConnection;->removePacketSendingListener()V",
        "Lorg/jivesoftware/smack/XMPPConnection;->connectUsingConfiguration()V",
        "Lorg/jivesoftware/smack/XMPPConnection;->firePacketSendingListeners()V",
        "Lorg/jivesoftware/smack/XMPPConnection;->addPacketSendingListener()V",
        "Lorg/jivesoftware/smack/XMPPConnection;->disconnect()V",
        "Lorg/jivesoftware/smack/XMPPConnection;->getServiceName()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/XMPPConnection;->requestStreamCompression()V",
        "Lorg/jivesoftware/smack/XMPPConnection;->setAvailableCompressionMethods()V",
        "Lorg/jivesoftware/smack/XMPPConnection;->login()V",
        "Lorg/jivesoftware/smack/XMPPConnection;->getConnectionListeners()Ljava/util/Collection;",
        "Lorg/jivesoftware/smack/XMPPConnection;->getPacketCollectors()Ljava/util/Collection;",
        "Lorg/jivesoftware/smack/XMPPConnection;->setWasAuthenticated()V",
        "Lorg/jivesoftware/smack/XMPPConnection;->useCompression()Z",
        "Lorg/jivesoftware/smack/XMPPConnection;->isConnected()Z",
        "Lorg/jivesoftware/smack/XMPPConnection;->isUsingTLS()Z",
        "Lorg/jivesoftware/smack/XMPPConnection;->addPacketListener()V",
        "Lorg/jivesoftware/smack/XMPPConnection;->getSASLAuthentication()Lorg/jivesoftware/smack/SASLAuthentication;",
        "Lorg/jivesoftware/smack/XMPPConnection;->getConfiguration()Lorg/jivesoftware/smack/ConnectionConfiguration;",
        "Lorg/jivesoftware/smack/XMPPConnection;->loginAnonymously()V",
        "Lorg/jivesoftware/smack/XMPPConnection;->isAuthenticated()Z",
        "Lorg/jivesoftware/smack/XMPPConnection;->startStreamCompression()V",
        "Lorg/jivesoftware/smack/XMPPConnection;->hasAvailableCompressionMethod()Z",
        "Lorg/jivesoftware/smack/XMPPConnection;->firePacketInterceptors()V",
        "Lorg/jivesoftware/smack/XMPPConnection;->streamCompressionDenied()V"
    ],
    "Lorg/jivesoftware/smack/PacketWriter;": [
        "Lorg/jivesoftware/smack/PacketWriter;->openStream()V",
        "Lorg/jivesoftware/smack/PacketWriter;->writePackets()V",
        "Lorg/jivesoftware/smack/PacketWriter;->cleanup()V",
        "Lorg/jivesoftware/smack/PacketWriter;->sendPacket()V",
        "Lorg/jivesoftware/smack/PacketWriter;->nextPacket()Lorg/jivesoftware/smack/packet/Packet;",
        "Lorg/jivesoftware/smack/PacketWriter;->startup()V",
        "Lorg/jivesoftware/smack/PacketWriter;->shutdown()V",
        "Lorg/jivesoftware/smack/PacketWriter;->startKeepAliveProcess()V",
        "Lorg/jivesoftware/smack/PacketWriter;->setWriter()V"
    ],
    "Lorg/jivesoftware/smack/PacketReader;": [
        "Lorg/jivesoftware/smack/PacketReader;->releaseConnectionIDLock()V",
        "Lorg/jivesoftware/smack/PacketReader;->startup()V",
        "Lorg/jivesoftware/smack/PacketReader;->resetParser()V",
        "Lorg/jivesoftware/smack/PacketReader;->processPacket()V",
        "Lorg/jivesoftware/smack/PacketReader;->parsePackets()V",
        "Lorg/jivesoftware/smack/PacketReader;->notifyConnectionError()V",
        "Lorg/jivesoftware/smack/PacketReader;->notifyReconnection()V",
        "Lorg/jivesoftware/smack/PacketReader;->shutdown()V",
        "Lorg/jivesoftware/smack/PacketReader;->cleanup()V",
        "Lorg/jivesoftware/smack/PacketReader;->parseFeatures()V"
    ],
    "Lorg/jivesoftware/smack/ConnectionCreationListener;": [
        "Lorg/jivesoftware/smack/ConnectionCreationListener;->connectionCreated()V"
    ],
    "Ljava/net/Socket;": [
        "Ljava/net/Socket;->getInputStream()Ljava/io/InputStream;",
        "Ljava/net/Socket;->setSoTimeout()V",
        "Ljava/net/Socket;->bind()V",
        "Ljava/net/Socket;->close()V",
        "Ljava/net/Socket;->setKeepAlive()V",
        "Ljava/net/Socket;->getInetAddress()Ljava/net/InetAddress;",
        "Ljava/net/Socket;->getOutputStream()Ljava/io/OutputStream;",
        "Ljava/net/Socket;->getPort()I",
        "Ljava/net/Socket;->getSoTimeout()I",
        "Ljava/net/Socket;->connect()V",
        "Ljava/net/Socket;->setTcpNoDelay()V"
    ],
    "Ljava/lang/reflect/Constructor;": [
        "Ljava/lang/reflect/Constructor;->newInstance()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smack/XMPPException;": [
        "Lorg/jivesoftware/smack/XMPPException;->getXMPPError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smack/XMPPException;->getStreamError()Lorg/jivesoftware/smack/packet/StreamError;",
        "Lorg/jivesoftware/smack/XMPPException;->printStackTrace()V",
        "Lorg/jivesoftware/smack/XMPPException;->getMessage()Ljava/lang/String;"
    ],
    "Ljavax/net/ssl/SSLContext;": [
        "Ljavax/net/ssl/SSLContext;->getInstance()Ljavax/net/ssl/SSLContext;",
        "Ljavax/net/ssl/SSLContext;->getSocketFactory()Ljavax/net/ssl/SSLSocketFactory;"
    ],
    "Ljava/net/InetAddress;": [
        "Ljava/net/InetAddress;->getHostAddress()Ljava/lang/String;",
        "Ljava/net/InetAddress;->getLocalHost()Ljava/net/InetAddress;",
        "Ljava/net/InetAddress;->getByName()Ljava/net/InetAddress;",
        "Ljava/net/InetAddress;->getAddress()[B",
        "Ljava/net/InetAddress;->getByAddress()Ljava/net/InetAddress;",
        "Ljava/net/InetAddress;->getHostName()Ljava/lang/String;"
    ],
    "Ljavax/net/ssl/SSLSocketFactory;": [
        "Ljavax/net/ssl/SSLSocketFactory;->createSocket()Ljava/net/Socket;"
    ],
    "Ljavax/net/ssl/SSLSocket;": [
        "Ljavax/net/ssl/SSLSocket;->startHandshake()V"
    ],
    "Ljavax/net/ssl/KeyManagerFactory;": [
        "Ljavax/net/ssl/KeyManagerFactory;->getInstance()Ljavax/net/ssl/KeyManagerFactory;",
        "Ljavax/net/ssl/KeyManagerFactory;->getKeyManagers()[Ljavax/net/ssl/KeyManager;"
    ],
    "Ljava/security/Security;": [
        "Ljava/security/Security;->getProviders()[Ljava/security/Provider;",
        "Ljava/security/Security;->addProvider()I"
    ],
    "Ljava/security/KeyStore;": [
        "Ljava/security/KeyStore;->getCertificateAlias()Ljava/lang/String;",
        "Ljava/security/KeyStore;->getInstance()Ljava/security/KeyStore;",
        "Ljava/security/KeyStore;->load()V"
    ],
    "Lorg/apache/harmony/javax/security/auth/callback/CallbackHandler;": [
        "Lorg/apache/harmony/javax/security/auth/callback/CallbackHandler;->handle()V"
    ],
    "Lorg/apache/harmony/javax/security/auth/callback/PasswordCallback;": [
        "Lorg/apache/harmony/javax/security/auth/callback/PasswordCallback;->clearPassword()V",
        "Lorg/apache/harmony/javax/security/auth/callback/PasswordCallback;->getPassword()[C",
        "Lorg/apache/harmony/javax/security/auth/callback/PasswordCallback;->setPassword()V",
        "Lorg/apache/harmony/javax/security/auth/callback/PasswordCallback;->setPrompt()V"
    ],
    "Lorg/jivesoftware/smack/ChatManager;": [
        "Lorg/jivesoftware/smack/ChatManager;->createPacketCollector()Lorg/jivesoftware/smack/PacketCollector;",
        "Lorg/jivesoftware/smack/ChatManager;->createChat()Lorg/jivesoftware/smack/Chat;",
        "Lorg/jivesoftware/smack/ChatManager;->addOutgoingMessageInterceptor()V",
        "Lorg/jivesoftware/smack/ChatManager;->addChatListener()V",
        "Lorg/jivesoftware/smack/ChatManager;->getUserChat()Lorg/jivesoftware/smack/Chat;",
        "Lorg/jivesoftware/smack/ChatManager;->deliverMessage()V",
        "Lorg/jivesoftware/smack/ChatManager;->sendMessage()V",
        "Lorg/jivesoftware/smack/ChatManager;->nextID()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smack/ChatManagerListener;": [
        "Lorg/jivesoftware/smack/ChatManagerListener;->chatCreated()V"
    ],
    "Lorg/jivesoftware/smack/packet/Message;": [
        "Lorg/jivesoftware/smack/packet/Message;->getXmlns()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Message;->setFrom()V",
        "Lorg/jivesoftware/smack/packet/Message;->removeSubject()Z",
        "Lorg/jivesoftware/smack/packet/Message;->getThread()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Message;->getSubjects()Ljava/util/Collection;",
        "Lorg/jivesoftware/smack/packet/Message;->getFrom()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Message;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Message;->getMessageBody()Lorg/jivesoftware/smack/packet/Message$Body;",
        "Lorg/jivesoftware/smack/packet/Message;->setBody()V",
        "Lorg/jivesoftware/smack/packet/Message;->getType()Lorg/jivesoftware/smack/packet/Message$Type;",
        "Lorg/jivesoftware/smack/packet/Message;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smack/packet/Message;->addSubject()Lorg/jivesoftware/smack/packet/Message$Subject;",
        "Lorg/jivesoftware/smack/packet/Message;->getSubject()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Message;->getMessageSubject()Lorg/jivesoftware/smack/packet/Message$Subject;",
        "Lorg/jivesoftware/smack/packet/Message;->getDefaultLanguage()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Message;->getExtensionsXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Message;->setThread()V",
        "Lorg/jivesoftware/smack/packet/Message;->setSubject()V",
        "Lorg/jivesoftware/smack/packet/Message;->removeBody()Z",
        "Lorg/jivesoftware/smack/packet/Message;->setError()V",
        "Lorg/jivesoftware/smack/packet/Message;->addExtension()V",
        "Lorg/jivesoftware/smack/packet/Message;->setProperty()V",
        "Lorg/jivesoftware/smack/packet/Message;->determineLanguage()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Message;->setTo()V",
        "Lorg/jivesoftware/smack/packet/Message;->getBody()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Message;->setPacketID()V",
        "Lorg/jivesoftware/smack/packet/Message;->getBodies()Ljava/util/Collection;",
        "Lorg/jivesoftware/smack/packet/Message;->getExtension()Lorg/jivesoftware/smack/packet/PacketExtension;",
        "Lorg/jivesoftware/smack/packet/Message;->getTo()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Message;->setLanguage()V",
        "Lorg/jivesoftware/smack/packet/Message;->addBody()Lorg/jivesoftware/smack/packet/Message$Body;",
        "Lorg/jivesoftware/smack/packet/Message;->setType()V",
        "Lorg/jivesoftware/smack/packet/Message;->getLanguage()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smack/Chat;": [
        "Lorg/jivesoftware/smack/Chat;->getThreadID()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/Chat;->deliver()V",
        "Lorg/jivesoftware/smack/Chat;->getParticipant()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/Chat;->getListeners()Ljava/util/Collection;",
        "Lorg/jivesoftware/smack/Chat;->sendMessage()V",
        "Lorg/jivesoftware/smack/Chat;->addMessageListener()V"
    ],
    "Ljava/util/Map$Entry;": [
        "Ljava/util/Map$Entry;->getKey()Ljava/lang/Object;",
        "Ljava/util/Map$Entry;->getValue()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smack/filter/PacketFilter;": [
        "Lorg/jivesoftware/smack/filter/PacketFilter;->accept()Z"
    ],
    "Lorg/jivesoftware/smack/PacketInterceptor;": [
        "Lorg/jivesoftware/smack/PacketInterceptor;->interceptPacket()V"
    ],
    "Lorg/jivesoftware/smack/proxy/ProxyInfo;": [
        "Lorg/jivesoftware/smack/proxy/ProxyInfo;->forDefaultProxy()Lorg/jivesoftware/smack/proxy/ProxyInfo;",
        "Lorg/jivesoftware/smack/proxy/ProxyInfo;->getProxyUsername()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/proxy/ProxyInfo;->getProxyPassword()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/proxy/ProxyInfo;->getProxyType()Lorg/jivesoftware/smack/proxy/ProxyInfo$ProxyType;",
        "Lorg/jivesoftware/smack/proxy/ProxyInfo;->getProxyPort()I",
        "Lorg/jivesoftware/smack/proxy/ProxyInfo;->getSocketFactory()Ljavax/net/SocketFactory;",
        "Lorg/jivesoftware/smack/proxy/ProxyInfo;->getProxyAddress()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smack/packet/XMPPError;": [
        "Lorg/jivesoftware/smack/packet/XMPPError;->getType()Lorg/jivesoftware/smack/packet/XMPPError$Type;",
        "Lorg/jivesoftware/smack/packet/XMPPError;->addExtension()V",
        "Lorg/jivesoftware/smack/packet/XMPPError;->toString()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/XMPPError;->getExtensions()Ljava/util/List;",
        "Lorg/jivesoftware/smack/packet/XMPPError;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/XMPPError;->getCode()I",
        "Lorg/jivesoftware/smack/packet/XMPPError;->getMessage()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/XMPPError;->getExtension()Lorg/jivesoftware/smack/packet/PacketExtension;"
    ],
    "Lorg/jivesoftware/smack/packet/StreamError;": [
        "Lorg/jivesoftware/smack/packet/StreamError;->toString()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/StreamError;->getCode()Ljava/lang/String;"
    ],
    "Ljava/io/PrintStream;": [
        "Ljava/io/PrintStream;->println()V"
    ],
    "Ljava/io/PrintWriter;": [
        "Ljava/io/PrintWriter;->close()V",
        "Ljava/io/PrintWriter;->println()V"
    ],
    "Ljava/util/concurrent/Semaphore;": [
        "Ljava/util/concurrent/Semaphore;->acquire()V",
        "Ljava/util/concurrent/Semaphore;->release()V",
        "Ljava/util/concurrent/Semaphore;->tryAcquire()Z"
    ],
    "Lorg/xmlpull/v1/XmlPullParserException;": [
        "Lorg/xmlpull/v1/XmlPullParserException;->printStackTrace()V"
    ],
    "Lorg/jivesoftware/smack/ServerTrustManager;": [
        "Lorg/jivesoftware/smack/ServerTrustManager;->getSubjectAlternativeNames()Ljava/util/List;",
        "Lorg/jivesoftware/smack/ServerTrustManager;->getPeerIdentity()Ljava/util/List;"
    ],
    "Ljava/security/cert/X509Certificate;": [
        "Ljava/security/cert/X509Certificate;->getSubjectDN()Ljava/security/Principal;",
        "Ljava/security/cert/X509Certificate;->checkValidity()V",
        "Ljava/security/cert/X509Certificate;->verify()V",
        "Ljava/security/cert/X509Certificate;->getPublicKey()Ljava/security/PublicKey;",
        "Ljava/security/cert/X509Certificate;->getSubjectAlternativeNames()Ljava/util/Collection;",
        "Ljava/security/cert/X509Certificate;->getIssuerDN()Ljava/security/Principal;"
    ],
    "Ljava/security/Principal;": [
        "Ljava/security/Principal;->getName()Ljava/lang/String;"
    ],
    "Ljava/security/cert/CertificateParsingException;": [
        "Ljava/security/cert/CertificateParsingException;->printStackTrace()V"
    ],
    "Ljava/security/KeyStoreException;": [
        "Ljava/security/KeyStoreException;->printStackTrace()V"
    ],
    "Lorg/jivesoftware/smack/util/DNSUtil;": [
        "Lorg/jivesoftware/smack/util/DNSUtil;->resolveSRV()Lorg/jivesoftware/smack/util/DNSUtil$HostAddress;",
        "Lorg/jivesoftware/smack/util/DNSUtil;->resolveXMPPDomain()Lorg/jivesoftware/smack/util/DNSUtil$HostAddress;"
    ],
    "Lorg/jivesoftware/smack/util/DNSUtil$HostAddress;": [
        "Lorg/jivesoftware/smack/util/DNSUtil$HostAddress;->getPort()I",
        "Lorg/jivesoftware/smack/util/DNSUtil$HostAddress;->getHost()Ljava/lang/String;"
    ],
    "Ljava/util/concurrent/BlockingQueue;": [
        "Ljava/util/concurrent/BlockingQueue;->isEmpty()Z",
        "Ljava/util/concurrent/BlockingQueue;->poll()Ljava/lang/Object;",
        "Ljava/util/concurrent/BlockingQueue;->clear()V",
        "Ljava/util/concurrent/BlockingQueue;->remove()Ljava/lang/Object;",
        "Ljava/util/concurrent/BlockingQueue;->put()V"
    ],
    "Ljava/lang/InterruptedException;": [
        "Ljava/lang/InterruptedException;->printStackTrace()V"
    ],
    "Lorg/jivesoftware/smack/PacketWriter$KeepAliveTask;": [
        "Lorg/jivesoftware/smack/PacketWriter$KeepAliveTask;->setThread()V"
    ],
    "Lorg/jivesoftware/smack/packet/Registration;": [
        "Lorg/jivesoftware/smack/packet/Registration;->getInstructions()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Registration;->getFieldNames()Ljava/util/List;",
        "Lorg/jivesoftware/smack/packet/Registration;->setRegistered()V",
        "Lorg/jivesoftware/smack/packet/Registration;->addRequiredField()V",
        "Lorg/jivesoftware/smack/packet/Registration;->isRegistered()Z",
        "Lorg/jivesoftware/smack/packet/Registration;->getType()Lorg/jivesoftware/smack/packet/IQ$Type;",
        "Lorg/jivesoftware/smack/packet/Registration;->getExtensionsXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Registration;->setPassword()V",
        "Lorg/jivesoftware/smack/packet/Registration;->setRemove()V",
        "Lorg/jivesoftware/smack/packet/Registration;->getRequiredFields()Ljava/util/List;",
        "Lorg/jivesoftware/smack/packet/Registration;->setInstructions()V",
        "Lorg/jivesoftware/smack/packet/Registration;->setTo()V",
        "Lorg/jivesoftware/smack/packet/Registration;->setType()V",
        "Lorg/jivesoftware/smack/packet/Registration;->addAttribute()V",
        "Lorg/jivesoftware/smack/packet/Registration;->addExtension()V",
        "Lorg/jivesoftware/smack/packet/Registration;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Registration;->setFrom()V",
        "Lorg/jivesoftware/smack/packet/Registration;->getField()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Registration;->setUsername()V",
        "Lorg/jivesoftware/smack/packet/Registration;->getAttributes()Ljava/util/Map;"
    ],
    "Ljava/lang/ClassLoader;": [
        "Ljava/lang/ClassLoader;->getSystemClassLoader()Ljava/lang/ClassLoader;",
        "Ljava/lang/ClassLoader;->getResource()Ljava/net/URL;",
        "Ljava/lang/ClassLoader;->getResources()Ljava/util/Enumeration;"
    ],
    "Ljava/util/Enumeration;": [
        "Ljava/util/Enumeration;->nextElement()Ljava/lang/Object;",
        "Ljava/util/Enumeration;->hasMoreElements()Z"
    ],
    "Ljava/net/URL;": [
        "Ljava/net/URL;->openConnection()Ljava/net/URLConnection;",
        "Ljava/net/URL;->getHost()Ljava/lang/String;",
        "Ljava/net/URL;->getPort()I",
        "Ljava/net/URL;->getContent()Ljava/lang/Object;",
        "Ljava/net/URL;->openStream()Ljava/io/InputStream;",
        "Ljava/net/URL;->toString()Ljava/lang/String;",
        "Ljava/net/URL;->getPath()Ljava/lang/String;"
    ],
    "Ljava/lang/NumberFormatException;": [
        "Ljava/lang/NumberFormatException;->printStackTrace()V"
    ],
    "Lorg/jivesoftware/smack/packet/Authentication;": [
        "Lorg/jivesoftware/smack/packet/Authentication;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Authentication;->setResource()V",
        "Lorg/jivesoftware/smack/packet/Authentication;->getDigest()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Authentication;->getPassword()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Authentication;->getResource()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Authentication;->setPassword()V",
        "Lorg/jivesoftware/smack/packet/Authentication;->setDigest()V",
        "Lorg/jivesoftware/smack/packet/Authentication;->setType()V",
        "Lorg/jivesoftware/smack/packet/Authentication;->setUsername()V"
    ],
    "Lorg/jivesoftware/smack/MessageListener;": [
        "Lorg/jivesoftware/smack/MessageListener;->processMessage()V"
    ],
    "Ljava/util/concurrent/LinkedBlockingQueue;": [
        "Ljava/util/concurrent/LinkedBlockingQueue;->offer()Z",
        "Ljava/util/concurrent/LinkedBlockingQueue;->poll()Ljava/lang/Object;",
        "Ljava/util/concurrent/LinkedBlockingQueue;->take()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smack/packet/Bind;": [
        "Lorg/jivesoftware/smack/packet/Bind;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smack/packet/Bind;->getType()Lorg/jivesoftware/smack/packet/IQ$Type;",
        "Lorg/jivesoftware/smack/packet/Bind;->setResource()V",
        "Lorg/jivesoftware/smack/packet/Bind;->getJid()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Bind;->setType()V",
        "Lorg/jivesoftware/smack/packet/Bind;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Bind;->setJid()V"
    ],
    "Lorg/jivesoftware/smack/packet/Session;": [
        "Lorg/jivesoftware/smack/packet/Session;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Session;->setType()V"
    ],
    "Lorg/jivesoftware/smack/sasl/SASLMechanism;": [
        "Lorg/jivesoftware/smack/sasl/SASLMechanism;->challengeReceived()V",
        "Lorg/jivesoftware/smack/sasl/SASLMechanism;->getName()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/sasl/SASLMechanism;->getSASLAuthentication()Lorg/jivesoftware/smack/SASLAuthentication;",
        "Lorg/jivesoftware/smack/sasl/SASLMechanism;->authenticate()V"
    ],
    "Lorg/jivesoftware/smack/ReconnectionManager;": [
        "Lorg/jivesoftware/smack/ReconnectionManager;->reconnect()V",
        "Lorg/jivesoftware/smack/ReconnectionManager;->isReconnectionAllowed()Z"
    ],
    "Ljava/util/concurrent/atomic/AtomicInteger;": [
        "Ljava/util/concurrent/atomic/AtomicInteger;->getAndIncrement()I"
    ],
    "Lorg/jivesoftware/smack/Connection$InterceptorWrapper;": [
        "Lorg/jivesoftware/smack/Connection$InterceptorWrapper;->notifyListener()V"
    ],
    "Lorg/jivesoftware/smack/Connection$ListenerWrapper;": [
        "Lorg/jivesoftware/smack/Connection$ListenerWrapper;->notifyListener()V"
    ],
    "Lorg/jivesoftware/smack/proxy/ProxyInfo$ProxyType;": [
        "Lorg/jivesoftware/smack/proxy/ProxyInfo$ProxyType;->toString()Ljava/lang/String;"
    ],
    "Ljava/net/UnknownHostException;": [
        "Ljava/net/UnknownHostException;->toString()Ljava/lang/String;",
        "Ljava/net/UnknownHostException;->getMessage()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smack/proxy/Socks4ProxySocketFactory;": [
        "Lorg/jivesoftware/smack/proxy/Socks4ProxySocketFactory;->socks4ProxifiedSocket()Ljava/net/Socket;"
    ],
    "Lorg/jivesoftware/smack/util/Base64;": [
        "Lorg/jivesoftware/smack/util/Base64;->encodeBytes()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/util/Base64;->encodeFromFile()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/util/Base64;->encode3to4()[B",
        "Lorg/jivesoftware/smack/util/Base64;->decodeFromFile()[B",
        "Lorg/jivesoftware/smack/util/Base64;->decodeFileToFile()V",
        "Lorg/jivesoftware/smack/util/Base64;->getDecodabet()[B",
        "Lorg/jivesoftware/smack/util/Base64;->decode()[B",
        "Lorg/jivesoftware/smack/util/Base64;->decode4to3()I",
        "Lorg/jivesoftware/smack/util/Base64;->encodeObject()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/util/Base64;->getAlphabet()[B",
        "Lorg/jivesoftware/smack/util/Base64;->usage()V",
        "Lorg/jivesoftware/smack/util/Base64;->encodeFileToFile()V"
    ],
    "Ljava/io/BufferedReader;": [
        "Ljava/io/BufferedReader;->read()I",
        "Ljava/io/BufferedReader;->close()V",
        "Ljava/io/BufferedReader;->readLine()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smack/proxy/HTTPProxySocketFactory;": [
        "Lorg/jivesoftware/smack/proxy/HTTPProxySocketFactory;->httpProxifiedSocket()Ljava/net/Socket;"
    ],
    "Lorg/jivesoftware/smack/proxy/Socks5ProxySocketFactory;": [
        "Lorg/jivesoftware/smack/proxy/Socks5ProxySocketFactory;->socks5ProxifiedSocket()Ljava/net/Socket;",
        "Lorg/jivesoftware/smack/proxy/Socks5ProxySocketFactory;->fill()V"
    ],
    "Lorg/jivesoftware/smack/debugger/ConsoleDebugger;": [
        "Lorg/jivesoftware/smack/debugger/ConsoleDebugger;->createDebug()V"
    ],
    "Lorg/jivesoftware/smack/util/ObservableReader;": [
        "Lorg/jivesoftware/smack/util/ObservableReader;->removeReaderListener()V",
        "Lorg/jivesoftware/smack/util/ObservableReader;->addReaderListener()V"
    ],
    "Lorg/jivesoftware/smack/util/ObservableWriter;": [
        "Lorg/jivesoftware/smack/util/ObservableWriter;->notifyListeners()V",
        "Lorg/jivesoftware/smack/util/ObservableWriter;->removeWriterListener()V",
        "Lorg/jivesoftware/smack/util/ObservableWriter;->addWriterListener()V"
    ],
    "Lorg/jivesoftware/smack/sasl/SASLAnonymous;": [
        "Lorg/jivesoftware/smack/sasl/SASLAnonymous;->getName()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/sasl/SASLAnonymous;->authenticate()V",
        "Lorg/jivesoftware/smack/sasl/SASLAnonymous;->getSASLAuthentication()Lorg/jivesoftware/smack/SASLAuthentication;"
    ],
    "Lorg/jivesoftware/smack/sasl/SASLGSSAPIMechanism;": [
        "Lorg/jivesoftware/smack/sasl/SASLGSSAPIMechanism;->authenticate()V",
        "Lorg/jivesoftware/smack/sasl/SASLGSSAPIMechanism;->getName()Ljava/lang/String;"
    ],
    "Lde/measite/smack/Sasl;": [
        "Lde/measite/smack/Sasl;->createSaslClient()Lorg/apache/harmony/javax/security/sasl/SaslClient;",
        "Lde/measite/smack/Sasl;->getSaslClientFactories()Ljava/util/Enumeration;"
    ],
    "Lorg/jivesoftware/smack/sasl/SASLFacebookConnect;": [
        "Lorg/jivesoftware/smack/sasl/SASLFacebookConnect;->getQueryMap()Ljava/util/Map;",
        "Lorg/jivesoftware/smack/sasl/SASLFacebookConnect;->MD5()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/sasl/SASLFacebookConnect;->getSASLAuthentication()Lorg/jivesoftware/smack/SASLAuthentication;",
        "Lorg/jivesoftware/smack/sasl/SASLFacebookConnect;->getName()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/sasl/SASLFacebookConnect;->authenticate()V",
        "Lorg/jivesoftware/smack/sasl/SASLFacebookConnect;->convertToHex()Ljava/lang/String;"
    ],
    "Ljava/util/GregorianCalendar;": [
        "Ljava/util/GregorianCalendar;->getTimeInMillis()J"
    ],
    "Lorg/apache/harmony/javax/security/sasl/SaslClient;": [
        "Lorg/apache/harmony/javax/security/sasl/SaslClient;->evaluateChallenge()[B",
        "Lorg/apache/harmony/javax/security/sasl/SaslClient;->hasInitialResponse()Z"
    ],
    "Lorg/apache/harmony/javax/security/auth/callback/NameCallback;": [
        "Lorg/apache/harmony/javax/security/auth/callback/NameCallback;->setPrompt()V",
        "Lorg/apache/harmony/javax/security/auth/callback/NameCallback;->setDefaultName()V",
        "Lorg/apache/harmony/javax/security/auth/callback/NameCallback;->getDefaultName()Ljava/lang/String;",
        "Lorg/apache/harmony/javax/security/auth/callback/NameCallback;->setName()V",
        "Lorg/apache/harmony/javax/security/auth/callback/NameCallback;->getName()Ljava/lang/String;"
    ],
    "Lorg/apache/harmony/javax/security/sasl/RealmCallback;": [
        "Lorg/apache/harmony/javax/security/sasl/RealmCallback;->getText()Ljava/lang/String;",
        "Lorg/apache/harmony/javax/security/sasl/RealmCallback;->setText()V"
    ],
    "Lorg/jivesoftware/smack/packet/Message$Type;": [
        "Lorg/jivesoftware/smack/packet/Message$Type;->fromString()Lorg/jivesoftware/smack/packet/Message$Type;",
        "Lorg/jivesoftware/smack/packet/Message$Type;->equals()Z",
        "Lorg/jivesoftware/smack/packet/Message$Type;->hashCode()I"
    ],
    "Lorg/jivesoftware/smack/packet/PrivacyItem;": [
        "Lorg/jivesoftware/smack/packet/PrivacyItem;->getRule()Lorg/jivesoftware/smack/packet/PrivacyItem$PrivacyRule;",
        "Lorg/jivesoftware/smack/packet/PrivacyItem;->getType()Lorg/jivesoftware/smack/packet/PrivacyItem$Type;",
        "Lorg/jivesoftware/smack/packet/PrivacyItem;->isFilterPresence_in()Z",
        "Lorg/jivesoftware/smack/packet/PrivacyItem;->setValue()V",
        "Lorg/jivesoftware/smack/packet/PrivacyItem;->setFilterPresence_out()V",
        "Lorg/jivesoftware/smack/packet/PrivacyItem;->setFilterMessage()V",
        "Lorg/jivesoftware/smack/packet/PrivacyItem;->getOrder()I",
        "Lorg/jivesoftware/smack/packet/PrivacyItem;->setFilterIQ()V",
        "Lorg/jivesoftware/smack/packet/PrivacyItem;->setOrder()V",
        "Lorg/jivesoftware/smack/packet/PrivacyItem;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/PrivacyItem;->isFilterPresence_out()Z",
        "Lorg/jivesoftware/smack/packet/PrivacyItem;->getValue()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/PrivacyItem;->isFilterMessage()Z",
        "Lorg/jivesoftware/smack/packet/PrivacyItem;->setFilterPresence_in()V",
        "Lorg/jivesoftware/smack/packet/PrivacyItem;->isFilterEverything()Z",
        "Lorg/jivesoftware/smack/packet/PrivacyItem;->isAllow()Z",
        "Lorg/jivesoftware/smack/packet/PrivacyItem;->isFilterIQ()Z",
        "Lorg/jivesoftware/smack/packet/PrivacyItem;->setAllow()V",
        "Lorg/jivesoftware/smack/packet/PrivacyItem;->setRule()V"
    ],
    "Lorg/jivesoftware/smack/packet/XMPPError$ErrorSpecification;": [
        "Lorg/jivesoftware/smack/packet/XMPPError$ErrorSpecification;->getType()Lorg/jivesoftware/smack/packet/XMPPError$Type;",
        "Lorg/jivesoftware/smack/packet/XMPPError$ErrorSpecification;->getCode()I",
        "Lorg/jivesoftware/smack/packet/XMPPError$ErrorSpecification;->specFor()Lorg/jivesoftware/smack/packet/XMPPError$ErrorSpecification;"
    ],
    "Lorg/jivesoftware/smack/packet/XMPPError$Condition;": [
        "Lorg/jivesoftware/smack/packet/XMPPError$Condition;->access$000()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smack/packet/PacketExtension;": [
        "Lorg/jivesoftware/smack/packet/PacketExtension;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/PacketExtension;->getNamespace()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/PacketExtension;->getElementName()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smack/packet/XMPPError$Type;": [
        "Lorg/jivesoftware/smack/packet/XMPPError$Type;->equals()Z",
        "Lorg/jivesoftware/smack/packet/XMPPError$Type;->valueOf()Lorg/jivesoftware/smack/packet/XMPPError$Type;",
        "Lorg/jivesoftware/smack/packet/XMPPError$Type;->name()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smack/packet/Message$Body;": [
        "Lorg/jivesoftware/smack/packet/Message$Body;->access$400()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Message$Body;->getLanguage()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Message$Body;->access$300()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Message$Body;->getMessage()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Message$Body;->equals()Z"
    ],
    "Lorg/jivesoftware/smack/packet/Message$Subject;": [
        "Lorg/jivesoftware/smack/packet/Message$Subject;->access$100()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/packet/Message$Subject;->equals()Z",
        "Lorg/jivesoftware/smack/packet/Message$Subject;->access$000()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smack/packet/PrivacyItem$PrivacyRule;": [
        "Lorg/jivesoftware/smack/packet/PrivacyItem$PrivacyRule;->getType()Lorg/jivesoftware/smack/packet/PrivacyItem$Type;",
        "Lorg/jivesoftware/smack/packet/PrivacyItem$PrivacyRule;->fromString()Lorg/jivesoftware/smack/packet/PrivacyItem$PrivacyRule;",
        "Lorg/jivesoftware/smack/packet/PrivacyItem$PrivacyRule;->setValue()V",
        "Lorg/jivesoftware/smack/packet/PrivacyItem$PrivacyRule;->getValue()Ljava/lang/String;"
    ],
    "Ljava/util/HashMap;": [
        "Ljava/util/HashMap;->clear()V",
        "Ljava/util/HashMap;->containsKey()Z",
        "Ljava/util/HashMap;->putAll()V",
        "Ljava/util/HashMap;->get()Ljava/lang/Object;",
        "Ljava/util/HashMap;->keySet()Ljava/util/Set;",
        "Ljava/util/HashMap;->put()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smack/packet/DefaultPacketExtension;": [
        "Lorg/jivesoftware/smack/packet/DefaultPacketExtension;->getNames()Ljava/util/Collection;",
        "Lorg/jivesoftware/smack/packet/DefaultPacketExtension;->setValue()V",
        "Lorg/jivesoftware/smack/packet/DefaultPacketExtension;->getValue()Ljava/lang/String;"
    ],
    "Ljava/util/TimeZone;": [
        "Ljava/util/TimeZone;->getDefault()Ljava/util/TimeZone;",
        "Ljava/util/TimeZone;->getTimeZone()Ljava/util/TimeZone;",
        "Ljava/util/TimeZone;->getID()Ljava/lang/String;",
        "Ljava/util/TimeZone;->getOffset()I"
    ],
    "Ljava/text/DateFormat;": [
        "Ljava/text/DateFormat;->setTimeZone()V",
        "Ljava/text/DateFormat;->getCalendar()Ljava/util/Calendar;",
        "Ljava/text/DateFormat;->format()Ljava/lang/String;",
        "Ljava/text/DateFormat;->parse()Ljava/util/Date;",
        "Ljava/text/DateFormat;->getDateTimeInstance()Ljava/text/DateFormat;"
    ],
    "Ljava/lang/Float;": [
        "Ljava/lang/Float;->floatValue()F",
        "Ljava/lang/Float;->floatToIntBits()I",
        "Ljava/lang/Float;->valueOf()Ljava/lang/Float;",
        "Ljava/lang/Float;->isNaN()Z"
    ],
    "Ljava/lang/IllegalArgumentException;": [
        "Ljava/lang/IllegalArgumentException;->getMessage()Ljava/lang/String;",
        "Ljava/lang/IllegalArgumentException;->printStackTrace()V"
    ],
    "Lorg/jivesoftware/smack/packet/IQ$Type;": [
        "Lorg/jivesoftware/smack/packet/IQ$Type;->fromString()Lorg/jivesoftware/smack/packet/IQ$Type;"
    ],
    "Lorg/jivesoftware/smack/provider/ProviderManager;": [
        "Lorg/jivesoftware/smack/provider/ProviderManager;->getClassLoaders()[Ljava/lang/ClassLoader;",
        "Lorg/jivesoftware/smack/provider/ProviderManager;->getExtensionProvider()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/provider/ProviderManager;->getIQProvider()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/provider/ProviderManager;->getProviderKey()Ljava/lang/String;",
        "Lorg/jivesoftware/smack/provider/ProviderManager;->getInstance()Lorg/jivesoftware/smack/provider/ProviderManager;",
        "Lorg/jivesoftware/smack/provider/ProviderManager;->addExtensionProvider()V"
    ],
    "Lorg/jivesoftware/smack/provider/IQProvider;": [
        "Lorg/jivesoftware/smack/provider/IQProvider;->parseIQ()Lorg/jivesoftware/smack/packet/IQ;"
    ],
    "Lorg/jivesoftware/smack/provider/PacketExtensionProvider;": [
        "Lorg/jivesoftware/smack/provider/PacketExtensionProvider;->parseExtension()Lorg/jivesoftware/smack/packet/PacketExtension;"
    ],
    "Lorg/jivesoftware/smack/packet/Presence$Type;": [
        "Lorg/jivesoftware/smack/packet/Presence$Type;->valueOf()Lorg/jivesoftware/smack/packet/Presence$Type;"
    ],
    "Lorg/jivesoftware/smack/packet/RosterPacket$ItemStatus;": [
        "Lorg/jivesoftware/smack/packet/RosterPacket$ItemStatus;->fromString()Lorg/jivesoftware/smack/packet/RosterPacket$ItemStatus;"
    ],
    "Lorg/xbill/DNS/Lookup;": [
        "Lorg/xbill/DNS/Lookup;->getDefaultSearchPath()[Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/Lookup;->setDefaultResolver()V",
        "Lorg/xbill/DNS/Lookup;->processResponse()V",
        "Lorg/xbill/DNS/Lookup;->getDefaultResolver()Lorg/xbill/DNS/Resolver;",
        "Lorg/xbill/DNS/Lookup;->lookup()V",
        "Lorg/xbill/DNS/Lookup;->checkDone()V",
        "Lorg/xbill/DNS/Lookup;->getDefaultCache()Lorg/xbill/DNS/Cache;",
        "Lorg/xbill/DNS/Lookup;->refreshDefault()V",
        "Lorg/xbill/DNS/Lookup;->reset()V",
        "Lorg/xbill/DNS/Lookup;->resolve()V",
        "Lorg/xbill/DNS/Lookup;->run()[Lorg/xbill/DNS/Record;",
        "Lorg/xbill/DNS/Lookup;->getErrorString()Ljava/lang/String;",
        "Lorg/xbill/DNS/Lookup;->setDefaultSearchPath()V",
        "Lorg/xbill/DNS/Lookup;->follow()V"
    ],
    "Lorg/xbill/DNS/SRVRecord;": [
        "Lorg/xbill/DNS/SRVRecord;->getPriority()I",
        "Lorg/xbill/DNS/SRVRecord;->getPort()I",
        "Lorg/xbill/DNS/SRVRecord;->getWeight()I",
        "Lorg/xbill/DNS/SRVRecord;->checkU16()I",
        "Lorg/xbill/DNS/SRVRecord;->checkName()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/SRVRecord;->getTarget()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/Name;": [
        "Lorg/xbill/DNS/Name;->fromString()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/Name;->labels()I",
        "Lorg/xbill/DNS/Name;->toWireCanonical()V",
        "Lorg/xbill/DNS/Name;->appendFromString()V",
        "Lorg/xbill/DNS/Name;->setoffset()V",
        "Lorg/xbill/DNS/Name;->appendSafe()V",
        "Lorg/xbill/DNS/Name;->hashCode()I",
        "Lorg/xbill/DNS/Name;->append()V",
        "Lorg/xbill/DNS/Name;->concatenate()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/Name;->byteString()Ljava/lang/String;",
        "Lorg/xbill/DNS/Name;->toWire()V",
        "Lorg/xbill/DNS/Name;->isAbsolute()Z",
        "Lorg/xbill/DNS/Name;->setlabels()V",
        "Lorg/xbill/DNS/Name;->compareTo()I",
        "Lorg/xbill/DNS/Name;->fromConstantString()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/Name;->toString()Ljava/lang/String;",
        "Lorg/xbill/DNS/Name;->length()S",
        "Lorg/xbill/DNS/Name;->subdomain()Z",
        "Lorg/xbill/DNS/Name;->parseException()Lorg/xbill/DNS/TextParseException;",
        "Lorg/xbill/DNS/Name;->getlabels()I",
        "Lorg/xbill/DNS/Name;->copy()V",
        "Lorg/xbill/DNS/Name;->toWire()[B",
        "Lorg/xbill/DNS/Name;->offset()I",
        "Lorg/xbill/DNS/Name;->wild()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/Name;->isWild()Z",
        "Lorg/xbill/DNS/Name;->fromDNAME()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/Name;->toWireCanonical()[B",
        "Lorg/xbill/DNS/Name;->equals()Z"
    ],
    "Lorg/jivesoftware/smack/util/ReaderListener;": [
        "Lorg/jivesoftware/smack/util/ReaderListener;->read()V"
    ],
    "Lorg/jivesoftware/smack/util/Cache;": [
        "Lorg/jivesoftware/smack/util/Cache;->cullCache()V",
        "Lorg/jivesoftware/smack/util/Cache;->remove()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/Cache;->get()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/Cache;->deleteExpiredEntries()V",
        "Lorg/jivesoftware/smack/util/Cache;->put()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smack/util/Cache$LinkedList;": [
        "Lorg/jivesoftware/smack/util/Cache$LinkedList;->addFirst()Lorg/jivesoftware/smack/util/Cache$LinkedListNode;",
        "Lorg/jivesoftware/smack/util/Cache$LinkedList;->clear()V",
        "Lorg/jivesoftware/smack/util/Cache$LinkedList;->getLast()Lorg/jivesoftware/smack/util/Cache$LinkedListNode;"
    ],
    "Lorg/jivesoftware/smack/util/Cache$LinkedListNode;": [
        "Lorg/jivesoftware/smack/util/Cache$LinkedListNode;->remove()V"
    ],
    "Ljava/io/UnsupportedEncodingException;": [
        "Ljava/io/UnsupportedEncodingException;->getMessage()Ljava/lang/String;",
        "Ljava/io/UnsupportedEncodingException;->toString()Ljava/lang/String;",
        "Ljava/io/UnsupportedEncodingException;->printStackTrace()V"
    ],
    "Lorg/jivesoftware/smack/util/WriterListener;": [
        "Lorg/jivesoftware/smack/util/WriterListener;->write()V"
    ],
    "Ljava/util/zip/GZIPInputStream;": [
        "Ljava/util/zip/GZIPInputStream;->close()V",
        "Ljava/util/zip/GZIPInputStream;->read()I"
    ],
    "Ljava/io/IOException;": [
        "Ljava/io/IOException;->getMessage()Ljava/lang/String;",
        "Ljava/io/IOException;->toString()Ljava/lang/String;",
        "Ljava/io/IOException;->printStackTrace()V"
    ],
    "Lorg/jivesoftware/smack/util/Base64$InputStream;": [
        "Lorg/jivesoftware/smack/util/Base64$InputStream;->close()V",
        "Lorg/jivesoftware/smack/util/Base64$InputStream;->read()I"
    ],
    "Lorg/jivesoftware/smack/util/Base64$OutputStream;": [
        "Lorg/jivesoftware/smack/util/Base64$OutputStream;->close()V",
        "Lorg/jivesoftware/smack/util/Base64$OutputStream;->write()V"
    ],
    "Ljava/lang/ClassNotFoundException;": [
        "Ljava/lang/ClassNotFoundException;->printStackTrace()V"
    ],
    "Ljava/util/zip/GZIPOutputStream;": [
        "Ljava/util/zip/GZIPOutputStream;->close()V",
        "Ljava/util/zip/GZIPOutputStream;->write()V"
    ],
    "Lorg/jivesoftware/smack/util/collections/AbstractEmptyIterator;": [
        "Lorg/jivesoftware/smack/util/collections/AbstractEmptyIterator;->getValue()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/collections/AbstractEmptyIterator;->nextIndex()I",
        "Lorg/jivesoftware/smack/util/collections/AbstractEmptyIterator;->previous()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/collections/AbstractEmptyIterator;->add()V",
        "Lorg/jivesoftware/smack/util/collections/AbstractEmptyIterator;->hasPrevious()Z",
        "Lorg/jivesoftware/smack/util/collections/AbstractEmptyIterator;->reset()V",
        "Lorg/jivesoftware/smack/util/collections/AbstractEmptyIterator;->getKey()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/collections/AbstractEmptyIterator;->next()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/collections/AbstractEmptyIterator;->setValue()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/collections/AbstractEmptyIterator;->hasNext()Z",
        "Lorg/jivesoftware/smack/util/collections/AbstractEmptyIterator;->set()V",
        "Lorg/jivesoftware/smack/util/collections/AbstractEmptyIterator;->remove()V",
        "Lorg/jivesoftware/smack/util/collections/AbstractEmptyIterator;->previousIndex()I"
    ],
    "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;": [
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->createEntrySetIterator()Ljava/util/Iterator;",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->containsValue()Z",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->isEqualValue()Z",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->hashIndex()I",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->remove()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->addMapping()V",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->removeEntry()V",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->getEntry()Lorg/jivesoftware/smack/util/collections/AbstractHashedMap$HashEntry;",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->ensureCapacity()V",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->isEmpty()Z",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->destroyEntry()V",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->checkCapacity()V",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->mapIterator()Lorg/jivesoftware/smack/util/collections/MapIterator;",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->clear()V",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->calculateThreshold()I",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->createEntry()Lorg/jivesoftware/smack/util/collections/AbstractHashedMap$HashEntry;",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->put()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->size()I",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->calculateNewCapacity()I",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->removeMapping()V",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->addEntry()V",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->updateEntry()V",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->putAll()V",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->hash()I",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap;->isEqualKey()Z"
    ],
    "Ljava/util/AbstractMap;": [
        "Ljava/util/AbstractMap;->clone()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap$HashEntry;": [
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap$HashEntry;->getKey()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap$HashEntry;->setValue()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap$HashEntry;->access$000()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap$HashEntry;->access$100()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap$HashEntry;->access$002()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap$HashEntry;->getValue()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/collections/AbstractHashedMap$HashEntry;->access$102()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smack/util/collections/MapIterator;": [
        "Lorg/jivesoftware/smack/util/collections/MapIterator;->getValue()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/collections/MapIterator;->next()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/collections/MapIterator;->hasNext()Z"
    ],
    "Lorg/jivesoftware/smack/util/collections/AbstractKeyValue;": [
        "Lorg/jivesoftware/smack/util/collections/AbstractKeyValue;->getValue()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/collections/AbstractKeyValue;->getKey()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smack/util/collections/ReferenceMap;": [
        "Lorg/jivesoftware/smack/util/collections/ReferenceMap;->doReadObject()V",
        "Lorg/jivesoftware/smack/util/collections/ReferenceMap;->doWriteObject()V"
    ],
    "Lorg/jivesoftware/smack/util/collections/AbstractMapEntry;": [
        "Lorg/jivesoftware/smack/util/collections/AbstractMapEntry;->getKey()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/collections/AbstractMapEntry;->getValue()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smack/util/collections/KeyValue;": [
        "Lorg/jivesoftware/smack/util/collections/KeyValue;->getKey()Ljava/lang/Object;",
        "Lorg/jivesoftware/smack/util/collections/KeyValue;->getValue()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smack/util/collections/AbstractReferenceMap;": [
        "Lorg/jivesoftware/smack/util/collections/AbstractReferenceMap;->getEntry()Lorg/jivesoftware/smack/util/collections/AbstractHashedMap$HashEntry;",
        "Lorg/jivesoftware/smack/util/collections/AbstractReferenceMap;->verify()V",
        "Lorg/jivesoftware/smack/util/collections/AbstractReferenceMap;->purge()V",
        "Lorg/jivesoftware/smack/util/collections/AbstractReferenceMap;->hashIndex()I",
        "Lorg/jivesoftware/smack/util/collections/AbstractReferenceMap;->purgeBeforeRead()V",
        "Lorg/jivesoftware/smack/util/collections/AbstractReferenceMap;->purgeBeforeWrite()V",
        "Lorg/jivesoftware/smack/util/collections/AbstractReferenceMap;->calculateThreshold()I",
        "Lorg/jivesoftware/smack/util/collections/AbstractReferenceMap;->mapIterator()Lorg/jivesoftware/smack/util/collections/MapIterator;",
        "Lorg/jivesoftware/smack/util/collections/AbstractReferenceMap;->put()Ljava/lang/Object;"
    ],
    "Ljava/lang/ref/ReferenceQueue;": [
        "Ljava/lang/ref/ReferenceQueue;->poll()Ljava/lang/ref/Reference;"
    ],
    "Lorg/jivesoftware/smack/util/collections/AbstractReferenceMap$ReferenceEntry;": [
        "Lorg/jivesoftware/smack/util/collections/AbstractReferenceMap$ReferenceEntry;->purge()Z"
    ],
    "Lorg/jivesoftware/smack/provider/PrivacyProvider;": [
        "Lorg/jivesoftware/smack/provider/PrivacyProvider;->parseList()V",
        "Lorg/jivesoftware/smack/provider/PrivacyProvider;->parseItem()Lorg/jivesoftware/smack/packet/PrivacyItem;"
    ],
    "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;": [
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->getIdentityName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->discoverInfoByCaps()Lorg/jivesoftware/smackx/packet/DiscoverInfo;",
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->addFeature()V",
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->getOwnDiscoverInfo()Lorg/jivesoftware/smackx/packet/DiscoverInfo;",
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->discoverItems()Lorg/jivesoftware/smackx/packet/DiscoverItems;",
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->discoverInfo()Lorg/jivesoftware/smackx/packet/DiscoverInfo;",
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->publishItems()V",
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->getIdentityType()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->setNodeInformationProvider()V",
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->getNodeInformationProvider()Lorg/jivesoftware/smackx/NodeInformationProvider;",
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->isSendPresence()Z",
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->renewEntityCapsVersion()V",
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->cloneDiscoverInfo()Lorg/jivesoftware/smackx/packet/DiscoverInfo;",
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->getEntityCapsVersion()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->getInstanceFor()Lorg/jivesoftware/smackx/ServiceDiscoveryManager;",
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->removeFeature()V",
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->canPublishItems()Z",
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->includesFeature()Z",
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->addDiscoverInfoTo()V",
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->setEntityCapsManager()V",
        "Lorg/jivesoftware/smackx/ServiceDiscoveryManager;->getFeatures()Ljava/util/Iterator;"
    ],
    "Lorg/jivesoftware/smackx/packet/DiscoverInfo;": [
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo;->setNode()V",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo;->getIdentities()Ljava/util/Iterator;",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo;->getExtensionsXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo;->getFeatures()Ljava/util/Iterator;",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo;->getFrom()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo;->setType()V",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo;->addExtension()V",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo;->getNode()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo;->containsFeature()Z",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo;->setFrom()V",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo;->addIdentity()V",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo;->getExtensions()Ljava/util/Collection;",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo;->clone()Lorg/jivesoftware/smackx/packet/DiscoverInfo;",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo;->addFeature()V",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo;->setTo()V",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo;->setPacketID()V"
    ],
    "Lorg/jivesoftware/smackx/packet/DiscoverInfo$Identity;": [
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo$Identity;->getType()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo$Identity;->getCategory()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo$Identity;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo$Identity;->getName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo$Identity;->setType()V"
    ],
    "Lorg/jivesoftware/smackx/packet/DiscoverItems;": [
        "Lorg/jivesoftware/smackx/packet/DiscoverItems;->getNode()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DiscoverItems;->addItem()V",
        "Lorg/jivesoftware/smackx/packet/DiscoverItems;->setType()V",
        "Lorg/jivesoftware/smackx/packet/DiscoverItems;->setNode()V",
        "Lorg/jivesoftware/smackx/packet/DiscoverItems;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DiscoverItems;->getItems()Ljava/util/Iterator;",
        "Lorg/jivesoftware/smackx/packet/DiscoverItems;->setTo()V"
    ],
    "Lorg/jivesoftware/smackx/packet/DiscoverItems$Item;": [
        "Lorg/jivesoftware/smackx/packet/DiscoverItems$Item;->setNode()V",
        "Lorg/jivesoftware/smackx/packet/DiscoverItems$Item;->getNode()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DiscoverItems$Item;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DiscoverItems$Item;->setName()V",
        "Lorg/jivesoftware/smackx/packet/DiscoverItems$Item;->getName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DiscoverItems$Item;->getEntityID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DiscoverItems$Item;->setAction()V"
    ],
    "Lorg/jivesoftware/smackx/GatewayManager;": [
        "Lorg/jivesoftware/smackx/GatewayManager;->discoverGateway()V",
        "Lorg/jivesoftware/smackx/GatewayManager;->loadNonLocalGateways()V",
        "Lorg/jivesoftware/smackx/GatewayManager;->loadLocalGateways()V"
    ],
    "Lorg/jivesoftware/smackx/packet/DataForm;": [
        "Lorg/jivesoftware/smackx/packet/DataForm;->getTitle()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DataForm;->setTitle()V",
        "Lorg/jivesoftware/smackx/packet/DataForm;->getItems()Ljava/util/Iterator;",
        "Lorg/jivesoftware/smackx/packet/DataForm;->addInstruction()V",
        "Lorg/jivesoftware/smackx/packet/DataForm;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DataForm;->getFields()Ljava/util/Iterator;",
        "Lorg/jivesoftware/smackx/packet/DataForm;->getReportedData()Lorg/jivesoftware/smackx/packet/DataForm$ReportedData;",
        "Lorg/jivesoftware/smackx/packet/DataForm;->getNamespace()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DataForm;->setReportedData()V",
        "Lorg/jivesoftware/smackx/packet/DataForm;->getInstructions()Ljava/util/Iterator;",
        "Lorg/jivesoftware/smackx/packet/DataForm;->getType()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DataForm;->setInstructions()V",
        "Lorg/jivesoftware/smackx/packet/DataForm;->addField()V",
        "Lorg/jivesoftware/smackx/packet/DataForm;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DataForm;->addItem()V"
    ],
    "Lorg/jivesoftware/smackx/Form;": [
        "Lorg/jivesoftware/smackx/Form;->getFields()Ljava/util/Iterator;",
        "Lorg/jivesoftware/smackx/Form;->isSubmitType()Z",
        "Lorg/jivesoftware/smackx/Form;->setAnswer()V",
        "Lorg/jivesoftware/smackx/Form;->getFormFrom()Lorg/jivesoftware/smackx/Form;",
        "Lorg/jivesoftware/smackx/Form;->getType()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/Form;->getField()Lorg/jivesoftware/smackx/FormField;",
        "Lorg/jivesoftware/smackx/Form;->isFormType()Z",
        "Lorg/jivesoftware/smackx/Form;->getDataFormToSend()Lorg/jivesoftware/smackx/packet/DataForm;",
        "Lorg/jivesoftware/smackx/Form;->addField()V"
    ],
    "Lorg/jivesoftware/smackx/FormField;": [
        "Lorg/jivesoftware/smackx/FormField;->getOptions()Ljava/util/Iterator;",
        "Lorg/jivesoftware/smackx/FormField;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/FormField;->resetValues()V",
        "Lorg/jivesoftware/smackx/FormField;->addOption()V",
        "Lorg/jivesoftware/smackx/FormField;->setType()V",
        "Lorg/jivesoftware/smackx/FormField;->addValues()V",
        "Lorg/jivesoftware/smackx/FormField;->isRequired()Z",
        "Lorg/jivesoftware/smackx/FormField;->setDescription()V",
        "Lorg/jivesoftware/smackx/FormField;->getLabel()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/FormField;->getVariable()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/FormField;->getType()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/FormField;->setRequired()V",
        "Lorg/jivesoftware/smackx/FormField;->getValues()Ljava/util/Iterator;",
        "Lorg/jivesoftware/smackx/FormField;->getDescription()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/FormField;->setLabel()V",
        "Lorg/jivesoftware/smackx/FormField;->addValue()V"
    ],
    "Ljava/util/StringTokenizer;": [
        "Ljava/util/StringTokenizer;->hasMoreTokens()Z",
        "Ljava/util/StringTokenizer;->nextToken()Ljava/lang/String;",
        "Ljava/util/StringTokenizer;->countTokens()I"
    ],
    "Lorg/jivesoftware/smackx/EntityCapsManager;": [
        "Lorg/jivesoftware/smackx/EntityCapsManager;->getNode()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/EntityCapsManager;->notifyCapsVerListeners()V",
        "Lorg/jivesoftware/smackx/EntityCapsManager;->setCurrentCapsVersion()V",
        "Lorg/jivesoftware/smackx/EntityCapsManager;->getDiscoverInfoByNode()Lorg/jivesoftware/smackx/packet/DiscoverInfo;",
        "Lorg/jivesoftware/smackx/EntityCapsManager;->addCapsVerListener()V",
        "Lorg/jivesoftware/smackx/EntityCapsManager;->addPacketListener()V",
        "Lorg/jivesoftware/smackx/EntityCapsManager;->capsToHash()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/EntityCapsManager;->getCapsVersion()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/EntityCapsManager;->formFieldValuesToCaps()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/EntityCapsManager;->addDiscoverInfoByNode()V",
        "Lorg/jivesoftware/smackx/EntityCapsManager;->getNodeVersionByUser()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/EntityCapsManager;->addUserCapsNode()V",
        "Lorg/jivesoftware/smackx/EntityCapsManager;->calculateEntityCapsVersion()V",
        "Lorg/jivesoftware/smackx/EntityCapsManager;->cleanupDicsoverInfo()V",
        "Lorg/jivesoftware/smackx/EntityCapsManager;->getDiscoverInfoByUser()Lorg/jivesoftware/smackx/packet/DiscoverInfo;"
    ],
    "Ljava/util/SortedSet;": [
        "Ljava/util/SortedSet;->add()Z",
        "Ljava/util/SortedSet;->isEmpty()Z",
        "Ljava/util/SortedSet;->remove()Z",
        "Ljava/util/SortedSet;->iterator()Ljava/util/Iterator;",
        "Ljava/util/SortedSet;->first()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smackx/CapsVerListener;": [
        "Lorg/jivesoftware/smackx/CapsVerListener;->capsVerUpdated()V"
    ],
    "Lorg/jivesoftware/smackx/MessageEventManager;": [
        "Lorg/jivesoftware/smackx/MessageEventManager;->fireMessageEventRequestListeners()V",
        "Lorg/jivesoftware/smackx/MessageEventManager;->sendDeliveredNotification()V",
        "Lorg/jivesoftware/smackx/MessageEventManager;->destroy()V",
        "Lorg/jivesoftware/smackx/MessageEventManager;->fireMessageEventNotificationListeners()V"
    ],
    "Lorg/jivesoftware/smackx/packet/MessageEvent;": [
        "Lorg/jivesoftware/smackx/packet/MessageEvent;->setDisplayed()V",
        "Lorg/jivesoftware/smackx/packet/MessageEvent;->isDelivered()Z",
        "Lorg/jivesoftware/smackx/packet/MessageEvent;->isOffline()Z",
        "Lorg/jivesoftware/smackx/packet/MessageEvent;->isMessageEventRequest()Z",
        "Lorg/jivesoftware/smackx/packet/MessageEvent;->setOffline()V",
        "Lorg/jivesoftware/smackx/packet/MessageEvent;->setComposing()V",
        "Lorg/jivesoftware/smackx/packet/MessageEvent;->isCancelled()Z",
        "Lorg/jivesoftware/smackx/packet/MessageEvent;->isDisplayed()Z",
        "Lorg/jivesoftware/smackx/packet/MessageEvent;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MessageEvent;->setPacketID()V",
        "Lorg/jivesoftware/smackx/packet/MessageEvent;->setDelivered()V",
        "Lorg/jivesoftware/smackx/packet/MessageEvent;->getNamespace()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MessageEvent;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MessageEvent;->isComposing()Z",
        "Lorg/jivesoftware/smackx/packet/MessageEvent;->setCancelled()V"
    ],
    "Ljava/lang/NoSuchMethodException;": [
        "Ljava/lang/NoSuchMethodException;->printStackTrace()V"
    ],
    "Ljava/lang/reflect/InvocationTargetException;": [
        "Ljava/lang/reflect/InvocationTargetException;->printStackTrace()V",
        "Ljava/lang/reflect/InvocationTargetException;->getCause()Ljava/lang/Throwable;"
    ],
    "Ljava/lang/IllegalAccessException;": [
        "Ljava/lang/IllegalAccessException;->printStackTrace()V"
    ],
    "Ljava/lang/Enum;": [
        "Ljava/lang/Enum;->valueOf()Ljava/lang/Enum;"
    ],
    "[Lorg/jivesoftware/smackx/ChatState;": [
        "[Lorg/jivesoftware/smackx/ChatState;->clone()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smackx/packet/SharedGroupsInfo;": [
        "Lorg/jivesoftware/smackx/packet/SharedGroupsInfo;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/SharedGroupsInfo;->getGroups()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/packet/SharedGroupsInfo;->setType()V"
    ],
    "Lorg/jivesoftware/smackx/MultipleRecipientManager;": [
        "Lorg/jivesoftware/smackx/MultipleRecipientManager;->sendThroughService()V",
        "Lorg/jivesoftware/smackx/MultipleRecipientManager;->sendToIndividualRecipients()V",
        "Lorg/jivesoftware/smackx/MultipleRecipientManager;->getMultipleRecipientInfo()Lorg/jivesoftware/smackx/MultipleRecipientInfo;",
        "Lorg/jivesoftware/smackx/MultipleRecipientManager;->send()V",
        "Lorg/jivesoftware/smackx/MultipleRecipientManager;->getMultipleRecipienServiceAddress()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/MultipleRecipientInfo;": [
        "Lorg/jivesoftware/smackx/MultipleRecipientInfo;->getReplyAddress()Lorg/jivesoftware/smackx/packet/MultipleAddresses$Address;",
        "Lorg/jivesoftware/smackx/MultipleRecipientInfo;->getTOAddresses()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/MultipleRecipientInfo;->getReplyRoom()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/MultipleRecipientInfo;->shouldNotReply()Z",
        "Lorg/jivesoftware/smackx/MultipleRecipientInfo;->getCCAddresses()Ljava/util/List;"
    ],
    "Lorg/jivesoftware/smackx/packet/MultipleAddresses$Address;": [
        "Lorg/jivesoftware/smackx/packet/MultipleAddresses$Address;->access$500()V",
        "Lorg/jivesoftware/smackx/packet/MultipleAddresses$Address;->access$300()V",
        "Lorg/jivesoftware/smackx/packet/MultipleAddresses$Address;->access$200()V",
        "Lorg/jivesoftware/smackx/packet/MultipleAddresses$Address;->getType()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MultipleAddresses$Address;->access$600()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MultipleAddresses$Address;->getJid()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MultipleAddresses$Address;->access$400()V",
        "Lorg/jivesoftware/smackx/packet/MultipleAddresses$Address;->access$100()V"
    ],
    "Lorg/jivesoftware/smackx/packet/MultipleAddresses;": [
        "Lorg/jivesoftware/smackx/packet/MultipleAddresses;->getNamespace()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MultipleAddresses;->getAddressesOfType()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/packet/MultipleAddresses;->addAddress()V",
        "Lorg/jivesoftware/smackx/packet/MultipleAddresses;->setNoReply()V",
        "Lorg/jivesoftware/smackx/packet/MultipleAddresses;->getElementName()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/RosterExchangeManager;": [
        "Lorg/jivesoftware/smackx/RosterExchangeManager;->destroy()V",
        "Lorg/jivesoftware/smackx/RosterExchangeManager;->fireRosterExchangeListeners()V"
    ],
    "Lorg/jivesoftware/smackx/RosterExchangeListener;": [
        "Lorg/jivesoftware/smackx/RosterExchangeListener;->entriesReceived()V"
    ],
    "Lorg/jivesoftware/smackx/packet/RosterExchange;": [
        "Lorg/jivesoftware/smackx/packet/RosterExchange;->addRosterEntry()V",
        "Lorg/jivesoftware/smackx/packet/RosterExchange;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/RosterExchange;->getRosterEntries()Ljava/util/Iterator;",
        "Lorg/jivesoftware/smackx/packet/RosterExchange;->getNamespace()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/Gateway;": [
        "Lorg/jivesoftware/smackx/Gateway;->getIdentity()Lorg/jivesoftware/smackx/packet/DiscoverInfo$Identity;",
        "Lorg/jivesoftware/smackx/Gateway;->login()V",
        "Lorg/jivesoftware/smackx/Gateway;->register()V",
        "Lorg/jivesoftware/smackx/Gateway;->getRegisterInfo()Lorg/jivesoftware/smack/packet/Registration;",
        "Lorg/jivesoftware/smackx/Gateway;->refreshRegisterInfo()V",
        "Lorg/jivesoftware/smackx/Gateway;->discoverInfo()V",
        "Lorg/jivesoftware/smackx/Gateway;->getField()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/packet/OfflineMessageRequest;": [
        "Lorg/jivesoftware/smackx/packet/OfflineMessageRequest;->setPurge()V",
        "Lorg/jivesoftware/smackx/packet/OfflineMessageRequest;->getExtensionsXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/OfflineMessageRequest;->setFetch()V",
        "Lorg/jivesoftware/smackx/packet/OfflineMessageRequest;->addItem()V",
        "Lorg/jivesoftware/smackx/packet/OfflineMessageRequest;->getPacketID()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/packet/OfflineMessageRequest$Item;": [
        "Lorg/jivesoftware/smackx/packet/OfflineMessageRequest$Item;->setAction()V",
        "Lorg/jivesoftware/smackx/packet/OfflineMessageRequest$Item;->toXML()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/packet/DataForm$ReportedData;": [
        "Lorg/jivesoftware/smackx/packet/DataForm$ReportedData;->getFields()Ljava/util/Iterator;",
        "Lorg/jivesoftware/smackx/packet/DataForm$ReportedData;->toXML()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/packet/DataForm$Item;": [
        "Lorg/jivesoftware/smackx/packet/DataForm$Item;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DataForm$Item;->getFields()Ljava/util/Iterator;"
    ],
    "Lorg/jivesoftware/smackx/LastActivityManager;": [
        "Lorg/jivesoftware/smackx/LastActivityManager;->getIdleTime()J",
        "Lorg/jivesoftware/smackx/LastActivityManager;->resetIdleTime()V"
    ],
    "Lorg/jivesoftware/smackx/packet/LastActivity;": [
        "Lorg/jivesoftware/smackx/packet/LastActivity;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/LastActivity;->setType()V",
        "Lorg/jivesoftware/smackx/packet/LastActivity;->setMessage()V",
        "Lorg/jivesoftware/smackx/packet/LastActivity;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smackx/packet/LastActivity;->setTo()V"
    ],
    "Lorg/jivesoftware/smackx/PEPManager;": [
        "Lorg/jivesoftware/smackx/PEPManager;->destroy()V",
        "Lorg/jivesoftware/smackx/PEPManager;->firePEPListeners()V"
    ],
    "Lorg/jivesoftware/smackx/PEPListener;": [
        "Lorg/jivesoftware/smackx/PEPListener;->eventReceived()V"
    ],
    "Lorg/jivesoftware/smackx/packet/PEPPubSub;": [
        "Lorg/jivesoftware/smackx/packet/PEPPubSub;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/PEPPubSub;->getNamespace()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/PEPPubSub;->setType()V"
    ],
    "Lorg/jivesoftware/smackx/ChatStateManager;": [
        "Lorg/jivesoftware/smackx/ChatStateManager;->fireNewChatState()V",
        "Lorg/jivesoftware/smackx/ChatStateManager;->updateChatState()Z"
    ],
    "Lorg/jivesoftware/smackx/ChatStateListener;": [
        "Lorg/jivesoftware/smackx/ChatStateListener;->stateChanged()V"
    ],
    "Lorg/jivesoftware/smackx/packet/XHTMLExtension;": [
        "Lorg/jivesoftware/smackx/packet/XHTMLExtension;->addBody()V",
        "Lorg/jivesoftware/smackx/packet/XHTMLExtension;->getBodies()Ljava/util/Iterator;",
        "Lorg/jivesoftware/smackx/packet/XHTMLExtension;->getNamespace()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/XHTMLExtension;->getElementName()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/XHTMLManager;": [
        "Lorg/jivesoftware/smackx/XHTMLManager;->isServiceEnabled()Z"
    ],
    "Lorg/jivesoftware/smackx/FormField$Option;": [
        "Lorg/jivesoftware/smackx/FormField$Option;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/FormField$Option;->getValue()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/XHTMLText;": [
        "Lorg/jivesoftware/smackx/XHTMLText;->closeBodyTag()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/XHTMLText;->appendOpenBodyTag()V"
    ],
    "Lorg/jivesoftware/smackx/PrivateDataManager;": [
        "Lorg/jivesoftware/smackx/PrivateDataManager;->getProviderKey()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/PrivateDataManager;->setPrivateData()V",
        "Lorg/jivesoftware/smackx/PrivateDataManager;->getPrivateData()Lorg/jivesoftware/smackx/packet/PrivateData;",
        "Lorg/jivesoftware/smackx/PrivateDataManager;->addPrivateDataProvider()V"
    ],
    "Lorg/jivesoftware/smackx/PrivateDataManager$PrivateDataResult;": [
        "Lorg/jivesoftware/smackx/PrivateDataManager$PrivateDataResult;->getPrivateData()Lorg/jivesoftware/smackx/packet/PrivateData;"
    ],
    "Lorg/jivesoftware/smackx/packet/DelayInformation;": [
        "Lorg/jivesoftware/smackx/packet/DelayInformation;->getStamp()Ljava/util/Date;",
        "Lorg/jivesoftware/smackx/packet/DelayInformation;->getNamespace()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DelayInformation;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DelayInformation;->setFrom()V",
        "Lorg/jivesoftware/smackx/packet/DelayInformation;->getReason()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DelayInformation;->getFrom()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DelayInformation;->setReason()V"
    ],
    "Lorg/jivesoftware/smackx/packet/VCard;": [
        "Lorg/jivesoftware/smackx/packet/VCard;->hasNameField()Z",
        "Lorg/jivesoftware/smackx/packet/VCard;->copyFieldsFrom()V",
        "Lorg/jivesoftware/smackx/packet/VCard;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smackx/packet/VCard;->hasOrganizationFields()Z",
        "Lorg/jivesoftware/smackx/packet/VCard;->getFileBytes()[B",
        "Lorg/jivesoftware/smackx/packet/VCard;->hasContent()Z",
        "Lorg/jivesoftware/smackx/packet/VCard;->setTo()V",
        "Lorg/jivesoftware/smackx/packet/VCard;->setAvatar()V",
        "Lorg/jivesoftware/smackx/packet/VCard;->updateFN()V",
        "Lorg/jivesoftware/smackx/packet/VCard;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/VCard;->doLoad()V",
        "Lorg/jivesoftware/smackx/packet/VCard;->checkAuthenticated()V",
        "Lorg/jivesoftware/smackx/packet/VCard;->setType()V",
        "Lorg/jivesoftware/smackx/packet/VCard;->getBytes()[B",
        "Lorg/jivesoftware/smackx/packet/VCard;->getChildElementXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/VCard;->setFrom()V",
        "Lorg/jivesoftware/smackx/packet/VCard;->getAvatar()[B",
        "Lorg/jivesoftware/smackx/packet/VCard;->setField()V"
    ],
    "Ljava/lang/reflect/Modifier;": [
        "Ljava/lang/reflect/Modifier;->isFinal()Z"
    ],
    "Ljava/io/BufferedInputStream;": [
        "Ljava/io/BufferedInputStream;->reset()V",
        "Ljava/io/BufferedInputStream;->read()I",
        "Ljava/io/BufferedInputStream;->close()V",
        "Ljava/io/BufferedInputStream;->mark()V"
    ],
    "Ljava/security/NoSuchAlgorithmException;": [
        "Ljava/security/NoSuchAlgorithmException;->printStackTrace()V"
    ],
    "Lorg/jivesoftware/smackx/packet/VCard$VCardWriter;": [
        "Lorg/jivesoftware/smackx/packet/VCard$VCardWriter;->write()V"
    ],
    "Lorg/jivesoftware/smackx/packet/MUCAdmin$Item;": [
        "Lorg/jivesoftware/smackx/packet/MUCAdmin$Item;->setNick()V",
        "Lorg/jivesoftware/smackx/packet/MUCAdmin$Item;->getAffiliation()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCAdmin$Item;->getJid()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCAdmin$Item;->getNick()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCAdmin$Item;->getRole()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCAdmin$Item;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCAdmin$Item;->setReason()V",
        "Lorg/jivesoftware/smackx/packet/MUCAdmin$Item;->setActor()V",
        "Lorg/jivesoftware/smackx/packet/MUCAdmin$Item;->setJid()V"
    ],
    "Lorg/jivesoftware/smackx/packet/MUCAdmin;": [
        "Lorg/jivesoftware/smackx/packet/MUCAdmin;->setType()V",
        "Lorg/jivesoftware/smackx/packet/MUCAdmin;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCAdmin;->addItem()V",
        "Lorg/jivesoftware/smackx/packet/MUCAdmin;->getExtensionsXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCAdmin;->setTo()V",
        "Lorg/jivesoftware/smackx/packet/MUCAdmin;->getItems()Ljava/util/Iterator;",
        "Lorg/jivesoftware/smackx/packet/MUCAdmin;->getError()Lorg/jivesoftware/smack/packet/XMPPError;"
    ],
    "Lorg/jivesoftware/smackx/packet/DelayInfo;": [
        "Lorg/jivesoftware/smackx/packet/DelayInfo;->getNamespace()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DelayInfo;->getStamp()Ljava/util/Date;",
        "Lorg/jivesoftware/smackx/packet/DelayInfo;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DelayInfo;->getReason()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DelayInfo;->getFrom()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/packet/PEPItem;": [
        "Lorg/jivesoftware/smackx/packet/PEPItem;->getItemDetailsXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/PEPItem;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/PEPItem;->getNode()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/PEPItem;->getElementName()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/packet/MUCOwner$Item;": [
        "Lorg/jivesoftware/smackx/packet/MUCOwner$Item;->getNick()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCOwner$Item;->setNick()V",
        "Lorg/jivesoftware/smackx/packet/MUCOwner$Item;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCOwner$Item;->getRole()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCOwner$Item;->setReason()V",
        "Lorg/jivesoftware/smackx/packet/MUCOwner$Item;->setActor()V",
        "Lorg/jivesoftware/smackx/packet/MUCOwner$Item;->getJid()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCOwner$Item;->getAffiliation()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCOwner$Item;->setRole()V",
        "Lorg/jivesoftware/smackx/packet/MUCOwner$Item;->setJid()V"
    ],
    "Lorg/jivesoftware/smackx/packet/MUCOwner;": [
        "Lorg/jivesoftware/smackx/packet/MUCOwner;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smackx/packet/MUCOwner;->getExtensionsXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCOwner;->getDestroy()Lorg/jivesoftware/smackx/packet/MUCOwner$Destroy;",
        "Lorg/jivesoftware/smackx/packet/MUCOwner;->getItems()Ljava/util/Iterator;",
        "Lorg/jivesoftware/smackx/packet/MUCOwner;->setDestroy()V",
        "Lorg/jivesoftware/smackx/packet/MUCOwner;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCOwner;->setTo()V",
        "Lorg/jivesoftware/smackx/packet/MUCOwner;->addItem()V",
        "Lorg/jivesoftware/smackx/packet/MUCOwner;->setType()V",
        "Lorg/jivesoftware/smackx/packet/MUCOwner;->addExtension()V"
    ],
    "Lorg/jivesoftware/smackx/packet/MUCOwner$Destroy;": [
        "Lorg/jivesoftware/smackx/packet/MUCOwner$Destroy;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCOwner$Destroy;->setReason()V",
        "Lorg/jivesoftware/smackx/packet/MUCOwner$Destroy;->setJid()V"
    ],
    "Lorg/jivesoftware/smackx/packet/OfflineMessageInfo;": [
        "Lorg/jivesoftware/smackx/packet/OfflineMessageInfo;->getNode()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/OfflineMessageInfo;->getNamespace()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/OfflineMessageInfo;->getElementName()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/packet/PEPEvent;": [
        "Lorg/jivesoftware/smackx/packet/PEPEvent;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/PEPEvent;->getNamespace()Ljava/lang/String;"
    ],
    "Ljava/util/Calendar;": [
        "Ljava/util/Calendar;->clear()V",
        "Ljava/util/Calendar;->getInstance()Ljava/util/Calendar;",
        "Ljava/util/Calendar;->getTime()Ljava/util/Date;",
        "Ljava/util/Calendar;->before()Z",
        "Ljava/util/Calendar;->getTimeZone()Ljava/util/TimeZone;",
        "Ljava/util/Calendar;->getTimeInMillis()J",
        "Ljava/util/Calendar;->set()V",
        "Ljava/util/Calendar;->setTime()V",
        "Ljava/util/Calendar;->get()I"
    ],
    "Ljava/text/SimpleDateFormat;": [
        "Ljava/text/SimpleDateFormat;->setTimeZone()V",
        "Ljava/text/SimpleDateFormat;->format()Ljava/lang/String;",
        "Ljava/text/SimpleDateFormat;->parse()Ljava/util/Date;"
    ],
    "Lorg/jivesoftware/smackx/packet/DefaultPrivateData;": [
        "Lorg/jivesoftware/smackx/packet/DefaultPrivateData;->getValue()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DefaultPrivateData;->getNames()Ljava/util/Iterator;"
    ],
    "Lorg/jivesoftware/smackx/packet/MUCUser;": [
        "Lorg/jivesoftware/smackx/packet/MUCUser;->setItem()V",
        "Lorg/jivesoftware/smackx/packet/MUCUser;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCUser;->setStatus()V",
        "Lorg/jivesoftware/smackx/packet/MUCUser;->getItem()Lorg/jivesoftware/smackx/packet/MUCUser$Item;",
        "Lorg/jivesoftware/smackx/packet/MUCUser;->getPassword()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCUser;->setInvite()V",
        "Lorg/jivesoftware/smackx/packet/MUCUser;->getInvite()Lorg/jivesoftware/smackx/packet/MUCUser$Invite;",
        "Lorg/jivesoftware/smackx/packet/MUCUser;->setPassword()V",
        "Lorg/jivesoftware/smackx/packet/MUCUser;->setDestroy()V",
        "Lorg/jivesoftware/smackx/packet/MUCUser;->getDecline()Lorg/jivesoftware/smackx/packet/MUCUser$Decline;",
        "Lorg/jivesoftware/smackx/packet/MUCUser;->getNamespace()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCUser;->setDecline()V",
        "Lorg/jivesoftware/smackx/packet/MUCUser;->getStatus()Lorg/jivesoftware/smackx/packet/MUCUser$Status;",
        "Lorg/jivesoftware/smackx/packet/MUCUser;->getDestroy()Lorg/jivesoftware/smackx/packet/MUCUser$Destroy;"
    ],
    "Lorg/jivesoftware/smackx/packet/MUCUser$Invite;": [
        "Lorg/jivesoftware/smackx/packet/MUCUser$Invite;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCUser$Invite;->setTo()V",
        "Lorg/jivesoftware/smackx/packet/MUCUser$Invite;->setReason()V",
        "Lorg/jivesoftware/smackx/packet/MUCUser$Invite;->setFrom()V",
        "Lorg/jivesoftware/smackx/packet/MUCUser$Invite;->getFrom()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/packet/MUCUser$Decline;": [
        "Lorg/jivesoftware/smackx/packet/MUCUser$Decline;->setFrom()V",
        "Lorg/jivesoftware/smackx/packet/MUCUser$Decline;->setTo()V",
        "Lorg/jivesoftware/smackx/packet/MUCUser$Decline;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCUser$Decline;->setReason()V"
    ],
    "Lorg/jivesoftware/smackx/packet/MUCUser$Item;": [
        "Lorg/jivesoftware/smackx/packet/MUCUser$Item;->getRole()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCUser$Item;->setReason()V",
        "Lorg/jivesoftware/smackx/packet/MUCUser$Item;->setNick()V",
        "Lorg/jivesoftware/smackx/packet/MUCUser$Item;->getNick()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCUser$Item;->getActor()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCUser$Item;->setJid()V",
        "Lorg/jivesoftware/smackx/packet/MUCUser$Item;->getAffiliation()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCUser$Item;->getReason()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCUser$Item;->setActor()V",
        "Lorg/jivesoftware/smackx/packet/MUCUser$Item;->getJid()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCUser$Item;->toXML()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/packet/MUCUser$Status;": [
        "Lorg/jivesoftware/smackx/packet/MUCUser$Status;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCUser$Status;->getCode()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/packet/MUCUser$Destroy;": [
        "Lorg/jivesoftware/smackx/packet/MUCUser$Destroy;->setReason()V",
        "Lorg/jivesoftware/smackx/packet/MUCUser$Destroy;->setJid()V",
        "Lorg/jivesoftware/smackx/packet/MUCUser$Destroy;->toXML()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/packet/Nick;": [
        "Lorg/jivesoftware/smackx/packet/Nick;->getName()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/packet/AttentionExtension;": [
        "Lorg/jivesoftware/smackx/packet/AttentionExtension;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/AttentionExtension;->getNamespace()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/packet/SyncPacketSend;": [
        "Lorg/jivesoftware/smackx/packet/SyncPacketSend;->getReply()Lorg/jivesoftware/smack/packet/Packet;"
    ],
    "Lorg/jivesoftware/smackx/RemoteRosterEntry;": [
        "Lorg/jivesoftware/smackx/RemoteRosterEntry;->toXML()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/packet/StreamInitiation;": [
        "Lorg/jivesoftware/smackx/packet/StreamInitiation;->getType()Lorg/jivesoftware/smack/packet/IQ$Type;",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation;->setFile()V",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation;->setTo()V",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation;->getFeatureNegotiationForm()Lorg/jivesoftware/smackx/packet/DataForm;",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation;->getMimeType()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation;->getFile()Lorg/jivesoftware/smackx/packet/StreamInitiation$File;",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation;->getSessionID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation;->setSesssionID()V",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation;->setFeatureNegotiationForm()V",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation;->setFrom()V",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation;->setType()V",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation;->getFrom()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation;->setMimeType()V",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation;->setPacketID()V",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation;->getTo()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/packet/StreamInitiation$File;": [
        "Lorg/jivesoftware/smackx/packet/StreamInitiation$File;->setDate()V",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation$File;->getName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation$File;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation$File;->getSize()J",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation$File;->getDesc()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation$File;->setRanged()V",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation$File;->setHash()V",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation$File;->setDesc()V"
    ],
    "Lorg/jivesoftware/smackx/packet/StreamInitiation$Feature;": [
        "Lorg/jivesoftware/smackx/packet/StreamInitiation$Feature;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/StreamInitiation$Feature;->getData()Lorg/jivesoftware/smackx/packet/DataForm;"
    ],
    "Lorg/jivesoftware/smackx/ChatState;": [
        "Lorg/jivesoftware/smackx/ChatState;->name()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/packet/ChatStateExtension;": [
        "Lorg/jivesoftware/smackx/packet/ChatStateExtension;->getNamespace()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/ChatStateExtension;->getElementName()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/packet/MUCInitialPresence;": [
        "Lorg/jivesoftware/smackx/packet/MUCInitialPresence;->getHistory()Lorg/jivesoftware/smackx/packet/MUCInitialPresence$History;",
        "Lorg/jivesoftware/smackx/packet/MUCInitialPresence;->getNamespace()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCInitialPresence;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCInitialPresence;->setHistory()V",
        "Lorg/jivesoftware/smackx/packet/MUCInitialPresence;->getPassword()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/MUCInitialPresence;->setPassword()V"
    ],
    "Lorg/jivesoftware/smackx/packet/MUCInitialPresence$History;": [
        "Lorg/jivesoftware/smackx/packet/MUCInitialPresence$History;->setSince()V",
        "Lorg/jivesoftware/smackx/packet/MUCInitialPresence$History;->setMaxStanzas()V",
        "Lorg/jivesoftware/smackx/packet/MUCInitialPresence$History;->setMaxChars()V",
        "Lorg/jivesoftware/smackx/packet/MUCInitialPresence$History;->setSeconds()V",
        "Lorg/jivesoftware/smackx/packet/MUCInitialPresence$History;->toXML()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/packet/HeadersExtension;": [
        "Lorg/jivesoftware/smackx/packet/HeadersExtension;->getNamespace()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/HeadersExtension;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/HeadersExtension;->getHeaders()Ljava/util/Collection;"
    ],
    "Lorg/jivesoftware/smackx/packet/Header;": [
        "Lorg/jivesoftware/smackx/packet/Header;->getValue()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/Header;->toXML()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/packet/AdHocCommandData;": [
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->setName()V",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->setSessionID()V",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->getTo()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->setTo()V",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->addNote()V",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->setNode()V",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->setPacketID()V",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->getNotes()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->setId()V",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->setError()V",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->getStatus()Lorg/jivesoftware/smackx/commands/AdHocCommand$Status;",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->setAction()V",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->setForm()V",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->getFrom()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->getSessionID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->addAction()V",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->getType()Lorg/jivesoftware/smack/packet/IQ$Type;",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->getChildElementXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->setExecuteAction()V",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->setStatus()V",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->getForm()Lorg/jivesoftware/smackx/packet/DataForm;",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->getName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->getAction()Lorg/jivesoftware/smackx/commands/AdHocCommand$Action;",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->getActions()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->getExecuteAction()Lorg/jivesoftware/smackx/commands/AdHocCommand$Action;",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->getNode()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/AdHocCommandData;->setType()V"
    ],
    "Lorg/jivesoftware/smackx/commands/AdHocCommandNote;": [
        "Lorg/jivesoftware/smackx/commands/AdHocCommandNote;->getType()Lorg/jivesoftware/smackx/commands/AdHocCommandNote$Type;",
        "Lorg/jivesoftware/smackx/commands/AdHocCommandNote;->getValue()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/commands/AdHocCommandNote$Type;": [
        "Lorg/jivesoftware/smackx/commands/AdHocCommandNote$Type;->valueOf()Lorg/jivesoftware/smackx/commands/AdHocCommandNote$Type;",
        "Lorg/jivesoftware/smackx/commands/AdHocCommandNote$Type;->toString()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/packet/DiscoverInfo$Feature;": [
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo$Feature;->getVar()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/packet/DiscoverInfo$Feature;->toXML()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/commands/AdHocCommand;": [
        "Lorg/jivesoftware/smackx/commands/AdHocCommand;->setData()V",
        "Lorg/jivesoftware/smackx/commands/AdHocCommand;->getActions()Ljava/util/List;"
    ],
    "Lorg/jivesoftware/smackx/commands/LocalCommand;": [
        "Lorg/jivesoftware/smackx/commands/LocalCommand;->execute()V",
        "Lorg/jivesoftware/smackx/commands/LocalCommand;->setSessionID()V",
        "Lorg/jivesoftware/smackx/commands/LocalCommand;->getCreationDate()J",
        "Lorg/jivesoftware/smackx/commands/LocalCommand;->setName()V",
        "Lorg/jivesoftware/smackx/commands/LocalCommand;->incrementStage()V",
        "Lorg/jivesoftware/smackx/commands/LocalCommand;->getExecuteAction()Lorg/jivesoftware/smackx/commands/AdHocCommand$Action;",
        "Lorg/jivesoftware/smackx/commands/LocalCommand;->complete()V",
        "Lorg/jivesoftware/smackx/commands/LocalCommand;->cancel()V",
        "Lorg/jivesoftware/smackx/commands/LocalCommand;->decrementStage()V",
        "Lorg/jivesoftware/smackx/commands/LocalCommand;->prev()V",
        "Lorg/jivesoftware/smackx/commands/LocalCommand;->setNode()V",
        "Lorg/jivesoftware/smackx/commands/LocalCommand;->getData()Lorg/jivesoftware/smackx/packet/AdHocCommandData;",
        "Lorg/jivesoftware/smackx/commands/LocalCommand;->next()V",
        "Lorg/jivesoftware/smackx/commands/LocalCommand;->isLastStage()Z",
        "Lorg/jivesoftware/smackx/commands/LocalCommand;->hasPermission()Z",
        "Lorg/jivesoftware/smackx/commands/LocalCommand;->setData()V",
        "Lorg/jivesoftware/smackx/commands/LocalCommand;->isValidAction()Z"
    ],
    "Lorg/jivesoftware/smackx/commands/AdHocCommandManager;": [
        "Lorg/jivesoftware/smackx/commands/AdHocCommandManager;->processAdHocCommand()V",
        "Lorg/jivesoftware/smackx/commands/AdHocCommandManager;->getRegisteredCommands()Ljava/util/Collection;",
        "Lorg/jivesoftware/smackx/commands/AdHocCommandManager;->newInstanceOfCmd()Lorg/jivesoftware/smackx/commands/LocalCommand;",
        "Lorg/jivesoftware/smackx/commands/AdHocCommandManager;->registerCommand()V",
        "Lorg/jivesoftware/smackx/commands/AdHocCommandManager;->respondError()V"
    ],
    "Lorg/jivesoftware/smackx/commands/AdHocCommandManager$AdHocCommandInfo;": [
        "Lorg/jivesoftware/smackx/commands/AdHocCommandManager$AdHocCommandInfo;->getName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/commands/AdHocCommandManager$AdHocCommandInfo;->getCommandInstance()Lorg/jivesoftware/smackx/commands/LocalCommand;",
        "Lorg/jivesoftware/smackx/commands/AdHocCommandManager$AdHocCommandInfo;->getOwnerJID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/commands/AdHocCommandManager$AdHocCommandInfo;->getNode()Ljava/lang/String;"
    ],
    "Ljava/lang/InstantiationException;": [
        "Ljava/lang/InstantiationException;->printStackTrace()V"
    ],
    "Lorg/jivesoftware/smackx/commands/AdHocCommand$Action;": [
        "Lorg/jivesoftware/smackx/commands/AdHocCommand$Action;->equals()Z",
        "Lorg/jivesoftware/smackx/commands/AdHocCommand$Action;->valueOf()Lorg/jivesoftware/smackx/commands/AdHocCommand$Action;"
    ],
    "Lorg/jivesoftware/smackx/commands/AdHocCommand$SpecificErrorCondition;": [
        "Lorg/jivesoftware/smackx/commands/AdHocCommand$SpecificErrorCondition;->values()[Lorg/jivesoftware/smackx/commands/AdHocCommand$SpecificErrorCondition;",
        "Lorg/jivesoftware/smackx/commands/AdHocCommand$SpecificErrorCondition;->toString()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/commands/RemoteCommand;": [
        "Lorg/jivesoftware/smackx/commands/RemoteCommand;->executeAction()V",
        "Lorg/jivesoftware/smackx/commands/RemoteCommand;->getOwnerJID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/commands/RemoteCommand;->setNode()V",
        "Lorg/jivesoftware/smackx/commands/RemoteCommand;->getNode()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/provider/MUCAdminProvider;": [
        "Lorg/jivesoftware/smackx/provider/MUCAdminProvider;->parseItem()Lorg/jivesoftware/smackx/packet/MUCAdmin$Item;"
    ],
    "Lorg/jivesoftware/smackx/provider/MUCOwnerProvider;": [
        "Lorg/jivesoftware/smackx/provider/MUCOwnerProvider;->parseItem()Lorg/jivesoftware/smackx/packet/MUCOwner$Item;",
        "Lorg/jivesoftware/smackx/provider/MUCOwnerProvider;->parseDestroy()Lorg/jivesoftware/smackx/packet/MUCOwner$Destroy;"
    ],
    "Lorg/jivesoftware/smackx/provider/DataFormProvider;": [
        "Lorg/jivesoftware/smackx/provider/DataFormProvider;->parseExtension()Lorg/jivesoftware/smack/packet/PacketExtension;",
        "Lorg/jivesoftware/smackx/provider/DataFormProvider;->parseOption()Lorg/jivesoftware/smackx/FormField$Option;",
        "Lorg/jivesoftware/smackx/provider/DataFormProvider;->parseField()Lorg/jivesoftware/smackx/FormField;",
        "Lorg/jivesoftware/smackx/provider/DataFormProvider;->parseItem()Lorg/jivesoftware/smackx/packet/DataForm$Item;",
        "Lorg/jivesoftware/smackx/provider/DataFormProvider;->parseReported()Lorg/jivesoftware/smackx/packet/DataForm$ReportedData;"
    ],
    "Lorg/jivesoftware/smackx/provider/EmbeddedExtensionProvider;": [
        "Lorg/jivesoftware/smackx/provider/EmbeddedExtensionProvider;->createReturnExtension()Lorg/jivesoftware/smack/packet/PacketExtension;"
    ],
    "Lorg/jivesoftware/smackx/provider/DelayInformationProvider;": [
        "Lorg/jivesoftware/smackx/provider/DelayInformationProvider;->parseExtension()Lorg/jivesoftware/smack/packet/PacketExtension;",
        "Lorg/jivesoftware/smackx/provider/DelayInformationProvider;->determineNearestDate()Ljava/util/Calendar;",
        "Lorg/jivesoftware/smackx/provider/DelayInformationProvider;->handleDateWithMissingLeadingZeros()Ljava/util/Date;",
        "Lorg/jivesoftware/smackx/provider/DelayInformationProvider;->filterDatesBefore()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/provider/DelayInformationProvider;->parseXEP91Date()Ljava/util/Calendar;"
    ],
    "Ljavax/xml/parsers/DocumentBuilderFactory;": [
        "Ljavax/xml/parsers/DocumentBuilderFactory;->newDocumentBuilder()Ljavax/xml/parsers/DocumentBuilder;",
        "Ljavax/xml/parsers/DocumentBuilderFactory;->newInstance()Ljavax/xml/parsers/DocumentBuilderFactory;"
    ],
    "Ljavax/xml/parsers/DocumentBuilder;": [
        "Ljavax/xml/parsers/DocumentBuilder;->parse()Lorg/w3c/dom/Document;"
    ],
    "Lorg/jivesoftware/smackx/provider/VCardProvider;": [
        "Lorg/jivesoftware/smackx/provider/VCardProvider;->createVCardFromXML()Lorg/jivesoftware/smackx/packet/VCard;"
    ],
    "Lorg/jivesoftware/smackx/commands/AdHocCommand$Status;": [
        "Lorg/jivesoftware/smackx/commands/AdHocCommand$Status;->toString()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/provider/MUCUserProvider;": [
        "Lorg/jivesoftware/smackx/provider/MUCUserProvider;->parseItem()Lorg/jivesoftware/smackx/packet/MUCUser$Item;",
        "Lorg/jivesoftware/smackx/provider/MUCUserProvider;->parseDecline()Lorg/jivesoftware/smackx/packet/MUCUser$Decline;",
        "Lorg/jivesoftware/smackx/provider/MUCUserProvider;->parseDestroy()Lorg/jivesoftware/smackx/packet/MUCUser$Destroy;",
        "Lorg/jivesoftware/smackx/provider/MUCUserProvider;->parseInvite()Lorg/jivesoftware/smackx/packet/MUCUser$Invite;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/FormType;": [
        "Lorg/jivesoftware/smackx/pubsub/FormType;->toString()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/SubscribeOptionFields;": [
        "Lorg/jivesoftware/smackx/pubsub/SubscribeOptionFields;->toString()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/SubscribeOptionFields;->getFieldName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/SubscribeOptionFields;->valueOf()Lorg/jivesoftware/smackx/pubsub/SubscribeOptionFields;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/SubscribeForm;": [
        "Lorg/jivesoftware/smackx/pubsub/SubscribeForm;->addField()V",
        "Lorg/jivesoftware/smackx/pubsub/SubscribeForm;->parseBoolean()Z",
        "Lorg/jivesoftware/smackx/pubsub/SubscribeForm;->getFieldValues()Ljava/util/Iterator;",
        "Lorg/jivesoftware/smackx/pubsub/SubscribeForm;->setAnswer()V",
        "Lorg/jivesoftware/smackx/pubsub/SubscribeForm;->getFieldValue()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/SubscribeForm;->getField()Lorg/jivesoftware/smackx/FormField;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/PresenceState;": [
        "Lorg/jivesoftware/smackx/pubsub/PresenceState;->toString()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/PresenceState;->valueOf()Lorg/jivesoftware/smackx/pubsub/PresenceState;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/Affiliation;": [
        "Lorg/jivesoftware/smackx/pubsub/Affiliation;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/Affiliation;->appendAttribute()V",
        "Lorg/jivesoftware/smackx/pubsub/Affiliation;->toXML()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/Affiliation$Type;": [
        "Lorg/jivesoftware/smackx/pubsub/Affiliation$Type;->valueOf()Lorg/jivesoftware/smackx/pubsub/Affiliation$Type;",
        "Lorg/jivesoftware/smackx/pubsub/Affiliation$Type;->toString()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/Subscription;": [
        "Lorg/jivesoftware/smackx/pubsub/Subscription;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/Subscription;->appendAttribute()V",
        "Lorg/jivesoftware/smackx/pubsub/Subscription;->getNode()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/Subscription$State;": [
        "Lorg/jivesoftware/smackx/pubsub/Subscription$State;->valueOf()Lorg/jivesoftware/smackx/pubsub/Subscription$State;",
        "Lorg/jivesoftware/smackx/pubsub/Subscription$State;->toString()Ljava/lang/String;"
    ],
    "[Lorg/jivesoftware/smackx/pubsub/AccessModel;": [
        "[Lorg/jivesoftware/smackx/pubsub/AccessModel;->clone()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/NodeExtension;": [
        "Lorg/jivesoftware/smackx/pubsub/NodeExtension;->getNode()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/NodeExtension;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/NodeExtension;->toXML()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/SubscriptionsExtension;": [
        "Lorg/jivesoftware/smackx/pubsub/SubscriptionsExtension;->getSubscriptions()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/pubsub/SubscriptionsExtension;->getNode()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/SubscriptionsExtension;->getElementName()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/packet/PubSubNamespace;": [
        "Lorg/jivesoftware/smackx/pubsub/packet/PubSubNamespace;->valueOfFromXmlns()Lorg/jivesoftware/smackx/pubsub/packet/PubSubNamespace;",
        "Lorg/jivesoftware/smackx/pubsub/packet/PubSubNamespace;->getXmlns()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/packet/PubSubNamespace;->valueOf()Lorg/jivesoftware/smackx/pubsub/packet/PubSubNamespace;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/FormNodeType;": [
        "Lorg/jivesoftware/smackx/pubsub/FormNodeType;->valueOfFromElementName()Lorg/jivesoftware/smackx/pubsub/FormNodeType;",
        "Lorg/jivesoftware/smackx/pubsub/FormNodeType;->toString()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/FormNodeType;->valueOf()Lorg/jivesoftware/smackx/pubsub/FormNodeType;",
        "Lorg/jivesoftware/smackx/pubsub/FormNodeType;->getNodeElement()Lorg/jivesoftware/smackx/pubsub/PubSubElementType;"
    ],
    "[Lorg/jivesoftware/smackx/pubsub/FormNodeType;": [
        "[Lorg/jivesoftware/smackx/pubsub/FormNodeType;->clone()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/PubSubElementType;": [
        "Lorg/jivesoftware/smackx/pubsub/PubSubElementType;->getNamespace()Lorg/jivesoftware/smackx/pubsub/packet/PubSubNamespace;",
        "Lorg/jivesoftware/smackx/pubsub/PubSubElementType;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/PubSubElementType;->valueOf()Lorg/jivesoftware/smackx/pubsub/PubSubElementType;",
        "Lorg/jivesoftware/smackx/pubsub/PubSubElementType;->valueOfFromElemName()Lorg/jivesoftware/smackx/pubsub/PubSubElementType;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/Node;": [
        "Lorg/jivesoftware/smackx/pubsub/Node;->sendPubsubPacket()Lorg/jivesoftware/smack/packet/Packet;",
        "Lorg/jivesoftware/smackx/pubsub/Node;->getSubscriptionOptions()Lorg/jivesoftware/smackx/pubsub/SubscribeForm;",
        "Lorg/jivesoftware/smackx/pubsub/Node;->unsubscribe()V",
        "Lorg/jivesoftware/smackx/pubsub/Node;->getSubscriptionIds()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/pubsub/Node;->createPubsubPacket()Lorg/jivesoftware/smackx/pubsub/packet/PubSub;",
        "Lorg/jivesoftware/smackx/pubsub/Node;->setTo()V",
        "Lorg/jivesoftware/smackx/pubsub/Node;->getId()Ljava/lang/String;"
    ],
    "Ljava/util/concurrent/ConcurrentHashMap;": [
        "Ljava/util/concurrent/ConcurrentHashMap;->remove()Ljava/lang/Object;",
        "Ljava/util/concurrent/ConcurrentHashMap;->put()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/EventElementType;": [
        "Lorg/jivesoftware/smackx/pubsub/EventElementType;->valueOf()Lorg/jivesoftware/smackx/pubsub/EventElementType;",
        "Lorg/jivesoftware/smackx/pubsub/EventElementType;->toString()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/PubSubManager;": [
        "Lorg/jivesoftware/smackx/pubsub/PubSubManager;->sendPubsubPacket()Lorg/jivesoftware/smack/packet/Packet;",
        "Lorg/jivesoftware/smackx/pubsub/PubSubManager;->createNode()Lorg/jivesoftware/smackx/pubsub/Node;",
        "Lorg/jivesoftware/smackx/pubsub/PubSubManager;->createPubsubPacket()Lorg/jivesoftware/smackx/pubsub/packet/PubSub;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/packet/SyncPacketSend;": [
        "Lorg/jivesoftware/smackx/pubsub/packet/SyncPacketSend;->getReply()Lorg/jivesoftware/smack/packet/Packet;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/packet/PubSub;": [
        "Lorg/jivesoftware/smackx/pubsub/packet/PubSub;->getNamespace()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/packet/PubSub;->getExtension()Lorg/jivesoftware/smack/packet/PacketExtension;",
        "Lorg/jivesoftware/smackx/pubsub/packet/PubSub;->addExtension()V",
        "Lorg/jivesoftware/smackx/pubsub/packet/PubSub;->setPubSubNamespace()V",
        "Lorg/jivesoftware/smackx/pubsub/packet/PubSub;->setTo()V",
        "Lorg/jivesoftware/smackx/pubsub/packet/PubSub;->setType()V",
        "Lorg/jivesoftware/smackx/pubsub/packet/PubSub;->getExtensionsXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/packet/PubSub;->getElementName()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/util/NodeUtils;": [
        "Lorg/jivesoftware/smackx/pubsub/util/NodeUtils;->getFormFromPacket()Lorg/jivesoftware/smackx/pubsub/ConfigureForm;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/FormNode;": [
        "Lorg/jivesoftware/smackx/pubsub/FormNode;->getNode()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/FormNode;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/FormNode;->getForm()Lorg/jivesoftware/smackx/Form;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/PublishItem;": [
        "Lorg/jivesoftware/smackx/pubsub/PublishItem;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/PublishItem;->getNode()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/Item;": [
        "Lorg/jivesoftware/smackx/pubsub/Item;->toXML()Ljava/lang/String;"
    ],
    "[Lorg/jivesoftware/smackx/pubsub/FormType;": [
        "[Lorg/jivesoftware/smackx/pubsub/FormType;->clone()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/ConfigureNodeFields;": [
        "Lorg/jivesoftware/smackx/pubsub/ConfigureNodeFields;->getFieldName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/ConfigureNodeFields;->toString()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/ConfigureForm;": [
        "Lorg/jivesoftware/smackx/pubsub/ConfigureForm;->getFieldValues()Ljava/util/Iterator;",
        "Lorg/jivesoftware/smackx/pubsub/ConfigureForm;->getField()Lorg/jivesoftware/smackx/FormField;",
        "Lorg/jivesoftware/smackx/pubsub/ConfigureForm;->getListSingle()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/pubsub/ConfigureForm;->parseBoolean()Z",
        "Lorg/jivesoftware/smackx/pubsub/ConfigureForm;->addField()V",
        "Lorg/jivesoftware/smackx/pubsub/ConfigureForm;->getFieldValue()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/ConfigureForm;->getFields()Ljava/util/Iterator;",
        "Lorg/jivesoftware/smackx/pubsub/ConfigureForm;->setAnswer()V",
        "Lorg/jivesoftware/smackx/pubsub/ConfigureForm;->getDataFormToSend()Lorg/jivesoftware/smackx/packet/DataForm;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/AccessModel;": [
        "Lorg/jivesoftware/smackx/pubsub/AccessModel;->toString()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/AccessModel;->valueOf()Lorg/jivesoftware/smackx/pubsub/AccessModel;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/ChildrenAssociationPolicy;": [
        "Lorg/jivesoftware/smackx/pubsub/ChildrenAssociationPolicy;->valueOf()Lorg/jivesoftware/smackx/pubsub/ChildrenAssociationPolicy;",
        "Lorg/jivesoftware/smackx/pubsub/ChildrenAssociationPolicy;->toString()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/ItemReply;": [
        "Lorg/jivesoftware/smackx/pubsub/ItemReply;->valueOf()Lorg/jivesoftware/smackx/pubsub/ItemReply;",
        "Lorg/jivesoftware/smackx/pubsub/ItemReply;->toString()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/NodeType;": [
        "Lorg/jivesoftware/smackx/pubsub/NodeType;->toString()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/NodeType;->valueOf()Lorg/jivesoftware/smackx/pubsub/NodeType;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/PublishModel;": [
        "Lorg/jivesoftware/smackx/pubsub/PublishModel;->valueOf()Lorg/jivesoftware/smackx/pubsub/PublishModel;",
        "Lorg/jivesoftware/smackx/pubsub/PublishModel;->toString()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/LeafNode;": [
        "Lorg/jivesoftware/smackx/pubsub/LeafNode;->createPubsubPacket()Lorg/jivesoftware/smackx/pubsub/packet/PubSub;",
        "Lorg/jivesoftware/smackx/pubsub/LeafNode;->deleteItem()V",
        "Lorg/jivesoftware/smackx/pubsub/LeafNode;->setTo()V",
        "Lorg/jivesoftware/smackx/pubsub/LeafNode;->getId()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/LeafNode;->send()V",
        "Lorg/jivesoftware/smackx/pubsub/LeafNode;->publish()V"
    ],
    "Lorg/jivesoftware/smackx/pubsub/ItemsExtension;": [
        "Lorg/jivesoftware/smackx/pubsub/ItemsExtension;->getNode()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/ItemsExtension;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/ItemsExtension;->getItems()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/pubsub/ItemsExtension;->toXML()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/GetItemsRequest;": [
        "Lorg/jivesoftware/smackx/pubsub/GetItemsRequest;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/GetItemsRequest;->getSubscriptionId()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/GetItemsRequest;->getMaxItems()I",
        "Lorg/jivesoftware/smackx/pubsub/GetItemsRequest;->getNode()Ljava/lang/String;"
    ],
    "[Lorg/jivesoftware/smackx/pubsub/NodeType;": [
        "[Lorg/jivesoftware/smackx/pubsub/NodeType;->clone()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/PayloadItem;": [
        "Lorg/jivesoftware/smackx/pubsub/PayloadItem;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/PayloadItem;->getId()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/SimplePayload;": [
        "Lorg/jivesoftware/smackx/pubsub/SimplePayload;->toXML()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/ItemPublishEvent;": [
        "Lorg/jivesoftware/smackx/pubsub/ItemPublishEvent;->isDelayed()Z",
        "Lorg/jivesoftware/smackx/pubsub/ItemPublishEvent;->getSubscriptions()Ljava/util/List;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/SubscribeExtension;": [
        "Lorg/jivesoftware/smackx/pubsub/SubscribeExtension;->getJid()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/SubscribeExtension;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/SubscribeExtension;->getNode()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/AffiliationsExtension;": [
        "Lorg/jivesoftware/smackx/pubsub/AffiliationsExtension;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/AffiliationsExtension;->getAffiliations()Ljava/util/List;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/ItemDeleteEvent;": [
        "Lorg/jivesoftware/smackx/pubsub/ItemDeleteEvent;->getSubscriptions()Ljava/util/List;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/ItemsExtension$ItemsElementType;": [
        "Lorg/jivesoftware/smackx/pubsub/ItemsExtension$ItemsElementType;->getNodeElement()Lorg/jivesoftware/smackx/pubsub/PubSubElementType;",
        "Lorg/jivesoftware/smackx/pubsub/ItemsExtension$ItemsElementType;->getElementAttribute()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/UnsubscribeExtension;": [
        "Lorg/jivesoftware/smackx/pubsub/UnsubscribeExtension;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/UnsubscribeExtension;->getNode()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/util/XmlUtils;": [
        "Lorg/jivesoftware/smackx/pubsub/util/XmlUtils;->appendAttribute()V"
    ],
    "[Lorg/jivesoftware/smackx/pubsub/PubSubElementType;": [
        "[Lorg/jivesoftware/smackx/pubsub/PubSubElementType;->clone()Ljava/lang/Object;"
    ],
    "[Lorg/jivesoftware/smackx/pubsub/ConfigureNodeFields;": [
        "[Lorg/jivesoftware/smackx/pubsub/ConfigureNodeFields;->clone()Ljava/lang/Object;"
    ],
    "[Lorg/jivesoftware/smackx/pubsub/PresenceState;": [
        "[Lorg/jivesoftware/smackx/pubsub/PresenceState;->clone()Ljava/lang/Object;"
    ],
    "[Lorg/jivesoftware/smackx/pubsub/ChildrenAssociationPolicy;": [
        "[Lorg/jivesoftware/smackx/pubsub/ChildrenAssociationPolicy;->clone()Ljava/lang/Object;"
    ],
    "[Lorg/jivesoftware/smackx/pubsub/PublishModel;": [
        "[Lorg/jivesoftware/smackx/pubsub/PublishModel;->clone()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/OptionsExtension;": [
        "Lorg/jivesoftware/smackx/pubsub/OptionsExtension;->getNode()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/pubsub/OptionsExtension;->getElementName()Ljava/lang/String;"
    ],
    "[Lorg/jivesoftware/smackx/pubsub/EventElementType;": [
        "[Lorg/jivesoftware/smackx/pubsub/EventElementType;->clone()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/EventElement;": [
        "Lorg/jivesoftware/smackx/pubsub/EventElement;->getEvent()Lorg/jivesoftware/smackx/pubsub/NodeExtension;"
    ],
    "[Lorg/jivesoftware/smackx/pubsub/ItemReply;": [
        "[Lorg/jivesoftware/smackx/pubsub/ItemReply;->clone()Ljava/lang/Object;"
    ],
    "[Lorg/jivesoftware/smackx/pubsub/SubscribeOptionFields;": [
        "[Lorg/jivesoftware/smackx/pubsub/SubscribeOptionFields;->clone()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smackx/pubsub/ConfigurationEvent;": [
        "Lorg/jivesoftware/smackx/pubsub/ConfigurationEvent;->getConfiguration()Lorg/jivesoftware/smackx/pubsub/ConfigureForm;"
    ],
    "[Lorg/jivesoftware/smackx/pubsub/packet/PubSubNamespace;": [
        "[Lorg/jivesoftware/smackx/pubsub/packet/PubSubNamespace;->clone()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/ibb/InitiationListener;": [
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InitiationListener;->shutdown()V",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InitiationListener;->processRequest()V",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InitiationListener;->getFilter()Lorg/jivesoftware/smack/filter/PacketFilter;"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/ibb/packet/Open;": [
        "Lorg/jivesoftware/smackx/bytestreams/ibb/packet/Open;->setTo()V",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/packet/Open;->getBlockSize()I",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/packet/Open;->getStanza()Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager$StanzaType;",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/packet/Open;->getFrom()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/packet/Open;->setType()V",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/packet/Open;->getSessionID()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager;": [
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager;->replyItemNotFoundPacket()V",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager;->getAllRequestListeners()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager;->getConnection()Lorg/jivesoftware/smack/Connection;",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager;->disableService()V",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager;->getSessions()Ljava/util/Map;",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager;->replyRejectPacket()V",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager;->getIgnoredBytestreamRequests()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager;->ignoreBytestreamRequestOnce()V",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager;->replyResourceConstraintPacket()V",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager;->getByteStreamManager()Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager;",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager;->establishSession()Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamSession;",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager;->getNextSessionID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager;->getMaximumBlockSize()I",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager;->getUserListener()Lorg/jivesoftware/smackx/bytestreams/BytestreamListener;"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/BytestreamListener;": [
        "Lorg/jivesoftware/smackx/bytestreams/BytestreamListener;->incomingBytestreamRequest()V"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamRequest;": [
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamRequest;->accept()Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamSession;"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamListener;": [
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamListener;->incomingBytestreamRequest()V"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/ibb/packet/Data;": [
        "Lorg/jivesoftware/smackx/bytestreams/ibb/packet/Data;->getDataPacketExtension()Lorg/jivesoftware/smackx/bytestreams/ibb/packet/DataPacketExtension;",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/packet/Data;->addExtension()V",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/packet/Data;->setType()V"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/ibb/packet/DataPacketExtension;": [
        "Lorg/jivesoftware/smackx/bytestreams/ibb/packet/DataPacketExtension;->getSessionID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/packet/DataPacketExtension;->getElementName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/packet/DataPacketExtension;->toXML()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager$StanzaType;": [
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager$StanzaType;->toString()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager$StanzaType;->valueOf()Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager$StanzaType;",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamManager$StanzaType;->ordinal()I"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamSession;": [
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamSession;->getInputStream()Ljava/io/InputStream;",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamSession;->getOutputStream()Ljava/io/OutputStream;",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamSession;->closeByPeer()V",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamSession;->setCloseBothStreamsEnabled()V",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamSession;->closeByLocal()V"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamSession$IBBInputStream;": [
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamSession$IBBInputStream;->access$500()V",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamSession$IBBInputStream;->access$700()Z",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamSession$IBBInputStream;->access$600()V",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamSession$IBBInputStream;->access$400()I",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamSession$IBBInputStream;->access$402()I"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamSession$IBBOutputStream;": [
        "Lorg/jivesoftware/smackx/bytestreams/ibb/InBandBytestreamSession$IBBOutputStream;->closeInternal()V"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/ibb/packet/Close;": [
        "Lorg/jivesoftware/smackx/bytestreams/ibb/packet/Close;->setTo()V",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/packet/Close;->getSessionID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/bytestreams/ibb/packet/Close;->setType()V"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/ibb/DataListener;": [
        "Lorg/jivesoftware/smackx/bytestreams/ibb/DataListener;->getFilter()Lorg/jivesoftware/smack/filter/PacketFilter;"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/ibb/CloseListener;": [
        "Lorg/jivesoftware/smackx/bytestreams/ibb/CloseListener;->getFilter()Lorg/jivesoftware/smack/filter/PacketFilter;"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/ibb/provider/DataPacketProvider;": [
        "Lorg/jivesoftware/smackx/bytestreams/ibb/provider/DataPacketProvider;->parseExtension()Lorg/jivesoftware/smack/packet/PacketExtension;"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;": [
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;->enableService()V",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;->getAllRequestListeners()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;->createStreamHostRequest()Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;->getLocalStreamHost()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;->getUserListener()Lorg/jivesoftware/smackx/bytestreams/BytestreamListener;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;->getConnection()Lorg/jivesoftware/smack/Connection;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;->getIgnoredBytestreamRequests()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;->supportsSocks5()Z",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;->getTargetResponseTimeout()I",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;->ignoreBytestreamRequestOnce()V",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;->determineStreamHostInfos()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;->getNextSessionID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;->determineProxies()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;->getProxyConnectionTimeout()I",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;->getBytestreamManager()Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;->replyRejectPacket()V",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;->activate()V",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;->establishSession()Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamSession;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamManager;->createBytestreamInitiation()Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;": [
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;->getFrom()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;->setSessionID()V",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;->getStreamHost()Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream$StreamHost;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;->addStreamHost()V",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;->setType()V",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;->setPacketID()V",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;->getSessionID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;->addStreamHost()Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream$StreamHost;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;->getMode()Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream$Mode;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;->setToActivate()V",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;->getToActivate()Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream$Activate;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;->getType()Lorg/jivesoftware/smack/packet/IQ$Type;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;->countStreamHosts()I",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;->setMode()V",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;->getUsedHost()Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream$StreamHostUsed;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;->setTo()V",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;->setUsedHost()V",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;->getStreamHosts()Ljava/util/Collection;"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream$StreamHost;": [
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream$StreamHost;->getPort()I",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream$StreamHost;->getAddress()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream$StreamHost;->getJID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream$StreamHost;->setPort()V",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream$StreamHost;->toXML()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamRequest;": [
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamRequest;->createUsedHostResponse()Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamRequest;->accept()Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamSession;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamRequest;->getTotalConnectTimeout()I",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamRequest;->incrementConnectionFailures()V",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamRequest;->getMinimumConnectTimeout()I",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamRequest;->cancelRequest()V",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamRequest;->getConnectionFailures()I"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5Utils;": [
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5Utils;->createDigest()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5Utils;->receiveSocks5Message()[B"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5Client;": [
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5Client;->createSocks5ConnectRequest()[B",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5Client;->getSocket()Ljava/net/Socket;"
    ],
    "Ljava/io/DataInputStream;": [
        "Ljava/io/DataInputStream;->readFully()V"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5ClientForInitiator;": [
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5ClientForInitiator;->createStreamHostActivation()Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5ClientForInitiator;->activate()V"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5Proxy;": [
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5Proxy;->isRunning()Z",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5Proxy;->getSocks5Proxy()Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5Proxy;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5Proxy;->stop()V",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5Proxy;->start()V",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5Proxy;->getSocket()Ljava/net/Socket;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5Proxy;->addTransfer()V",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5Proxy;->getLocalAddresses()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5Proxy;->removeTransfer()V",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5Proxy;->getPort()I"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamListener;": [
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamListener;->incomingBytestreamRequest()V"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/socks5/InitiationListener;": [
        "Lorg/jivesoftware/smackx/bytestreams/socks5/InitiationListener;->processRequest()V",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/InitiationListener;->getFilter()Lorg/jivesoftware/smack/filter/PacketFilter;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/InitiationListener;->shutdown()V"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream$StreamHostUsed;": [
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream$StreamHostUsed;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream$StreamHostUsed;->getJID()Ljava/lang/String;"
    ],
    "Ljava/io/DataOutputStream;": [
        "Ljava/io/DataOutputStream;->close()V",
        "Ljava/io/DataOutputStream;->writeByte()V",
        "Ljava/io/DataOutputStream;->write()V",
        "Ljava/io/DataOutputStream;->writeBytes()V",
        "Ljava/io/DataOutputStream;->flush()V"
    ],
    "Ljava/util/concurrent/FutureTask;": [
        "Ljava/util/concurrent/FutureTask;->get()Ljava/lang/Object;",
        "Ljava/util/concurrent/FutureTask;->cancel()Z",
        "Ljava/util/concurrent/FutureTask;->run()V"
    ],
    "Ljava/util/concurrent/ExecutionException;": [
        "Ljava/util/concurrent/ExecutionException;->getCause()Ljava/lang/Throwable;"
    ],
    "Ljava/net/ServerSocket;": [
        "Ljava/net/ServerSocket;->close()V",
        "Ljava/net/ServerSocket;->getLocalPort()I"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream$Activate;": [
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream$Activate;->toXML()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream$Mode;": [
        "Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream$Mode;->fromName()Lorg/jivesoftware/smackx/bytestreams/socks5/packet/Bytestream$Mode;"
    ],
    "Lorg/jivesoftware/smackx/muc/DiscussionHistory;": [
        "Lorg/jivesoftware/smackx/muc/DiscussionHistory;->isConfigured()Z",
        "Lorg/jivesoftware/smackx/muc/DiscussionHistory;->getMUCHistory()Lorg/jivesoftware/smackx/packet/MUCInitialPresence$History;"
    ],
    "Lorg/jivesoftware/smack/PacketListener;": [
        "Lorg/jivesoftware/smack/PacketListener;->processPacket()V"
    ],
    "Lorg/jivesoftware/smackx/muc/ConnectionDetachedPacketCollector;": [
        "Lorg/jivesoftware/smackx/muc/ConnectionDetachedPacketCollector;->nextResult()Lorg/jivesoftware/smack/packet/Packet;",
        "Lorg/jivesoftware/smackx/muc/ConnectionDetachedPacketCollector;->pollResult()Lorg/jivesoftware/smack/packet/Packet;",
        "Lorg/jivesoftware/smackx/muc/ConnectionDetachedPacketCollector;->processPacket()V"
    ],
    "Ljava/lang/ref/WeakReference;": [
        "Ljava/lang/ref/WeakReference;->get()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smackx/muc/RoomListenerMultiplexor$RoomMultiplexFilter;": [
        "Lorg/jivesoftware/smackx/muc/RoomListenerMultiplexor$RoomMultiplexFilter;->removeRoom()V",
        "Lorg/jivesoftware/smackx/muc/RoomListenerMultiplexor$RoomMultiplexFilter;->addRoom()V"
    ],
    "Lorg/jivesoftware/smackx/muc/RoomListenerMultiplexor$RoomMultiplexListener;": [
        "Lorg/jivesoftware/smackx/muc/RoomListenerMultiplexor$RoomMultiplexListener;->addRoom()V",
        "Lorg/jivesoftware/smackx/muc/RoomListenerMultiplexor$RoomMultiplexListener;->removeRoom()V"
    ],
    "Lorg/jivesoftware/smackx/muc/RoomListenerMultiplexor;": [
        "Lorg/jivesoftware/smackx/muc/RoomListenerMultiplexor;->cancel()V",
        "Lorg/jivesoftware/smackx/muc/RoomListenerMultiplexor;->getRoomMultiplexor()Lorg/jivesoftware/smackx/muc/RoomListenerMultiplexor;",
        "Lorg/jivesoftware/smackx/muc/RoomListenerMultiplexor;->addRoom()V",
        "Lorg/jivesoftware/smackx/muc/RoomListenerMultiplexor;->removeRoom()V"
    ],
    "Lorg/jivesoftware/smackx/muc/MultiUserChat;": [
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->fireInvitationRejectionListeners()V",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->getAffiliatesByOwner()Ljava/util/Collection;",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->getAffiliatesByAdmin()Ljava/util/Collection;",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->fireSubjectUpdatedListeners()V",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->changeAffiliationByOwner()V",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->join()V",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->getOccupants()Ljava/util/Collection;",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->userHasJoined()V",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->invite()V",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->changeRole()V",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->fireParticipantStatusListeners()V",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->checkRoleModifications()V",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->getMUCUserExtension()Lorg/jivesoftware/smackx/packet/MUCUser;",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->checkPresenceCode()V",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->checkAffiliationModifications()V",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->fireUserStatusListeners()V",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->userHasLeft()V",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->getJoinedRooms()Ljava/util/Iterator;",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->addInvitationListener()V",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->changeAffiliationByAdmin()V",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat;->leave()V"
    ],
    "Lorg/jivesoftware/smackx/muc/MultiUserChat$InvitationsMonitor;": [
        "Lorg/jivesoftware/smackx/muc/MultiUserChat$InvitationsMonitor;->addInvitationListener()V",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat$InvitationsMonitor;->removeInvitationListener()V",
        "Lorg/jivesoftware/smackx/muc/MultiUserChat$InvitationsMonitor;->getInvitationsMonitor()Lorg/jivesoftware/smackx/muc/MultiUserChat$InvitationsMonitor;"
    ],
    "Lorg/jivesoftware/smackx/muc/InvitationRejectionListener;": [
        "Lorg/jivesoftware/smackx/muc/InvitationRejectionListener;->invitationDeclined()V"
    ],
    "Lorg/jivesoftware/smackx/muc/SubjectUpdatedListener;": [
        "Lorg/jivesoftware/smackx/muc/SubjectUpdatedListener;->subjectUpdated()V"
    ],
    "Lorg/jivesoftware/smackx/search/SimpleUserSearch;": [
        "Lorg/jivesoftware/smackx/search/SimpleUserSearch;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/search/SimpleUserSearch;->setForm()V",
        "Lorg/jivesoftware/smackx/search/SimpleUserSearch;->getReportedData()Lorg/jivesoftware/smackx/ReportedData;",
        "Lorg/jivesoftware/smackx/search/SimpleUserSearch;->getExtension()Lorg/jivesoftware/smack/packet/PacketExtension;",
        "Lorg/jivesoftware/smackx/search/SimpleUserSearch;->getSingleValue()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/search/SimpleUserSearch;->addExtension()V",
        "Lorg/jivesoftware/smackx/search/SimpleUserSearch;->setType()V",
        "Lorg/jivesoftware/smackx/search/SimpleUserSearch;->setTo()V",
        "Lorg/jivesoftware/smackx/search/SimpleUserSearch;->getItemsToSearch()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/ReportedData;": [
        "Lorg/jivesoftware/smackx/ReportedData;->addColumn()V",
        "Lorg/jivesoftware/smackx/ReportedData;->getReportedDataFrom()Lorg/jivesoftware/smackx/ReportedData;",
        "Lorg/jivesoftware/smackx/ReportedData;->addRow()V",
        "Lorg/jivesoftware/smackx/ReportedData;->getColumns()Ljava/util/Iterator;"
    ],
    "Lorg/jivesoftware/smackx/ReportedData$Column;": [
        "Lorg/jivesoftware/smackx/ReportedData$Column;->getVariable()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/search/UserSearch;": [
        "Lorg/jivesoftware/smackx/search/UserSearch;->addExtension()V",
        "Lorg/jivesoftware/smackx/search/UserSearch;->buildDataForm()V",
        "Lorg/jivesoftware/smackx/search/UserSearch;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/search/UserSearch;->getExtensionsXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/search/UserSearch;->sendSimpleSearchForm()Lorg/jivesoftware/smackx/ReportedData;",
        "Lorg/jivesoftware/smackx/search/UserSearch;->setType()V",
        "Lorg/jivesoftware/smackx/search/UserSearch;->getSearchForm()Lorg/jivesoftware/smackx/Form;",
        "Lorg/jivesoftware/smackx/search/UserSearch;->setTo()V",
        "Lorg/jivesoftware/smackx/search/UserSearch;->sendSearchForm()Lorg/jivesoftware/smackx/ReportedData;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/MetaData;": [
        "Lorg/jivesoftware/smackx/workgroup/MetaData;->getMetaData()Ljava/util/Map;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/util/MetaDataUtils;": [
        "Lorg/jivesoftware/smackx/workgroup/util/MetaDataUtils;->serializeMetaData()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/util/MetaDataUtils;->parseMetaData()Ljava/util/Map;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/settings/SearchSettings;": [
        "Lorg/jivesoftware/smackx/workgroup/settings/SearchSettings;->setType()V",
        "Lorg/jivesoftware/smackx/workgroup/settings/SearchSettings;->getKbLocation()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/settings/SearchSettings;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/settings/SearchSettings;->getForumsLocation()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/settings/SearchSettings;->setTo()V",
        "Lorg/jivesoftware/smackx/workgroup/settings/SearchSettings;->getError()Lorg/jivesoftware/smack/packet/XMPPError;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/util/ModelUtil;": [
        "Lorg/jivesoftware/smackx/workgroup/util/ModelUtil;->concat()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/util/ModelUtil;->nullifyIfEmpty()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/util/ModelUtil;->areEqual()Z",
        "Lorg/jivesoftware/smackx/workgroup/util/ModelUtil;->areBooleansEqual()Z",
        "Lorg/jivesoftware/smackx/workgroup/util/ModelUtil;->hasLength()Z"
    ],
    "Lorg/jivesoftware/smackx/workgroup/settings/ChatSetting;": [
        "Lorg/jivesoftware/smackx/workgroup/settings/ChatSetting;->setValue()V",
        "Lorg/jivesoftware/smackx/workgroup/settings/ChatSetting;->setKey()V",
        "Lorg/jivesoftware/smackx/workgroup/settings/ChatSetting;->getKey()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/settings/ChatSetting;->setType()V"
    ],
    "Lorg/jivesoftware/smackx/workgroup/settings/OfflineSettings;": [
        "Lorg/jivesoftware/smackx/workgroup/settings/OfflineSettings;->getSubject()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/settings/OfflineSettings;->getRedirectURL()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/settings/OfflineSettings;->getEmailAddress()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/settings/OfflineSettings;->setType()V",
        "Lorg/jivesoftware/smackx/workgroup/settings/OfflineSettings;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/settings/OfflineSettings;->setTo()V",
        "Lorg/jivesoftware/smackx/workgroup/settings/OfflineSettings;->getOfflineText()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/settings/OfflineSettings;->getError()Lorg/jivesoftware/smack/packet/XMPPError;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/settings/GenericSettings;": [
        "Lorg/jivesoftware/smackx/workgroup/settings/GenericSettings;->setType()V",
        "Lorg/jivesoftware/smackx/workgroup/settings/GenericSettings;->getQuery()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/settings/GenericSettings;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smackx/workgroup/settings/GenericSettings;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/settings/GenericSettings;->setTo()V"
    ],
    "Lorg/jivesoftware/smackx/workgroup/settings/WorkgroupProperties;": [
        "Lorg/jivesoftware/smackx/workgroup/settings/WorkgroupProperties;->setType()V",
        "Lorg/jivesoftware/smackx/workgroup/settings/WorkgroupProperties;->getJid()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/settings/WorkgroupProperties;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smackx/workgroup/settings/WorkgroupProperties;->setJid()V",
        "Lorg/jivesoftware/smackx/workgroup/settings/WorkgroupProperties;->setTo()V",
        "Lorg/jivesoftware/smackx/workgroup/settings/WorkgroupProperties;->getPacketID()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/settings/ChatSettings;": [
        "Lorg/jivesoftware/smackx/workgroup/settings/ChatSettings;->getSettings()Ljava/util/Collection;",
        "Lorg/jivesoftware/smackx/workgroup/settings/ChatSettings;->setKey()V",
        "Lorg/jivesoftware/smackx/workgroup/settings/ChatSettings;->setTo()V",
        "Lorg/jivesoftware/smackx/workgroup/settings/ChatSettings;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smackx/workgroup/settings/ChatSettings;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/settings/ChatSettings;->getFirstEntry()Lorg/jivesoftware/smackx/workgroup/settings/ChatSetting;",
        "Lorg/jivesoftware/smackx/workgroup/settings/ChatSettings;->setType()V"
    ],
    "Ljava/util/ListIterator;": [
        "Ljava/util/ListIterator;->previous()Ljava/lang/Object;",
        "Ljava/util/ListIterator;->hasNext()Z",
        "Ljava/util/ListIterator;->remove()V",
        "Ljava/util/ListIterator;->hasPrevious()Z",
        "Ljava/util/ListIterator;->next()Ljava/lang/Object;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/util/ListenerEventDispatcher$TripletContainer;": [
        "Lorg/jivesoftware/smackx/workgroup/util/ListenerEventDispatcher$TripletContainer;->getMethodArguments()[Ljava/lang/Object;",
        "Lorg/jivesoftware/smackx/workgroup/util/ListenerEventDispatcher$TripletContainer;->getListenerInstance()Ljava/lang/Object;",
        "Lorg/jivesoftware/smackx/workgroup/util/ListenerEventDispatcher$TripletContainer;->getListenerMethod()Ljava/lang/reflect/Method;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/ext/history/ChatMetadata;": [
        "Lorg/jivesoftware/smackx/workgroup/ext/history/ChatMetadata;->setSessionID()V",
        "Lorg/jivesoftware/smackx/workgroup/ext/history/ChatMetadata;->setType()V",
        "Lorg/jivesoftware/smackx/workgroup/ext/history/ChatMetadata;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smackx/workgroup/ext/history/ChatMetadata;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/ext/history/ChatMetadata;->getMetadata()Ljava/util/Map;",
        "Lorg/jivesoftware/smackx/workgroup/ext/history/ChatMetadata;->getSessionID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/ext/history/ChatMetadata;->setTo()V"
    ],
    "Lorg/jivesoftware/smackx/workgroup/ext/forms/WorkgroupForm;": [
        "Lorg/jivesoftware/smackx/workgroup/ext/forms/WorkgroupForm;->setType()V",
        "Lorg/jivesoftware/smackx/workgroup/ext/forms/WorkgroupForm;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smackx/workgroup/ext/forms/WorkgroupForm;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/ext/forms/WorkgroupForm;->getExtensionsXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/ext/forms/WorkgroupForm;->setTo()V"
    ],
    "Lorg/jivesoftware/smackx/workgroup/ext/notes/ChatNotes;": [
        "Lorg/jivesoftware/smackx/workgroup/ext/notes/ChatNotes;->getSessionID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/ext/notes/ChatNotes;->replace()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/ext/notes/ChatNotes;->setType()V",
        "Lorg/jivesoftware/smackx/workgroup/ext/notes/ChatNotes;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smackx/workgroup/ext/notes/ChatNotes;->setSessionID()V",
        "Lorg/jivesoftware/smackx/workgroup/ext/notes/ChatNotes;->getNotes()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/ext/notes/ChatNotes;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/ext/notes/ChatNotes;->setNotes()V",
        "Lorg/jivesoftware/smackx/workgroup/ext/notes/ChatNotes;->setTo()V"
    ],
    "Lorg/jivesoftware/smackx/workgroup/ext/macros/Macros;": [
        "Lorg/jivesoftware/smackx/workgroup/ext/macros/Macros;->setType()V",
        "Lorg/jivesoftware/smackx/workgroup/ext/macros/Macros;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smackx/workgroup/ext/macros/Macros;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/ext/macros/Macros;->getRootGroup()Lorg/jivesoftware/smackx/workgroup/ext/macros/MacroGroup;",
        "Lorg/jivesoftware/smackx/workgroup/ext/macros/Macros;->setTo()V",
        "Lorg/jivesoftware/smackx/workgroup/ext/macros/Macros;->setPersonal()V",
        "Lorg/jivesoftware/smackx/workgroup/ext/macros/Macros;->isPersonal()Z",
        "Lorg/jivesoftware/smackx/workgroup/ext/macros/Macros;->setPersonalMacroGroup()V",
        "Lorg/jivesoftware/smackx/workgroup/ext/macros/Macros;->getPersonalMacroGroup()Lorg/jivesoftware/smackx/workgroup/ext/macros/MacroGroup;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/ext/macros/MacroGroup;": [
        "Lorg/jivesoftware/smackx/workgroup/ext/macros/MacroGroup;->toXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/ext/macros/MacroGroup;->getTitle()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/ext/macros/MacroGroup;->getMacros()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/workgroup/ext/macros/MacroGroup;->getMacroGroups()Ljava/util/List;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/ext/macros/Macro;": [
        "Lorg/jivesoftware/smackx/workgroup/ext/macros/Macro;->getResponse()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/ext/macros/Macro;->getDescription()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/ext/macros/Macro;->getTitle()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/ext/macros/Macro;->getType()I"
    ],
    "Lorg/jivesoftware/smackx/workgroup/user/Workgroup;": [
        "Lorg/jivesoftware/smackx/workgroup/user/Workgroup;->fireQueueTimeEvent()V",
        "Lorg/jivesoftware/smackx/workgroup/user/Workgroup;->fireQueueDepartedEvent()V",
        "Lorg/jivesoftware/smackx/workgroup/user/Workgroup;->fireInvitationEvent()V",
        "Lorg/jivesoftware/smackx/workgroup/user/Workgroup;->getChatSettings()Lorg/jivesoftware/smackx/workgroup/settings/ChatSettings;",
        "Lorg/jivesoftware/smackx/workgroup/user/Workgroup;->joinQueue()V",
        "Lorg/jivesoftware/smackx/workgroup/user/Workgroup;->handlePacket()V",
        "Lorg/jivesoftware/smackx/workgroup/user/Workgroup;->fireQueuePositionEvent()V",
        "Lorg/jivesoftware/smackx/workgroup/user/Workgroup;->fireQueueJoinedEvent()V",
        "Lorg/jivesoftware/smackx/workgroup/user/Workgroup;->addQueueListener()V"
    ],
    "Lorg/jivesoftware/smackx/workgroup/WorkgroupInvitationListener;": [
        "Lorg/jivesoftware/smackx/workgroup/WorkgroupInvitationListener;->invitationReceived()V"
    ],
    "Lorg/jivesoftware/smackx/workgroup/user/QueueListener;": [
        "Lorg/jivesoftware/smackx/workgroup/user/QueueListener;->queueWaitTimeUpdated()V",
        "Lorg/jivesoftware/smackx/workgroup/user/QueueListener;->queuePositionUpdated()V",
        "Lorg/jivesoftware/smackx/workgroup/user/QueueListener;->departedQueue()V",
        "Lorg/jivesoftware/smackx/workgroup/user/QueueListener;->joinedQueue()V"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/QueueUpdate;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/QueueUpdate;->getRemaingTime()I",
        "Lorg/jivesoftware/smackx/workgroup/packet/QueueUpdate;->getPosition()I"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/SessionID;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/SessionID;->getSessionID()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/DepartQueuePacket;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/DepartQueuePacket;->setTo()V",
        "Lorg/jivesoftware/smackx/workgroup/packet/DepartQueuePacket;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/DepartQueuePacket;->setType()V",
        "Lorg/jivesoftware/smackx/workgroup/packet/DepartQueuePacket;->setFrom()V"
    ],
    "Lorg/jivesoftware/smackx/workgroup/settings/SoundSettings;": [
        "Lorg/jivesoftware/smackx/workgroup/settings/SoundSettings;->setType()V",
        "Lorg/jivesoftware/smackx/workgroup/settings/SoundSettings;->setTo()V",
        "Lorg/jivesoftware/smackx/workgroup/settings/SoundSettings;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smackx/workgroup/settings/SoundSettings;->getPacketID()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/user/Workgroup$JoinQueuePacket;": [
        "Lorg/jivesoftware/smackx/workgroup/user/Workgroup$JoinQueuePacket;->getPacketID()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/AgentStatusRequest;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/AgentStatusRequest;->setTo()V",
        "Lorg/jivesoftware/smackx/workgroup/packet/AgentStatusRequest;->getElementName()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/agent/AgentRoster;": [
        "Lorg/jivesoftware/smackx/workgroup/agent/AgentRoster;->getAgents()Ljava/util/Set;",
        "Lorg/jivesoftware/smackx/workgroup/agent/AgentRoster;->contains()Z",
        "Lorg/jivesoftware/smackx/workgroup/agent/AgentRoster;->fireEvent()V",
        "Lorg/jivesoftware/smackx/workgroup/agent/AgentRoster;->getPresenceMapKey()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/agent/AgentRosterListener;": [
        "Lorg/jivesoftware/smackx/workgroup/agent/AgentRosterListener;->presenceChanged()V",
        "Lorg/jivesoftware/smackx/workgroup/agent/AgentRosterListener;->agentRemoved()V",
        "Lorg/jivesoftware/smackx/workgroup/agent/AgentRosterListener;->agentAdded()V"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/TranscriptSearch;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/TranscriptSearch;->setType()V",
        "Lorg/jivesoftware/smackx/workgroup/packet/TranscriptSearch;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smackx/workgroup/packet/TranscriptSearch;->addExtension()V",
        "Lorg/jivesoftware/smackx/workgroup/packet/TranscriptSearch;->getExtensionsXML()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/TranscriptSearch;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/TranscriptSearch;->setTo()V"
    ],
    "Lorg/jivesoftware/smack/filter/OrFilter;": [
        "Lorg/jivesoftware/smack/filter/OrFilter;->addFilter()V"
    ],
    "Lorg/jivesoftware/smackx/workgroup/agent/AgentSession;": [
        "Lorg/jivesoftware/smackx/workgroup/agent/AgentSession;->setStatus()V",
        "Lorg/jivesoftware/smackx/workgroup/agent/AgentSession;->fireQueueUsersEvent()V",
        "Lorg/jivesoftware/smackx/workgroup/agent/AgentSession;->fireInvitationEvent()V",
        "Lorg/jivesoftware/smackx/workgroup/agent/AgentSession;->getWorkgroupJID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/agent/AgentSession;->fireOfferRevokeEvent()V",
        "Lorg/jivesoftware/smackx/workgroup/agent/AgentSession;->handlePacket()V",
        "Lorg/jivesoftware/smackx/workgroup/agent/AgentSession;->fireOfferRequestEvent()V"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/OfferRequestProvider$OfferRequestPacket;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/OfferRequestProvider$OfferRequestPacket;->getUserJID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/OfferRequestProvider$OfferRequestPacket;->getContent()Lorg/jivesoftware/smackx/workgroup/agent/OfferContent;",
        "Lorg/jivesoftware/smackx/workgroup/packet/OfferRequestProvider$OfferRequestPacket;->getSessionID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/OfferRequestProvider$OfferRequestPacket;->getMetaData()Ljava/util/Map;",
        "Lorg/jivesoftware/smackx/workgroup/packet/OfferRequestProvider$OfferRequestPacket;->getUserID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/OfferRequestProvider$OfferRequestPacket;->getTimeout()I",
        "Lorg/jivesoftware/smackx/workgroup/packet/OfferRequestProvider$OfferRequestPacket;->setType()V"
    ],
    "Lorg/jivesoftware/smackx/workgroup/agent/OfferListener;": [
        "Lorg/jivesoftware/smackx/workgroup/agent/OfferListener;->offerRevoked()V",
        "Lorg/jivesoftware/smackx/workgroup/agent/OfferListener;->offerReceived()V"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/OfferRevokeProvider$OfferRevokePacket;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/OfferRevokeProvider$OfferRevokePacket;->getUserID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/OfferRevokeProvider$OfferRevokePacket;->getSessionID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/OfferRevokeProvider$OfferRevokePacket;->getReason()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/OfferRevokeProvider$OfferRevokePacket;->getUserJID()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/agent/QueueUsersListener;": [
        "Lorg/jivesoftware/smackx/workgroup/agent/QueueUsersListener;->averageWaitTimeUpdated()V",
        "Lorg/jivesoftware/smackx/workgroup/agent/QueueUsersListener;->statusUpdated()V",
        "Lorg/jivesoftware/smackx/workgroup/agent/QueueUsersListener;->oldestEntryUpdated()V",
        "Lorg/jivesoftware/smackx/workgroup/agent/QueueUsersListener;->usersUpdated()V"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/QueueOverview;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/QueueOverview;->getStatus()Lorg/jivesoftware/smackx/workgroup/agent/WorkgroupQueue$Status;",
        "Lorg/jivesoftware/smackx/workgroup/packet/QueueOverview;->getOldestEntry()Ljava/util/Date;",
        "Lorg/jivesoftware/smackx/workgroup/packet/QueueOverview;->getAverageWaitTime()I"
    ],
    "Lorg/jivesoftware/smackx/workgroup/agent/WorkgroupQueue;": [
        "Lorg/jivesoftware/smackx/workgroup/agent/WorkgroupQueue;->setAverageWaitTime()V",
        "Lorg/jivesoftware/smackx/workgroup/agent/WorkgroupQueue;->setCurrentChats()V",
        "Lorg/jivesoftware/smackx/workgroup/agent/WorkgroupQueue;->setUsers()V",
        "Lorg/jivesoftware/smackx/workgroup/agent/WorkgroupQueue;->setStatus()V",
        "Lorg/jivesoftware/smackx/workgroup/agent/WorkgroupQueue;->setMaxChats()V",
        "Lorg/jivesoftware/smackx/workgroup/agent/WorkgroupQueue;->setOldestEntry()V"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/QueueDetails;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/QueueDetails;->addUser()V",
        "Lorg/jivesoftware/smackx/workgroup/packet/QueueDetails;->getUsers()Ljava/util/Set;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/ext/history/AgentChatHistory;": [
        "Lorg/jivesoftware/smackx/workgroup/ext/history/AgentChatHistory;->setType()V",
        "Lorg/jivesoftware/smackx/workgroup/ext/history/AgentChatHistory;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/ext/history/AgentChatHistory;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smackx/workgroup/ext/history/AgentChatHistory;->setTo()V"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/OccupantsInfo;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/OccupantsInfo;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smackx/workgroup/packet/OccupantsInfo;->setTo()V",
        "Lorg/jivesoftware/smackx/workgroup/packet/OccupantsInfo;->setType()V",
        "Lorg/jivesoftware/smackx/workgroup/packet/OccupantsInfo;->getPacketID()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/agent/TranscriptManager;": [
        "Lorg/jivesoftware/smackx/workgroup/agent/TranscriptManager;->getTranscripts()Lorg/jivesoftware/smackx/workgroup/packet/Transcripts;",
        "Lorg/jivesoftware/smackx/workgroup/agent/TranscriptManager;->getTranscript()Lorg/jivesoftware/smackx/workgroup/packet/Transcript;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/agent/TranscriptSearchManager;": [
        "Lorg/jivesoftware/smackx/workgroup/agent/TranscriptSearchManager;->submitSearch()Lorg/jivesoftware/smackx/ReportedData;",
        "Lorg/jivesoftware/smackx/workgroup/agent/TranscriptSearchManager;->getSearchForm()Lorg/jivesoftware/smackx/Form;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/MonitorPacket;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/MonitorPacket;->setType()V",
        "Lorg/jivesoftware/smackx/workgroup/packet/MonitorPacket;->setTo()V",
        "Lorg/jivesoftware/smackx/workgroup/packet/MonitorPacket;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/MonitorPacket;->setSessionID()V",
        "Lorg/jivesoftware/smackx/workgroup/packet/MonitorPacket;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smackx/workgroup/packet/MonitorPacket;->isMonitor()Z"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/AgentWorkgroups;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/AgentWorkgroups;->getWorkgroups()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/workgroup/packet/AgentWorkgroups;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smackx/workgroup/packet/AgentWorkgroups;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/AgentWorkgroups;->setTo()V"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/AgentInfo;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/AgentInfo;->setFrom()V",
        "Lorg/jivesoftware/smackx/workgroup/packet/AgentInfo;->getName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/AgentInfo;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smackx/workgroup/packet/AgentInfo;->setName()V",
        "Lorg/jivesoftware/smackx/workgroup/packet/AgentInfo;->getJid()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/AgentInfo;->setType()V",
        "Lorg/jivesoftware/smackx/workgroup/packet/AgentInfo;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/AgentInfo;->setTo()V"
    ],
    "Lorg/jivesoftware/smackx/workgroup/agent/Agent;": [
        "Lorg/jivesoftware/smackx/workgroup/agent/Agent;->getUser()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/Transcript;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/Transcript;->getError()Lorg/jivesoftware/smack/packet/XMPPError;",
        "Lorg/jivesoftware/smackx/workgroup/packet/Transcript;->setTo()V",
        "Lorg/jivesoftware/smackx/workgroup/packet/Transcript;->getPacketID()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/Transcripts;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/Transcripts;->getPacketID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/Transcripts;->setTo()V",
        "Lorg/jivesoftware/smackx/workgroup/packet/Transcripts;->getError()Lorg/jivesoftware/smack/packet/XMPPError;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/AgentStatus$ChatInfo;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/AgentStatus$ChatInfo;->toXML()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/AgentStatus;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/AgentStatus;->getElementName()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/OccupantsInfo$OccupantInfo;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/OccupantsInfo$OccupantInfo;->getJID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/OccupantsInfo$OccupantInfo;->getJoined()Ljava/util/Date;",
        "Lorg/jivesoftware/smackx/workgroup/packet/OccupantsInfo$OccupantInfo;->getNickname()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/TranscriptsProvider;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/TranscriptsProvider;->parseSummary()Lorg/jivesoftware/smackx/workgroup/packet/Transcripts$TranscriptSummary;",
        "Lorg/jivesoftware/smackx/workgroup/packet/TranscriptsProvider;->parseAgents()Ljava/util/List;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/AgentStatusRequest$Item;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/AgentStatusRequest$Item;->getJID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/AgentStatusRequest$Item;->getName()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/UserID;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/UserID;->getUserID()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/Transcripts$TranscriptSummary;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/Transcripts$TranscriptSummary;->toXML()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/WorkgroupInformation;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/WorkgroupInformation;->getWorkgroupJID()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/agent/UserRequest;": [
        "Lorg/jivesoftware/smackx/workgroup/agent/UserRequest;->getInstance()Lorg/jivesoftware/smackx/workgroup/agent/OfferContent;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/RoomInvitation;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/RoomInvitation;->getInviter()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/RoomInvitation;->getRoom()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/RoomInvitation;->getReason()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/packet/RoomTransfer;": [
        "Lorg/jivesoftware/smackx/workgroup/packet/RoomTransfer;->getInviter()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/RoomTransfer;->getReason()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/packet/RoomTransfer;->getRoom()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/workgroup/QueueUser;": [
        "Lorg/jivesoftware/smackx/workgroup/QueueUser;->getEstimatedRemainingTime()I",
        "Lorg/jivesoftware/smackx/workgroup/QueueUser;->getUserID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/workgroup/QueueUser;->getQueueJoinTimestamp()Ljava/util/Date;",
        "Lorg/jivesoftware/smackx/workgroup/QueueUser;->getQueuePosition()I"
    ],
    "Lorg/jivesoftware/smackx/filetransfer/OutgoingFileTransfer;": [
        "Lorg/jivesoftware/smackx/filetransfer/OutgoingFileTransfer;->setStatus()V",
        "Lorg/jivesoftware/smackx/filetransfer/OutgoingFileTransfer;->handleXMPPException()V",
        "Lorg/jivesoftware/smackx/filetransfer/OutgoingFileTransfer;->isDone()Z",
        "Lorg/jivesoftware/smackx/filetransfer/OutgoingFileTransfer;->negotiateStream()Ljava/io/OutputStream;",
        "Lorg/jivesoftware/smackx/filetransfer/OutgoingFileTransfer;->getStatus()Lorg/jivesoftware/smackx/filetransfer/FileTransfer$Status;",
        "Lorg/jivesoftware/smackx/filetransfer/OutgoingFileTransfer;->getPeer()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/filetransfer/OutgoingFileTransfer;->setError()V",
        "Lorg/jivesoftware/smackx/filetransfer/OutgoingFileTransfer;->checkTransferThread()V",
        "Lorg/jivesoftware/smackx/filetransfer/OutgoingFileTransfer;->sendFile()V",
        "Lorg/jivesoftware/smackx/filetransfer/OutgoingFileTransfer;->updateStatus()Z",
        "Lorg/jivesoftware/smackx/filetransfer/OutgoingFileTransfer;->setFileInfo()V",
        "Lorg/jivesoftware/smackx/filetransfer/OutgoingFileTransfer;->setException()V"
    ],
    "Lorg/jivesoftware/smackx/filetransfer/FileTransferNegotiator;": [
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferNegotiator;->getNegotiator()Lorg/jivesoftware/smackx/filetransfer/StreamNegotiator;",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferNegotiator;->selectStreamNegotiator()Lorg/jivesoftware/smackx/filetransfer/StreamNegotiator;",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferNegotiator;->negotiateOutgoingTransfer()Lorg/jivesoftware/smackx/filetransfer/StreamNegotiator;",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferNegotiator;->getInstanceFor()Lorg/jivesoftware/smackx/filetransfer/FileTransferNegotiator;",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferNegotiator;->createDefaultInitiationForm()Lorg/jivesoftware/smackx/packet/DataForm;",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferNegotiator;->setServiceEnabled()V",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferNegotiator;->cleanup()V",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferNegotiator;->createIQ()Lorg/jivesoftware/smack/packet/IQ;",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferNegotiator;->getOutgoingNegotiator()Lorg/jivesoftware/smackx/filetransfer/StreamNegotiator;",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferNegotiator;->getStreamMethodField()Lorg/jivesoftware/smackx/FormField;",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferNegotiator;->getNextStreamID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferNegotiator;->configureConnection()V"
    ],
    "Lorg/jivesoftware/smackx/filetransfer/StreamNegotiator;": [
        "Lorg/jivesoftware/smackx/filetransfer/StreamNegotiator;->createOutgoingStream()Ljava/io/OutputStream;",
        "Lorg/jivesoftware/smackx/filetransfer/StreamNegotiator;->createInitiationAccept()Lorg/jivesoftware/smackx/packet/StreamInitiation;",
        "Lorg/jivesoftware/smackx/filetransfer/StreamNegotiator;->getNamespaces()[Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/filetransfer/StreamNegotiator;->cleanup()V",
        "Lorg/jivesoftware/smackx/filetransfer/StreamNegotiator;->getInitiationPacketFilter()Lorg/jivesoftware/smack/filter/PacketFilter;"
    ],
    "Lorg/jivesoftware/smackx/filetransfer/FileTransfer$Status;": [
        "Lorg/jivesoftware/smackx/filetransfer/FileTransfer$Status;->equals()Z"
    ],
    "Lorg/jivesoftware/smackx/filetransfer/FileTransfer;": [
        "Lorg/jivesoftware/smackx/filetransfer/FileTransfer;->setException()V",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransfer;->getStatus()Lorg/jivesoftware/smackx/filetransfer/FileTransfer$Status;",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransfer;->setStatus()V",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransfer;->getError()Lorg/jivesoftware/smackx/filetransfer/FileTransfer$Error;",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransfer;->updateStatus()Z"
    ],
    "Lorg/jivesoftware/smackx/filetransfer/OutgoingFileTransfer$NegotiationProgress;": [
        "Lorg/jivesoftware/smackx/filetransfer/OutgoingFileTransfer$NegotiationProgress;->statusUpdated()V",
        "Lorg/jivesoftware/smackx/filetransfer/OutgoingFileTransfer$NegotiationProgress;->errorEstablishingStream()V"
    ],
    "Lorg/jivesoftware/smackx/filetransfer/FileTransferRequest;": [
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferRequest;->getStreamID()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferRequest;->getStreamInitiation()Lorg/jivesoftware/smackx/packet/StreamInitiation;",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferRequest;->getFileName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferRequest;->getRequestor()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferRequest;->getFileSize()J"
    ],
    "Lorg/jivesoftware/smackx/filetransfer/IncomingFileTransfer;": [
        "Lorg/jivesoftware/smackx/filetransfer/IncomingFileTransfer;->handleXMPPException()V",
        "Lorg/jivesoftware/smackx/filetransfer/IncomingFileTransfer;->setStatus()V",
        "Lorg/jivesoftware/smackx/filetransfer/IncomingFileTransfer;->negotiateStream()Ljava/io/InputStream;",
        "Lorg/jivesoftware/smackx/filetransfer/IncomingFileTransfer;->setException()V",
        "Lorg/jivesoftware/smackx/filetransfer/IncomingFileTransfer;->setFileInfo()V"
    ],
    "Lorg/jivesoftware/smackx/filetransfer/FileTransferListener;": [
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferListener;->fileTransferRequest()V"
    ],
    "Ljava/net/URLConnection;": [
        "Ljava/net/URLConnection;->connect()V",
        "Ljava/net/URLConnection;->getInputStream()Ljava/io/InputStream;",
        "Ljava/net/URLConnection;->guessContentTypeFromName()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/filetransfer/Socks5TransferNegotiator;": [
        "Lorg/jivesoftware/smackx/filetransfer/Socks5TransferNegotiator;->negotiateIncomingStream()Ljava/io/InputStream;"
    ],
    "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamSession;": [
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamSession;->getOutputStream()Ljava/io/OutputStream;",
        "Lorg/jivesoftware/smackx/bytestreams/socks5/Socks5BytestreamSession;->getInputStream()Ljava/io/InputStream;"
    ],
    "Ljava/io/PushbackInputStream;": [
        "Ljava/io/PushbackInputStream;->unread()V",
        "Ljava/io/PushbackInputStream;->read()I",
        "Ljava/io/PushbackInputStream;->close()V"
    ],
    "Lorg/jivesoftware/smackx/filetransfer/FaultTolerantNegotiator;": [
        "Lorg/jivesoftware/smackx/filetransfer/FaultTolerantNegotiator;->getNamespaces()[Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/filetransfer/FaultTolerantNegotiator;->determineNegotiator()Lorg/jivesoftware/smackx/filetransfer/StreamNegotiator;",
        "Lorg/jivesoftware/smackx/filetransfer/FaultTolerantNegotiator;->getInitiationPacketFilter()Lorg/jivesoftware/smack/filter/PacketFilter;"
    ],
    "Ljava/util/concurrent/CompletionService;": [
        "Ljava/util/concurrent/CompletionService;->submit()Ljava/util/concurrent/Future;",
        "Ljava/util/concurrent/CompletionService;->poll()Ljava/util/concurrent/Future;"
    ],
    "Ljava/util/concurrent/Future;": [
        "Ljava/util/concurrent/Future;->get()Ljava/lang/Object;",
        "Ljava/util/concurrent/Future;->cancel()Z"
    ],
    "Lorg/jivesoftware/smackx/filetransfer/IBBTransferNegotiator;": [
        "Lorg/jivesoftware/smackx/filetransfer/IBBTransferNegotiator;->negotiateIncomingStream()Ljava/io/InputStream;"
    ],
    "Lorg/jivesoftware/smackx/filetransfer/FileTransferManager;": [
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferManager;->rejectIncomingFileTransfer()V",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferManager;->createOutgoingFileTransfer()Lorg/jivesoftware/smackx/filetransfer/OutgoingFileTransfer;",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferManager;->createIncomingFileTransfer()Lorg/jivesoftware/smackx/filetransfer/IncomingFileTransfer;",
        "Lorg/jivesoftware/smackx/filetransfer/FileTransferManager;->addFileTransferListener()V"
    ],
    "Lorg/jivesoftware/smackx/bookmark/Bookmarks;": [
        "Lorg/jivesoftware/smackx/bookmark/Bookmarks;->getBookmarkedURLS()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/bookmark/Bookmarks;->getURLStorage()Lorg/jivesoftware/smackx/bookmark/BookmarkedURL;",
        "Lorg/jivesoftware/smackx/bookmark/Bookmarks;->addBookmarkedURL()V",
        "Lorg/jivesoftware/smackx/bookmark/Bookmarks;->getBookmarkedConferences()Ljava/util/List;",
        "Lorg/jivesoftware/smackx/bookmark/Bookmarks;->getConferenceStorage()Lorg/jivesoftware/smackx/bookmark/BookmarkedConference;",
        "Lorg/jivesoftware/smackx/bookmark/Bookmarks;->addBookmarkedConference()V"
    ],
    "Lorg/jivesoftware/smackx/bookmark/BookmarkedConference;": [
        "Lorg/jivesoftware/smackx/bookmark/BookmarkedConference;->isShared()Z",
        "Lorg/jivesoftware/smackx/bookmark/BookmarkedConference;->setPassword()V",
        "Lorg/jivesoftware/smackx/bookmark/BookmarkedConference;->setShared()V",
        "Lorg/jivesoftware/smackx/bookmark/BookmarkedConference;->setAutoJoin()V",
        "Lorg/jivesoftware/smackx/bookmark/BookmarkedConference;->getJid()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/bookmark/BookmarkedConference;->setName()V",
        "Lorg/jivesoftware/smackx/bookmark/BookmarkedConference;->isAutoJoin()Z",
        "Lorg/jivesoftware/smackx/bookmark/BookmarkedConference;->getPassword()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/bookmark/BookmarkedConference;->getName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/bookmark/BookmarkedConference;->setNickname()V",
        "Lorg/jivesoftware/smackx/bookmark/BookmarkedConference;->getNickname()Ljava/lang/String;"
    ],
    "Lorg/jivesoftware/smackx/bookmark/BookmarkedURL;": [
        "Lorg/jivesoftware/smackx/bookmark/BookmarkedURL;->getURL()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/bookmark/BookmarkedURL;->getName()Ljava/lang/String;",
        "Lorg/jivesoftware/smackx/bookmark/BookmarkedURL;->setShared()V",
        "Lorg/jivesoftware/smackx/bookmark/BookmarkedURL;->setRss()V",
        "Lorg/jivesoftware/smackx/bookmark/BookmarkedURL;->setName()V",
        "Lorg/jivesoftware/smackx/bookmark/BookmarkedURL;->isRss()Z",
        "Lorg/jivesoftware/smackx/bookmark/BookmarkedURL;->isShared()Z"
    ],
    "Lorg/jivesoftware/smackx/bookmark/BookmarkManager;": [
        "Lorg/jivesoftware/smackx/bookmark/BookmarkManager;->retrieveBookmarks()Lorg/jivesoftware/smackx/bookmark/Bookmarks;"
    ],
    "Lorg/xbill/DNS/Options;": [
        "Lorg/xbill/DNS/Options;->intValue()I",
        "Lorg/xbill/DNS/Options;->refresh()V",
        "Lorg/xbill/DNS/Options;->value()Ljava/lang/String;",
        "Lorg/xbill/DNS/Options;->set()V",
        "Lorg/xbill/DNS/Options;->check()Z"
    ],
    "Lorg/xbill/DNS/X25Record;": [
        "Lorg/xbill/DNS/X25Record;->checkAndConvertAddress()[B",
        "Lorg/xbill/DNS/X25Record;->byteArrayToString()Ljava/lang/String;"
    ],
    "Lorg/xbill/DNS/Tokenizer;": [
        "Lorg/xbill/DNS/Tokenizer;->_getIdentifier()Ljava/lang/String;",
        "Lorg/xbill/DNS/Tokenizer;->getTTLLike()J",
        "Lorg/xbill/DNS/Tokenizer;->getHexString()[B",
        "Lorg/xbill/DNS/Tokenizer;->unget()V",
        "Lorg/xbill/DNS/Tokenizer;->exception()Lorg/xbill/DNS/TextParseException;",
        "Lorg/xbill/DNS/Tokenizer;->getName()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/Tokenizer;->getUInt16()I",
        "Lorg/xbill/DNS/Tokenizer;->getChar()I",
        "Lorg/xbill/DNS/Tokenizer;->close()V",
        "Lorg/xbill/DNS/Tokenizer;->checkUnbalancedParens()V",
        "Lorg/xbill/DNS/Tokenizer;->getEOL()V",
        "Lorg/xbill/DNS/Tokenizer;->getBase32String()[B",
        "Lorg/xbill/DNS/Tokenizer;->skipWhitespace()I",
        "Lorg/xbill/DNS/Tokenizer;->getUInt32()J",
        "Lorg/xbill/DNS/Tokenizer;->getLong()J",
        "Lorg/xbill/DNS/Tokenizer;->getBase64()[B",
        "Lorg/xbill/DNS/Tokenizer;->getHex()[B",
        "Lorg/xbill/DNS/Tokenizer;->getUInt8()I",
        "Lorg/xbill/DNS/Tokenizer;->remainingStrings()Ljava/lang/String;",
        "Lorg/xbill/DNS/Tokenizer;->getString()Ljava/lang/String;",
        "Lorg/xbill/DNS/Tokenizer;->get()Lorg/xbill/DNS/Tokenizer$Token;",
        "Lorg/xbill/DNS/Tokenizer;->ungetChar()V",
        "Lorg/xbill/DNS/Tokenizer;->getTTL()J",
        "Lorg/xbill/DNS/Tokenizer;->getAddress()Ljava/net/InetAddress;",
        "Lorg/xbill/DNS/Tokenizer;->getIdentifier()Ljava/lang/String;"
    ],
    "Lorg/xbill/DNS/DNSInput;": [
        "Lorg/xbill/DNS/DNSInput;->readU8()I",
        "Lorg/xbill/DNS/DNSInput;->remaining()I",
        "Lorg/xbill/DNS/DNSInput;->readByteArray()[B",
        "Lorg/xbill/DNS/DNSInput;->clearActive()V",
        "Lorg/xbill/DNS/DNSInput;->current()I",
        "Lorg/xbill/DNS/DNSInput;->require()V",
        "Lorg/xbill/DNS/DNSInput;->restore()V",
        "Lorg/xbill/DNS/DNSInput;->readByteArray()V",
        "Lorg/xbill/DNS/DNSInput;->readCountedString()[B",
        "Lorg/xbill/DNS/DNSInput;->setActive()V",
        "Lorg/xbill/DNS/DNSInput;->save()V",
        "Lorg/xbill/DNS/DNSInput;->jump()V",
        "Lorg/xbill/DNS/DNSInput;->readU16()I",
        "Lorg/xbill/DNS/DNSInput;->readU32()J"
    ],
    "Lorg/xbill/DNS/DNSOutput;": [
        "Lorg/xbill/DNS/DNSOutput;->writeU8()V",
        "Lorg/xbill/DNS/DNSOutput;->save()V",
        "Lorg/xbill/DNS/DNSOutput;->writeByteArray()V",
        "Lorg/xbill/DNS/DNSOutput;->toByteArray()[B",
        "Lorg/xbill/DNS/DNSOutput;->writeCountedString()V",
        "Lorg/xbill/DNS/DNSOutput;->writeU16()V",
        "Lorg/xbill/DNS/DNSOutput;->writeU32()V",
        "Lorg/xbill/DNS/DNSOutput;->current()I",
        "Lorg/xbill/DNS/DNSOutput;->check()V",
        "Lorg/xbill/DNS/DNSOutput;->need()V",
        "Lorg/xbill/DNS/DNSOutput;->jump()V",
        "Lorg/xbill/DNS/DNSOutput;->restore()V"
    ],
    "Lorg/xbill/DNS/Header;": [
        "Lorg/xbill/DNS/Header;->clone()Ljava/lang/Object;",
        "Lorg/xbill/DNS/Header;->incCount()V",
        "Lorg/xbill/DNS/Header;->getID()I",
        "Lorg/xbill/DNS/Header;->printFlags()Ljava/lang/String;",
        "Lorg/xbill/DNS/Header;->toWire()[B",
        "Lorg/xbill/DNS/Header;->setID()V",
        "Lorg/xbill/DNS/Header;->toStringWithRcode()Ljava/lang/String;",
        "Lorg/xbill/DNS/Header;->setCount()V",
        "Lorg/xbill/DNS/Header;->decCount()V",
        "Lorg/xbill/DNS/Header;->getRcode()I",
        "Lorg/xbill/DNS/Header;->setOpcode()V",
        "Lorg/xbill/DNS/Header;->getOpcode()I",
        "Lorg/xbill/DNS/Header;->toWire()V",
        "Lorg/xbill/DNS/Header;->setFlag()V",
        "Lorg/xbill/DNS/Header;->getFlag()Z",
        "Lorg/xbill/DNS/Header;->checkFlag()V",
        "Lorg/xbill/DNS/Header;->validFlag()Z",
        "Lorg/xbill/DNS/Header;->getCount()I"
    ],
    "Lorg/xbill/DNS/Flags;": [
        "Lorg/xbill/DNS/Flags;->string()Ljava/lang/String;",
        "Lorg/xbill/DNS/Flags;->isFlag()Z"
    ],
    "Lorg/xbill/DNS/Opcode;": [
        "Lorg/xbill/DNS/Opcode;->string()Ljava/lang/String;"
    ],
    "Lorg/xbill/DNS/Rcode;": [
        "Lorg/xbill/DNS/Rcode;->string()Ljava/lang/String;",
        "Lorg/xbill/DNS/Rcode;->TSIGstring()Ljava/lang/String;"
    ],
    "Lorg/xbill/DNS/Section;": [
        "Lorg/xbill/DNS/Section;->longString()Ljava/lang/String;",
        "Lorg/xbill/DNS/Section;->updString()Ljava/lang/String;",
        "Lorg/xbill/DNS/Section;->string()Ljava/lang/String;"
    ],
    "Ljava/nio/channels/SocketChannel;": [
        "Ljava/nio/channels/SocketChannel;->finishConnect()Z",
        "Ljava/nio/channels/SocketChannel;->write()J",
        "Ljava/nio/channels/SocketChannel;->connect()Z",
        "Ljava/nio/channels/SocketChannel;->read()I",
        "Ljava/nio/channels/SocketChannel;->socket()Ljava/net/Socket;",
        "Ljava/nio/channels/SocketChannel;->open()Ljava/nio/channels/SocketChannel;"
    ],
    "Ljava/nio/channels/SelectionKey;": [
        "Ljava/nio/channels/SelectionKey;->channel()Ljava/nio/channels/SelectableChannel;",
        "Ljava/nio/channels/SelectionKey;->selector()Ljava/nio/channels/Selector;",
        "Ljava/nio/channels/SelectionKey;->interestOps()Ljava/nio/channels/SelectionKey;",
        "Ljava/nio/channels/SelectionKey;->isValid()Z",
        "Ljava/nio/channels/SelectionKey;->isConnectable()Z",
        "Ljava/nio/channels/SelectionKey;->isWritable()Z",
        "Ljava/nio/channels/SelectionKey;->isReadable()Z"
    ],
    "Ljava/nio/ByteBuffer;": [
        "Ljava/nio/ByteBuffer;->wrap()Ljava/nio/ByteBuffer;"
    ],
    "Lorg/xbill/DNS/TCPClient;": [
        "Lorg/xbill/DNS/TCPClient;->cleanup()V",
        "Lorg/xbill/DNS/TCPClient;->_recv()[B",
        "Lorg/xbill/DNS/TCPClient;->recv()[B",
        "Lorg/xbill/DNS/TCPClient;->blockUntil()V",
        "Lorg/xbill/DNS/TCPClient;->connect()V",
        "Lorg/xbill/DNS/TCPClient;->sendrecv()[B",
        "Lorg/xbill/DNS/TCPClient;->verboseLog()V",
        "Lorg/xbill/DNS/TCPClient;->bind()V",
        "Lorg/xbill/DNS/TCPClient;->send()V"
    ],
    "Lorg/xbill/DNS/Mnemonic;": [
        "Lorg/xbill/DNS/Mnemonic;->addAll()V",
        "Lorg/xbill/DNS/Mnemonic;->sanitize()Ljava/lang/String;",
        "Lorg/xbill/DNS/Mnemonic;->getValue()I",
        "Lorg/xbill/DNS/Mnemonic;->check()V",
        "Lorg/xbill/DNS/Mnemonic;->setMaximum()V",
        "Lorg/xbill/DNS/Mnemonic;->setNumericAllowed()V",
        "Lorg/xbill/DNS/Mnemonic;->getText()Ljava/lang/String;",
        "Lorg/xbill/DNS/Mnemonic;->add()V",
        "Lorg/xbill/DNS/Mnemonic;->toInteger()Ljava/lang/Integer;",
        "Lorg/xbill/DNS/Mnemonic;->parseNumeric()I",
        "Lorg/xbill/DNS/Mnemonic;->addAlias()V",
        "Lorg/xbill/DNS/Mnemonic;->setPrefix()V"
    ],
    "Ljava/util/TreeSet;": [
        "Ljava/util/TreeSet;->contains()Z",
        "Ljava/util/TreeSet;->iterator()Ljava/util/Iterator;",
        "Ljava/util/TreeSet;->size()I",
        "Ljava/util/TreeSet;->add()Z",
        "Ljava/util/TreeSet;->clear()V",
        "Ljava/util/TreeSet;->isEmpty()Z",
        "Ljava/util/TreeSet;->last()Ljava/lang/Object;"
    ],
    "Lorg/xbill/DNS/Tokenizer$Token;": [
        "Lorg/xbill/DNS/Tokenizer$Token;->isString()Z",
        "Lorg/xbill/DNS/Tokenizer$Token;->access$100()Lorg/xbill/DNS/Tokenizer$Token;",
        "Lorg/xbill/DNS/Tokenizer$Token;->isEOL()Z"
    ],
    "Lorg/xbill/DNS/Type;": [
        "Lorg/xbill/DNS/Type;->check()V",
        "Lorg/xbill/DNS/Type;->getProto()Lorg/xbill/DNS/Record;",
        "Lorg/xbill/DNS/Type;->string()Ljava/lang/String;",
        "Lorg/xbill/DNS/Type;->value()I",
        "Lorg/xbill/DNS/Type;->isRR()Z"
    ],
    "Lorg/xbill/DNS/TypeBitmap;": [
        "Lorg/xbill/DNS/TypeBitmap;->mapToWire()V",
        "Lorg/xbill/DNS/TypeBitmap;->toWire()V",
        "Lorg/xbill/DNS/TypeBitmap;->contains()Z",
        "Lorg/xbill/DNS/TypeBitmap;->toString()Ljava/lang/String;",
        "Lorg/xbill/DNS/TypeBitmap;->toArray()[I",
        "Lorg/xbill/DNS/TypeBitmap;->empty()Z"
    ],
    "Lorg/xbill/DNS/IPSECKEYRecord;": [
        "Lorg/xbill/DNS/IPSECKEYRecord;->checkU8()I",
        "Lorg/xbill/DNS/IPSECKEYRecord;->checkName()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/utils/base64;": [
        "Lorg/xbill/DNS/utils/base64;->toString()Ljava/lang/String;",
        "Lorg/xbill/DNS/utils/base64;->fromString()[B",
        "Lorg/xbill/DNS/utils/base64;->formatString()Ljava/lang/String;"
    ],
    "Lorg/xbill/DNS/AFSDBRecord;": [
        "Lorg/xbill/DNS/AFSDBRecord;->getNameField()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/AFSDBRecord;->getU16Field()I"
    ],
    "Lorg/xbill/DNS/TXTBase;": [
        "Lorg/xbill/DNS/TXTBase;->byteArrayToString()Ljava/lang/String;",
        "Lorg/xbill/DNS/TXTBase;->byteArrayFromString()[B",
        "Lorg/xbill/DNS/TXTBase;->getStringsAsByteArrays()Ljava/util/List;",
        "Lorg/xbill/DNS/TXTBase;->getStrings()Ljava/util/List;"
    ],
    "Lorg/xbill/DNS/OPTRecord;": [
        "Lorg/xbill/DNS/OPTRecord;->checkU16()I",
        "Lorg/xbill/DNS/OPTRecord;->getExtendedRcode()I",
        "Lorg/xbill/DNS/OPTRecord;->getVersion()I",
        "Lorg/xbill/DNS/OPTRecord;->getFlags()I",
        "Lorg/xbill/DNS/OPTRecord;->getPayloadSize()I",
        "Lorg/xbill/DNS/OPTRecord;->checkU8()I"
    ],
    "Lorg/xbill/DNS/MRRecord;": [
        "Lorg/xbill/DNS/MRRecord;->getSingleName()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/PXRecord;": [
        "Lorg/xbill/DNS/PXRecord;->checkU16()I",
        "Lorg/xbill/DNS/PXRecord;->checkName()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/DNSSEC;": [
        "Lorg/xbill/DNS/DNSSEC;->fromPublicKey()[B",
        "Lorg/xbill/DNS/DNSSEC;->fromRSAPublicKey()[B",
        "Lorg/xbill/DNS/DNSSEC;->signMessage()Lorg/xbill/DNS/SIGRecord;",
        "Lorg/xbill/DNS/DNSSEC;->BigIntegerLength()I",
        "Lorg/xbill/DNS/DNSSEC;->sign()[B",
        "Lorg/xbill/DNS/DNSSEC;->matches()Z",
        "Lorg/xbill/DNS/DNSSEC;->DSASignaturetoDNS()[B",
        "Lorg/xbill/DNS/DNSSEC;->toRSAPublicKey()Ljava/security/PublicKey;",
        "Lorg/xbill/DNS/DNSSEC;->toDSAPublicKey()Ljava/security/PublicKey;",
        "Lorg/xbill/DNS/DNSSEC;->checkAlgorithm()V",
        "Lorg/xbill/DNS/DNSSEC;->readBigInteger()Ljava/math/BigInteger;",
        "Lorg/xbill/DNS/DNSSEC;->writeBigInteger()V",
        "Lorg/xbill/DNS/DNSSEC;->verifyMessage()V",
        "Lorg/xbill/DNS/DNSSEC;->verify()V",
        "Lorg/xbill/DNS/DNSSEC;->DSASignaturefromDNS()[B",
        "Lorg/xbill/DNS/DNSSEC;->digestSIG()V",
        "Lorg/xbill/DNS/DNSSEC;->toPublicKey()Ljava/security/PublicKey;",
        "Lorg/xbill/DNS/DNSSEC;->generateDS()[B",
        "Lorg/xbill/DNS/DNSSEC;->fromDSAPublicKey()[B",
        "Lorg/xbill/DNS/DNSSEC;->algString()Ljava/lang/String;",
        "Lorg/xbill/DNS/DNSSEC;->digestRRset()[B"
    ],
    "Lorg/xbill/DNS/KEYBase;": [
        "Lorg/xbill/DNS/KEYBase;->getFootprint()I",
        "Lorg/xbill/DNS/KEYBase;->getName()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/KEYBase;->getPublicKey()Ljava/security/PublicKey;",
        "Lorg/xbill/DNS/KEYBase;->getKey()[B",
        "Lorg/xbill/DNS/KEYBase;->checkU8()I",
        "Lorg/xbill/DNS/KEYBase;->getProtocol()I",
        "Lorg/xbill/DNS/KEYBase;->getFlags()I",
        "Lorg/xbill/DNS/KEYBase;->checkU16()I",
        "Lorg/xbill/DNS/KEYBase;->rrToWire()V",
        "Lorg/xbill/DNS/KEYBase;->getAlgorithm()I"
    ],
    "Lorg/xbill/DNS/DNSSEC$Algorithm;": [
        "Lorg/xbill/DNS/DNSSEC$Algorithm;->value()I"
    ],
    "Lorg/xbill/DNS/TSIG;": [
        "Lorg/xbill/DNS/TSIG;->verify()I",
        "Lorg/xbill/DNS/TSIG;->recordLength()I",
        "Lorg/xbill/DNS/TSIG;->getDigest()V",
        "Lorg/xbill/DNS/TSIG;->generate()Lorg/xbill/DNS/TSIGRecord;",
        "Lorg/xbill/DNS/TSIG;->apply()V",
        "Lorg/xbill/DNS/TSIG;->verify()B"
    ],
    "Lorg/xbill/DNS/Message;": [
        "Lorg/xbill/DNS/Message;->getHeader()Lorg/xbill/DNS/Header;",
        "Lorg/xbill/DNS/Message;->clone()Ljava/lang/Object;",
        "Lorg/xbill/DNS/Message;->getSectionArray()[Lorg/xbill/DNS/Record;",
        "Lorg/xbill/DNS/Message;->findRRset()Z",
        "Lorg/xbill/DNS/Message;->sectionToString()Ljava/lang/String;",
        "Lorg/xbill/DNS/Message;->newQuery()Lorg/xbill/DNS/Message;",
        "Lorg/xbill/DNS/Message;->addRecord()V",
        "Lorg/xbill/DNS/Message;->getQuestion()Lorg/xbill/DNS/Record;",
        "Lorg/xbill/DNS/Message;->sectionToWire()I",
        "Lorg/xbill/DNS/Message;->getRcode()I",
        "Lorg/xbill/DNS/Message;->isVerified()Z",
        "Lorg/xbill/DNS/Message;->getSectionRRsets()[Lorg/xbill/DNS/RRset;",
        "Lorg/xbill/DNS/Message;->getTSIG()Lorg/xbill/DNS/TSIGRecord;",
        "Lorg/xbill/DNS/Message;->toWire()Z",
        "Lorg/xbill/DNS/Message;->isSigned()Z",
        "Lorg/xbill/DNS/Message;->numBytes()I",
        "Lorg/xbill/DNS/Message;->getOPT()Lorg/xbill/DNS/OPTRecord;",
        "Lorg/xbill/DNS/Message;->toWire()[B",
        "Lorg/xbill/DNS/Message;->toWire()V",
        "Lorg/xbill/DNS/Message;->sameSet()Z"
    ],
    "Lorg/xbill/DNS/TSIGRecord;": [
        "Lorg/xbill/DNS/TSIGRecord;->getError()I",
        "Lorg/xbill/DNS/TSIGRecord;->checkU16()I",
        "Lorg/xbill/DNS/TSIGRecord;->getOther()[B",
        "Lorg/xbill/DNS/TSIGRecord;->getTimeSigned()Ljava/util/Date;",
        "Lorg/xbill/DNS/TSIGRecord;->toWire()V",
        "Lorg/xbill/DNS/TSIGRecord;->getFudge()I",
        "Lorg/xbill/DNS/TSIGRecord;->getAlgorithm()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/TSIGRecord;->getName()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/TSIGRecord;->checkName()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/TSIGRecord;->getSignature()[B"
    ],
    "Lorg/xbill/DNS/utils/HMAC;": [
        "Lorg/xbill/DNS/utils/HMAC;->update()V",
        "Lorg/xbill/DNS/utils/HMAC;->sign()[B",
        "Lorg/xbill/DNS/utils/HMAC;->verify()Z"
    ],
    "Lorg/xbill/DNS/Generator;": [
        "Lorg/xbill/DNS/Generator;->nextRecord()Lorg/xbill/DNS/Record;",
        "Lorg/xbill/DNS/Generator;->supportedType()Z",
        "Lorg/xbill/DNS/Generator;->substitute()Ljava/lang/String;"
    ],
    "Lorg/xbill/DNS/DClass;": [
        "Lorg/xbill/DNS/DClass;->check()V",
        "Lorg/xbill/DNS/DClass;->value()I",
        "Lorg/xbill/DNS/DClass;->string()Ljava/lang/String;"
    ],
    "Lorg/xbill/DNS/Record;": [
        "Lorg/xbill/DNS/Record;->getType()I",
        "Lorg/xbill/DNS/Record;->rrFromWire()V",
        "Lorg/xbill/DNS/Record;->toWireCanonical()V",
        "Lorg/xbill/DNS/Record;->rdataToString()Ljava/lang/String;",
        "Lorg/xbill/DNS/Record;->getObject()Lorg/xbill/DNS/Record;",
        "Lorg/xbill/DNS/Record;->getEmptyRecord()Lorg/xbill/DNS/Record;",
        "Lorg/xbill/DNS/Record;->getRRsetType()I",
        "Lorg/xbill/DNS/Record;->sameRRset()Z",
        "Lorg/xbill/DNS/Record;->fromWire()Lorg/xbill/DNS/Record;",
        "Lorg/xbill/DNS/Record;->rrToString()Ljava/lang/String;",
        "Lorg/xbill/DNS/Record;->newRecord()Lorg/xbill/DNS/Record;",
        "Lorg/xbill/DNS/Record;->setTTL()V",
        "Lorg/xbill/DNS/Record;->getAdditionalName()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/Record;->getDClass()I",
        "Lorg/xbill/DNS/Record;->withDClass()Lorg/xbill/DNS/Record;",
        "Lorg/xbill/DNS/Record;->rdataFromString()V",
        "Lorg/xbill/DNS/Record;->fromString()Lorg/xbill/DNS/Record;",
        "Lorg/xbill/DNS/Record;->toWireCanonical()[B",
        "Lorg/xbill/DNS/Record;->rdataToWireCanonical()[B",
        "Lorg/xbill/DNS/Record;->cloneRecord()Lorg/xbill/DNS/Record;",
        "Lorg/xbill/DNS/Record;->toWire()V",
        "Lorg/xbill/DNS/Record;->getName()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/Record;->getTTL()J",
        "Lorg/xbill/DNS/Record;->equals()Z",
        "Lorg/xbill/DNS/Record;->rrToWire()V"
    ],
    "Lorg/xbill/DNS/Type$TypeMnemonic;": [
        "Lorg/xbill/DNS/Type$TypeMnemonic;->getProto()Lorg/xbill/DNS/Record;",
        "Lorg/xbill/DNS/Type$TypeMnemonic;->getValue()I",
        "Lorg/xbill/DNS/Type$TypeMnemonic;->getText()Ljava/lang/String;",
        "Lorg/xbill/DNS/Type$TypeMnemonic;->add()V"
    ],
    "Lorg/xbill/DNS/ResolverConfig;": [
        "Lorg/xbill/DNS/ResolverConfig;->findNT()V",
        "Lorg/xbill/DNS/ResolverConfig;->configureFromLists()V",
        "Lorg/xbill/DNS/ResolverConfig;->servers()[Ljava/lang/String;",
        "Lorg/xbill/DNS/ResolverConfig;->findProperty()Z",
        "Lorg/xbill/DNS/ResolverConfig;->findSunJVM()Z",
        "Lorg/xbill/DNS/ResolverConfig;->findUnix()V",
        "Lorg/xbill/DNS/ResolverConfig;->findNetware()V",
        "Lorg/xbill/DNS/ResolverConfig;->findAndroid()V",
        "Lorg/xbill/DNS/ResolverConfig;->refresh()V",
        "Lorg/xbill/DNS/ResolverConfig;->server()Ljava/lang/String;",
        "Lorg/xbill/DNS/ResolverConfig;->find95()V",
        "Lorg/xbill/DNS/ResolverConfig;->findResolvConf()V",
        "Lorg/xbill/DNS/ResolverConfig;->addServer()V",
        "Lorg/xbill/DNS/ResolverConfig;->searchPath()[Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/ResolverConfig;->getCurrentConfig()Lorg/xbill/DNS/ResolverConfig;",
        "Lorg/xbill/DNS/ResolverConfig;->addSearch()V",
        "Lorg/xbill/DNS/ResolverConfig;->findWin()V"
    ],
    "Lorg/xbill/DNS/Resolver;": [
        "Lorg/xbill/DNS/Resolver;->send()Lorg/xbill/DNS/Message;",
        "Lorg/xbill/DNS/Resolver;->setEDNS()V",
        "Lorg/xbill/DNS/Resolver;->setTSIGKey()V",
        "Lorg/xbill/DNS/Resolver;->setIgnoreTruncation()V",
        "Lorg/xbill/DNS/Resolver;->setTCP()V",
        "Lorg/xbill/DNS/Resolver;->setPort()V",
        "Lorg/xbill/DNS/Resolver;->setTimeout()V"
    ],
    "Lorg/xbill/DNS/ExtendedResolver$Resolution;": [
        "Lorg/xbill/DNS/ExtendedResolver$Resolution;->start()Lorg/xbill/DNS/Message;",
        "Lorg/xbill/DNS/ExtendedResolver$Resolution;->startAsync()V"
    ],
    "Lorg/xbill/DNS/ExtendedResolver;": [
        "Lorg/xbill/DNS/ExtendedResolver;->setTimeout()V"
    ],
    "Lorg/xbill/DNS/SIGRecord;": [
        "Lorg/xbill/DNS/SIGRecord;->getTypeCovered()I",
        "Lorg/xbill/DNS/SIGRecord;->getExpire()Ljava/util/Date;",
        "Lorg/xbill/DNS/SIGRecord;->getTimeSigned()Ljava/util/Date;",
        "Lorg/xbill/DNS/SIGRecord;->getSignature()[B",
        "Lorg/xbill/DNS/SIGRecord;->getAlgorithm()I",
        "Lorg/xbill/DNS/SIGRecord;->setSignature()V"
    ],
    "Lorg/xbill/DNS/ZoneTransferIn;": [
        "Lorg/xbill/DNS/ZoneTransferIn;->getSOASerial()J",
        "Lorg/xbill/DNS/ZoneTransferIn;->isIXFR()Z",
        "Lorg/xbill/DNS/ZoneTransferIn;->getAXFR()Ljava/util/List;",
        "Lorg/xbill/DNS/ZoneTransferIn;->doxfr()V",
        "Lorg/xbill/DNS/ZoneTransferIn;->setDClass()V",
        "Lorg/xbill/DNS/ZoneTransferIn;->sendQuery()V",
        "Lorg/xbill/DNS/ZoneTransferIn;->logxfr()V",
        "Lorg/xbill/DNS/ZoneTransferIn;->fallback()V",
        "Lorg/xbill/DNS/ZoneTransferIn;->setLocalAddress()V",
        "Lorg/xbill/DNS/ZoneTransferIn;->isAXFR()Z",
        "Lorg/xbill/DNS/ZoneTransferIn;->openConnection()V",
        "Lorg/xbill/DNS/ZoneTransferIn;->getName()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/ZoneTransferIn;->newAXFR()Lorg/xbill/DNS/ZoneTransferIn;",
        "Lorg/xbill/DNS/ZoneTransferIn;->setTimeout()V",
        "Lorg/xbill/DNS/ZoneTransferIn;->run()Ljava/util/List;",
        "Lorg/xbill/DNS/ZoneTransferIn;->newIXFR()Lorg/xbill/DNS/ZoneTransferIn;",
        "Lorg/xbill/DNS/ZoneTransferIn;->parseMessage()Lorg/xbill/DNS/Message;",
        "Lorg/xbill/DNS/ZoneTransferIn;->closeConnection()V",
        "Lorg/xbill/DNS/ZoneTransferIn;->isCurrent()Z",
        "Lorg/xbill/DNS/ZoneTransferIn;->fail()V",
        "Lorg/xbill/DNS/ZoneTransferIn;->parseRR()V"
    ],
    "Lorg/xbill/DNS/SimpleResolver;": [
        "Lorg/xbill/DNS/SimpleResolver;->verifyTSIG()V",
        "Lorg/xbill/DNS/SimpleResolver;->sendAXFR()Lorg/xbill/DNS/Message;",
        "Lorg/xbill/DNS/SimpleResolver;->getTimeout()J",
        "Lorg/xbill/DNS/SimpleResolver;->maxUDPSize()I",
        "Lorg/xbill/DNS/SimpleResolver;->setEDNS()V",
        "Lorg/xbill/DNS/SimpleResolver;->parseMessage()Lorg/xbill/DNS/Message;",
        "Lorg/xbill/DNS/SimpleResolver;->applyEDNS()V",
        "Lorg/xbill/DNS/SimpleResolver;->setTimeout()V"
    ],
    "Lorg/xbill/DNS/ZoneTransferException;": [
        "Lorg/xbill/DNS/ZoneTransferException;->getMessage()Ljava/lang/String;"
    ],
    "Ljava/net/InetSocketAddress;": [
        "Ljava/net/InetSocketAddress;->getAddress()Ljava/net/InetAddress;",
        "Ljava/net/InetSocketAddress;->getPort()I"
    ],
    "Lorg/xbill/DNS/UDPClient;": [
        "Lorg/xbill/DNS/UDPClient;->recv()[B",
        "Lorg/xbill/DNS/UDPClient;->cleanup()V",
        "Lorg/xbill/DNS/UDPClient;->sendrecv()[B",
        "Lorg/xbill/DNS/UDPClient;->bind()V",
        "Lorg/xbill/DNS/UDPClient;->bind_random()V",
        "Lorg/xbill/DNS/UDPClient;->send()V",
        "Lorg/xbill/DNS/UDPClient;->blockUntil()V",
        "Lorg/xbill/DNS/UDPClient;->verboseLog()V",
        "Lorg/xbill/DNS/UDPClient;->connect()V"
    ],
    "Lorg/xbill/DNS/KEYRecord$Flags;": [
        "Lorg/xbill/DNS/KEYRecord$Flags;->value()I"
    ],
    "Lorg/xbill/DNS/KEYRecord$Protocol;": [
        "Lorg/xbill/DNS/KEYRecord$Protocol;->value()I"
    ],
    "Lorg/xbill/DNS/NSEC3Record;": [
        "Lorg/xbill/DNS/NSEC3Record;->checkU16()I",
        "Lorg/xbill/DNS/NSEC3Record;->checkU8()I",
        "Lorg/xbill/DNS/NSEC3Record;->hashName()[B"
    ],
    "Lorg/xbill/DNS/utils/base32;": [
        "Lorg/xbill/DNS/utils/base32;->blockLenToPadding()I",
        "Lorg/xbill/DNS/utils/base32;->fromString()[B",
        "Lorg/xbill/DNS/utils/base32;->paddingToBlockLen()I",
        "Lorg/xbill/DNS/utils/base32;->toString()Ljava/lang/String;"
    ],
    "Lorg/xbill/DNS/utils/base16;": [
        "Lorg/xbill/DNS/utils/base16;->fromString()[B",
        "Lorg/xbill/DNS/utils/base16;->toString()Ljava/lang/String;"
    ],
    "Lorg/xbill/DNS/SingleNameBase;": [
        "Lorg/xbill/DNS/SingleNameBase;->checkName()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/RRset;": [
        "Lorg/xbill/DNS/RRset;->rrs()Ljava/util/Iterator;",
        "Lorg/xbill/DNS/RRset;->size()I",
        "Lorg/xbill/DNS/RRset;->safeAddRR()V",
        "Lorg/xbill/DNS/RRset;->addRR()V",
        "Lorg/xbill/DNS/RRset;->getType()I",
        "Lorg/xbill/DNS/RRset;->deleteRR()V",
        "Lorg/xbill/DNS/RRset;->sigs()Ljava/util/Iterator;",
        "Lorg/xbill/DNS/RRset;->first()Lorg/xbill/DNS/Record;",
        "Lorg/xbill/DNS/RRset;->getName()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/RRset;->iterator()Ljava/util/Iterator;",
        "Lorg/xbill/DNS/RRset;->getDClass()I",
        "Lorg/xbill/DNS/RRset;->iteratorToString()Ljava/lang/String;",
        "Lorg/xbill/DNS/RRset;->getTTL()J"
    ],
    "Ljava/text/DecimalFormat;": [
        "Ljava/text/DecimalFormat;->format()Ljava/lang/String;",
        "Ljava/text/DecimalFormat;->setMinimumIntegerDigits()V"
    ],
    "Lorg/xbill/DNS/DNAMERecord;": [
        "Lorg/xbill/DNS/DNAMERecord;->getName()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/DNAMERecord;->getTarget()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/DNAMERecord;->getSingleName()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/Compression;": [
        "Lorg/xbill/DNS/Compression;->add()V",
        "Lorg/xbill/DNS/Compression;->get()I"
    ],
    "Lorg/xbill/DNS/MGRecord;": [
        "Lorg/xbill/DNS/MGRecord;->getSingleName()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/NSAP_PTRRecord;": [
        "Lorg/xbill/DNS/NSAP_PTRRecord;->getSingleName()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/Address;": [
        "Lorg/xbill/DNS/Address;->addressLength()I",
        "Lorg/xbill/DNS/Address;->familyOf()I",
        "Lorg/xbill/DNS/Address;->toByteArray()[B",
        "Lorg/xbill/DNS/Address;->toDottedQuad()Ljava/lang/String;",
        "Lorg/xbill/DNS/Address;->lookupHostName()[Lorg/xbill/DNS/Record;",
        "Lorg/xbill/DNS/Address;->toArray()[I",
        "Lorg/xbill/DNS/Address;->parseV6()[B",
        "Lorg/xbill/DNS/Address;->addrFromRecord()Ljava/net/InetAddress;",
        "Lorg/xbill/DNS/Address;->parseV4()[B",
        "Lorg/xbill/DNS/Address;->getByAddress()Ljava/net/InetAddress;"
    ],
    "Lorg/xbill/DNS/TextParseException;": [
        "Lorg/xbill/DNS/TextParseException;->getMessage()Ljava/lang/String;"
    ],
    "Lorg/xbill/DNS/TTL;": [
        "Lorg/xbill/DNS/TTL;->parse()J",
        "Lorg/xbill/DNS/TTL;->check()V",
        "Lorg/xbill/DNS/TTL;->format()Ljava/lang/String;",
        "Lorg/xbill/DNS/TTL;->parseTTL()J"
    ],
    "Lorg/xbill/DNS/SIGBase;": [
        "Lorg/xbill/DNS/SIGBase;->getTimeSigned()Ljava/util/Date;",
        "Lorg/xbill/DNS/SIGBase;->getTypeCovered()I",
        "Lorg/xbill/DNS/SIGBase;->checkU16()I",
        "Lorg/xbill/DNS/SIGBase;->getAlgorithm()I",
        "Lorg/xbill/DNS/SIGBase;->checkU8()I",
        "Lorg/xbill/DNS/SIGBase;->getLabels()I",
        "Lorg/xbill/DNS/SIGBase;->getOrigTTL()J",
        "Lorg/xbill/DNS/SIGBase;->checkName()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/SIGBase;->getSignature()[B",
        "Lorg/xbill/DNS/SIGBase;->getExpire()Ljava/util/Date;",
        "Lorg/xbill/DNS/SIGBase;->getFootprint()I",
        "Lorg/xbill/DNS/SIGBase;->getSigner()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/RRSIGRecord;": [
        "Lorg/xbill/DNS/RRSIGRecord;->getTimeSigned()Ljava/util/Date;",
        "Lorg/xbill/DNS/RRSIGRecord;->getAlgorithm()I",
        "Lorg/xbill/DNS/RRSIGRecord;->getExpire()Ljava/util/Date;",
        "Lorg/xbill/DNS/RRSIGRecord;->getLabels()I",
        "Lorg/xbill/DNS/RRSIGRecord;->getSignature()[B",
        "Lorg/xbill/DNS/RRSIGRecord;->getTypeCovered()I",
        "Lorg/xbill/DNS/RRSIGRecord;->getOrigTTL()J",
        "Lorg/xbill/DNS/RRSIGRecord;->setSignature()V"
    ],
    "Lorg/xbill/DNS/MINFORecord;": [
        "Lorg/xbill/DNS/MINFORecord;->checkName()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/A6Record;": [
        "Lorg/xbill/DNS/A6Record;->checkU8()I",
        "Lorg/xbill/DNS/A6Record;->checkName()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/DLVRecord;": [
        "Lorg/xbill/DNS/DLVRecord;->checkU8()I",
        "Lorg/xbill/DNS/DLVRecord;->checkU16()I"
    ],
    "Lorg/xbill/DNS/Master;": [
        "Lorg/xbill/DNS/Master;->parseTTLClassAndType()V",
        "Lorg/xbill/DNS/Master;->parseName()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/Master;->_nextRecord()Lorg/xbill/DNS/Record;",
        "Lorg/xbill/DNS/Master;->nextGenerated()Lorg/xbill/DNS/Record;",
        "Lorg/xbill/DNS/Master;->parseUInt32()J",
        "Lorg/xbill/DNS/Master;->startGenerate()V",
        "Lorg/xbill/DNS/Master;->nextRecord()Lorg/xbill/DNS/Record;",
        "Lorg/xbill/DNS/Master;->endGenerate()V"
    ],
    "Lorg/xbill/DNS/Cache;": [
        "Lorg/xbill/DNS/Cache;->findRecords()[Lorg/xbill/DNS/RRset;",
        "Lorg/xbill/DNS/Cache;->removeElement()V",
        "Lorg/xbill/DNS/Cache;->removeName()V",
        "Lorg/xbill/DNS/Cache;->lookup()Lorg/xbill/DNS/SetResponse;",
        "Lorg/xbill/DNS/Cache;->markAdditional()V",
        "Lorg/xbill/DNS/Cache;->allElements()[Lorg/xbill/DNS/Cache$Element;",
        "Lorg/xbill/DNS/Cache;->oneElement()Lorg/xbill/DNS/Cache$Element;",
        "Lorg/xbill/DNS/Cache;->limitExpire()I",
        "Lorg/xbill/DNS/Cache;->addRecord()V",
        "Lorg/xbill/DNS/Cache;->getCred()I",
        "Lorg/xbill/DNS/Cache;->addNegative()V",
        "Lorg/xbill/DNS/Cache;->addMessage()Lorg/xbill/DNS/SetResponse;",
        "Lorg/xbill/DNS/Cache;->exactName()Ljava/lang/Object;",
        "Lorg/xbill/DNS/Cache;->addRRset()V",
        "Lorg/xbill/DNS/Cache;->addElement()V",
        "Lorg/xbill/DNS/Cache;->findElement()Lorg/xbill/DNS/Cache$Element;",
        "Lorg/xbill/DNS/Cache;->lookupRecords()Lorg/xbill/DNS/SetResponse;",
        "Lorg/xbill/DNS/Cache;->clearCache()V"
    ],
    "Lorg/xbill/DNS/Cache$CacheMap;": [
        "Lorg/xbill/DNS/Cache$CacheMap;->get()Ljava/lang/Object;",
        "Lorg/xbill/DNS/Cache$CacheMap;->getMaxSize()I",
        "Lorg/xbill/DNS/Cache$CacheMap;->remove()Ljava/lang/Object;",
        "Lorg/xbill/DNS/Cache$CacheMap;->clear()V",
        "Lorg/xbill/DNS/Cache$CacheMap;->setMaxSize()V",
        "Lorg/xbill/DNS/Cache$CacheMap;->size()I",
        "Lorg/xbill/DNS/Cache$CacheMap;->values()Ljava/util/Collection;",
        "Lorg/xbill/DNS/Cache$CacheMap;->put()Ljava/lang/Object;"
    ],
    "Lorg/xbill/DNS/Cache$Element;": [
        "Lorg/xbill/DNS/Cache$Element;->expired()Z",
        "Lorg/xbill/DNS/Cache$Element;->getType()I",
        "Lorg/xbill/DNS/Cache$Element;->compareCredibility()I"
    ],
    "Lorg/xbill/DNS/SetResponse;": [
        "Lorg/xbill/DNS/SetResponse;->isDNAME()Z",
        "Lorg/xbill/DNS/SetResponse;->ofType()Lorg/xbill/DNS/SetResponse;",
        "Lorg/xbill/DNS/SetResponse;->addRRset()V",
        "Lorg/xbill/DNS/SetResponse;->getCNAME()Lorg/xbill/DNS/CNAMERecord;",
        "Lorg/xbill/DNS/SetResponse;->isCNAME()Z",
        "Lorg/xbill/DNS/SetResponse;->isSuccessful()Z",
        "Lorg/xbill/DNS/SetResponse;->isNXDOMAIN()Z",
        "Lorg/xbill/DNS/SetResponse;->answers()[Lorg/xbill/DNS/RRset;",
        "Lorg/xbill/DNS/SetResponse;->isDelegation()Z",
        "Lorg/xbill/DNS/SetResponse;->isNXRRSET()Z",
        "Lorg/xbill/DNS/SetResponse;->getDNAME()Lorg/xbill/DNS/DNAMERecord;"
    ],
    "Lorg/xbill/DNS/CNAMERecord;": [
        "Lorg/xbill/DNS/CNAMERecord;->getTarget()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/CNAMERecord;->getSingleName()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/SOARecord;": [
        "Lorg/xbill/DNS/SOARecord;->getTTL()J",
        "Lorg/xbill/DNS/SOARecord;->getMinimum()J",
        "Lorg/xbill/DNS/SOARecord;->checkName()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/SOARecord;->checkU32()J",
        "Lorg/xbill/DNS/SOARecord;->getSerial()J"
    ],
    "Lorg/xbill/DNS/Cache$CacheRRset;": [
        "Lorg/xbill/DNS/Cache$CacheRRset;->addRR()V"
    ],
    "Lorg/xbill/DNS/Update;": [
        "Lorg/xbill/DNS/Update;->add()V",
        "Lorg/xbill/DNS/Update;->newPrereq()V",
        "Lorg/xbill/DNS/Update;->addRecord()V",
        "Lorg/xbill/DNS/Update;->replace()V",
        "Lorg/xbill/DNS/Update;->getHeader()Lorg/xbill/DNS/Header;",
        "Lorg/xbill/DNS/Update;->newUpdate()V",
        "Lorg/xbill/DNS/Update;->delete()V"
    ],
    "Lorg/xbill/DNS/NULLRecord;": [
        "Lorg/xbill/DNS/NULLRecord;->unknownToString()Ljava/lang/String;"
    ],
    "Ljava/text/NumberFormat;": [
        "Ljava/text/NumberFormat;->setGroupingUsed()V",
        "Ljava/text/NumberFormat;->format()Ljava/lang/String;",
        "Ljava/text/NumberFormat;->setMinimumIntegerDigits()V"
    ],
    "Lorg/xbill/DNS/LOCRecord;": [
        "Lorg/xbill/DNS/LOCRecord;->positionToString()Ljava/lang/String;",
        "Lorg/xbill/DNS/LOCRecord;->toLOCformat()I",
        "Lorg/xbill/DNS/LOCRecord;->parseFixedPoint()D",
        "Lorg/xbill/DNS/LOCRecord;->parseLOCformat()J",
        "Lorg/xbill/DNS/LOCRecord;->parseDouble()J",
        "Lorg/xbill/DNS/LOCRecord;->parsePosition()J",
        "Lorg/xbill/DNS/LOCRecord;->renderFixedPoint()V"
    ],
    "Ljava/lang/Process;": [
        "Ljava/lang/Process;->getInputStream()Ljava/io/InputStream;",
        "Ljava/lang/Process;->destroy()V",
        "Ljava/lang/Process;->waitFor()I"
    ],
    "Ljava/lang/Package;": [
        "Ljava/lang/Package;->getName()Ljava/lang/String;"
    ],
    "Ljava/util/ResourceBundle;": [
        "Ljava/util/ResourceBundle;->getString()Ljava/lang/String;",
        "Ljava/util/ResourceBundle;->getBundle()Ljava/util/ResourceBundle;"
    ],
    "Lorg/xbill/DNS/NXTRecord;": [
        "Lorg/xbill/DNS/NXTRecord;->checkName()Lorg/xbill/DNS/Name;"
    ],
    "Ljava/util/BitSet;": [
        "Ljava/util/BitSet;->get()Z",
        "Ljava/util/BitSet;->set()V",
        "Ljava/util/BitSet;->length()I"
    ],
    "Lorg/xbill/DNS/NSECRecord;": [
        "Lorg/xbill/DNS/NSECRecord;->checkName()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/ResolverListener;": [
        "Lorg/xbill/DNS/ResolverListener;->receiveMessage()V",
        "Lorg/xbill/DNS/ResolverListener;->handleException()V"
    ],
    "Lorg/xbill/DNS/NSAPRecord;": [
        "Lorg/xbill/DNS/NSAPRecord;->byteArrayToString()Ljava/lang/String;",
        "Lorg/xbill/DNS/NSAPRecord;->checkAndConvertAddress()[B"
    ],
    "Lorg/xbill/DNS/NSEC3PARAMRecord;": [
        "Lorg/xbill/DNS/NSEC3PARAMRecord;->checkU16()I",
        "Lorg/xbill/DNS/NSEC3PARAMRecord;->checkU8()I"
    ],
    "Lorg/xbill/DNS/MXRecord;": [
        "Lorg/xbill/DNS/MXRecord;->getU16Field()I",
        "Lorg/xbill/DNS/MXRecord;->getNameField()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/MFRecord;": [
        "Lorg/xbill/DNS/MFRecord;->getSingleName()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/GPOSRecord;": [
        "Lorg/xbill/DNS/GPOSRecord;->getLatitudeString()Ljava/lang/String;",
        "Lorg/xbill/DNS/GPOSRecord;->getLongitude()D",
        "Lorg/xbill/DNS/GPOSRecord;->validate()V",
        "Lorg/xbill/DNS/GPOSRecord;->byteArrayFromString()[B",
        "Lorg/xbill/DNS/GPOSRecord;->byteArrayToString()Ljava/lang/String;",
        "Lorg/xbill/DNS/GPOSRecord;->getAltitudeString()Ljava/lang/String;",
        "Lorg/xbill/DNS/GPOSRecord;->getLatitude()D",
        "Lorg/xbill/DNS/GPOSRecord;->getLongitudeString()Ljava/lang/String;"
    ],
    "Lorg/xbill/DNS/TKEYRecord;": [
        "Lorg/xbill/DNS/TKEYRecord;->modeString()Ljava/lang/String;",
        "Lorg/xbill/DNS/TKEYRecord;->checkName()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/TKEYRecord;->checkU16()I"
    ],
    "Lorg/xbill/DNS/FormattedTime;": [
        "Lorg/xbill/DNS/FormattedTime;->parse()Ljava/util/Date;",
        "Lorg/xbill/DNS/FormattedTime;->format()Ljava/lang/String;"
    ],
    "Lorg/xbill/DNS/RPRecord;": [
        "Lorg/xbill/DNS/RPRecord;->checkName()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/APLRecord;": [
        "Lorg/xbill/DNS/APLRecord;->parseAddress()[B",
        "Lorg/xbill/DNS/APLRecord;->validatePrefixLength()Z",
        "Lorg/xbill/DNS/APLRecord;->addressLength()I"
    ],
    "Lorg/xbill/DNS/DSRecord;": [
        "Lorg/xbill/DNS/DSRecord;->checkU8()I",
        "Lorg/xbill/DNS/DSRecord;->checkU16()I"
    ],
    "Lorg/xbill/DNS/DNSKEYRecord;": [
        "Lorg/xbill/DNS/DNSKEYRecord;->getFootprint()I",
        "Lorg/xbill/DNS/DNSKEYRecord;->getName()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/DNSKEYRecord;->rdataToWireCanonical()[B",
        "Lorg/xbill/DNS/DNSKEYRecord;->getPublicKey()Ljava/security/PublicKey;",
        "Lorg/xbill/DNS/DNSKEYRecord;->getAlgorithm()I"
    ],
    "Lorg/xbill/DNS/Tokenizer$TokenizerException;": [
        "Lorg/xbill/DNS/Tokenizer$TokenizerException;->getBaseMessage()Ljava/lang/String;"
    ],
    "Lorg/xbill/DNS/ReverseMap;": [
        "Lorg/xbill/DNS/ReverseMap;->fromAddress()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/CERTRecord;": [
        "Lorg/xbill/DNS/CERTRecord;->checkU8()I",
        "Lorg/xbill/DNS/CERTRecord;->checkU16()I"
    ],
    "Lorg/xbill/DNS/CERTRecord$CertificateType;": [
        "Lorg/xbill/DNS/CERTRecord$CertificateType;->value()I"
    ],
    "Ljava/nio/channels/Selector;": [
        "Ljava/nio/channels/Selector;->open()Ljava/nio/channels/Selector;",
        "Ljava/nio/channels/Selector;->selectNow()I",
        "Ljava/nio/channels/Selector;->select()I",
        "Ljava/nio/channels/Selector;->close()V"
    ],
    "Ljava/nio/channels/SelectableChannel;": [
        "Ljava/nio/channels/SelectableChannel;->close()V",
        "Ljava/nio/channels/SelectableChannel;->register()Ljava/nio/channels/SelectionKey;",
        "Ljava/nio/channels/SelectableChannel;->configureBlocking()Ljava/nio/channels/SelectableChannel;"
    ],
    "Lorg/xbill/DNS/utils/hexdump;": [
        "Lorg/xbill/DNS/utils/hexdump;->dump()Ljava/lang/String;"
    ],
    "Lorg/xbill/DNS/KXRecord;": [
        "Lorg/xbill/DNS/KXRecord;->getU16Field()I",
        "Lorg/xbill/DNS/KXRecord;->getNameField()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/NAPTRRecord;": [
        "Lorg/xbill/DNS/NAPTRRecord;->checkName()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/NAPTRRecord;->checkU16()I",
        "Lorg/xbill/DNS/NAPTRRecord;->byteArrayFromString()[B",
        "Lorg/xbill/DNS/NAPTRRecord;->byteArrayToString()Ljava/lang/String;"
    ],
    "Lorg/xbill/DNS/ISDNRecord;": [
        "Lorg/xbill/DNS/ISDNRecord;->byteArrayFromString()[B",
        "Lorg/xbill/DNS/ISDNRecord;->byteArrayToString()Ljava/lang/String;"
    ],
    "Lorg/xbill/DNS/MDRecord;": [
        "Lorg/xbill/DNS/MDRecord;->getSingleName()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/SSHFPRecord;": [
        "Lorg/xbill/DNS/SSHFPRecord;->checkU8()I"
    ],
    "Lorg/xbill/DNS/MBRecord;": [
        "Lorg/xbill/DNS/MBRecord;->getSingleName()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/HINFORecord;": [
        "Lorg/xbill/DNS/HINFORecord;->byteArrayFromString()[B",
        "Lorg/xbill/DNS/HINFORecord;->byteArrayToString()Ljava/lang/String;"
    ],
    "Lorg/xbill/DNS/UNKRecord;": [
        "Lorg/xbill/DNS/UNKRecord;->unknownToString()Ljava/lang/String;"
    ],
    "Lorg/xbill/DNS/ARecord;": [
        "Lorg/xbill/DNS/ARecord;->getAddress()Ljava/net/InetAddress;",
        "Lorg/xbill/DNS/ARecord;->toArray()[B",
        "Lorg/xbill/DNS/ARecord;->fromArray()I"
    ],
    "Lorg/xbill/DNS/NSRecord;": [
        "Lorg/xbill/DNS/NSRecord;->getSingleName()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/PTRRecord;": [
        "Lorg/xbill/DNS/PTRRecord;->getSingleName()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/PTRRecord;->getTarget()Lorg/xbill/DNS/Name;"
    ],
    "Lorg/xbill/DNS/TSIG$StreamVerifier;": [
        "Lorg/xbill/DNS/TSIG$StreamVerifier;->verify()I"
    ],
    "Lorg/xbill/DNS/Serial;": [
        "Lorg/xbill/DNS/Serial;->compare()I"
    ],
    "Ljava/nio/channels/DatagramChannel;": [
        "Ljava/nio/channels/DatagramChannel;->socket()Ljava/net/DatagramSocket;",
        "Ljava/nio/channels/DatagramChannel;->write()I",
        "Ljava/nio/channels/DatagramChannel;->open()Ljava/nio/channels/DatagramChannel;",
        "Ljava/nio/channels/DatagramChannel;->connect()Ljava/nio/channels/DatagramChannel;",
        "Ljava/nio/channels/DatagramChannel;->read()I"
    ],
    "Ljava/security/SecureRandom;": [
        "Ljava/security/SecureRandom;->nextBytes()V",
        "Ljava/security/SecureRandom;->getInstance()Ljava/security/SecureRandom;",
        "Ljava/security/SecureRandom;->nextInt()I",
        "Ljava/security/SecureRandom;->nextLong()J"
    ],
    "Ljava/net/DatagramSocket;": [
        "Ljava/net/DatagramSocket;->bind()V"
    ],
    "Ljava/math/BigInteger;": [
        "Ljava/math/BigInteger;->bitLength()I",
        "Ljava/math/BigInteger;->toByteArray()[B"
    ],
    "Ljava/security/interfaces/DSAPublicKey;": [
        "Ljava/security/interfaces/DSAPublicKey;->getY()Ljava/math/BigInteger;",
        "Ljava/security/interfaces/DSAPublicKey;->getParams()Ljava/security/interfaces/DSAParams;"
    ],
    "Ljava/security/interfaces/DSAParams;": [
        "Ljava/security/interfaces/DSAParams;->getP()Ljava/math/BigInteger;",
        "Ljava/security/interfaces/DSAParams;->getQ()Ljava/math/BigInteger;",
        "Ljava/security/interfaces/DSAParams;->getG()Ljava/math/BigInteger;"
    ],
    "Ljava/security/interfaces/RSAPublicKey;": [
        "Ljava/security/interfaces/RSAPublicKey;->getModulus()Ljava/math/BigInteger;",
        "Ljava/security/interfaces/RSAPublicKey;->getPublicExponent()Ljava/math/BigInteger;"
    ],
    "Ljava/security/Signature;": [
        "Ljava/security/Signature;->verify()Z",
        "Ljava/security/Signature;->sign()[B",
        "Ljava/security/Signature;->getInstance()Ljava/security/Signature;",
        "Ljava/security/Signature;->update()V"
    ],
    "Ljava/security/GeneralSecurityException;": [
        "Ljava/security/GeneralSecurityException;->toString()Ljava/lang/String;"
    ],
    "Lorg/xbill/DNS/KEYRecord;": [
        "Lorg/xbill/DNS/KEYRecord;->getPublicKey()Ljava/security/PublicKey;",
        "Lorg/xbill/DNS/KEYRecord;->getName()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/KEYRecord;->getAlgorithm()I",
        "Lorg/xbill/DNS/KEYRecord;->getFootprint()I"
    ],
    "Ljava/security/KeyFactory;": [
        "Ljava/security/KeyFactory;->generatePublic()Ljava/security/PublicKey;",
        "Ljava/security/KeyFactory;->getInstance()Ljava/security/KeyFactory;"
    ],
    "Lorg/xbill/DNS/RTRecord;": [
        "Lorg/xbill/DNS/RTRecord;->getNameField()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/RTRecord;->getU16Field()I"
    ],
    "Lorg/xbill/DNS/Zone;": [
        "Lorg/xbill/DNS/Zone;->AXFR()Ljava/util/Iterator;",
        "Lorg/xbill/DNS/Zone;->fromXFR()V",
        "Lorg/xbill/DNS/Zone;->nodeToString()V",
        "Lorg/xbill/DNS/Zone;->oneRRset()Lorg/xbill/DNS/RRset;",
        "Lorg/xbill/DNS/Zone;->maybeAddRecord()V",
        "Lorg/xbill/DNS/Zone;->validate()V",
        "Lorg/xbill/DNS/Zone;->iterator()Ljava/util/Iterator;",
        "Lorg/xbill/DNS/Zone;->removeRRset()V",
        "Lorg/xbill/DNS/Zone;->lookup()Lorg/xbill/DNS/SetResponse;",
        "Lorg/xbill/DNS/Zone;->addRRset()V",
        "Lorg/xbill/DNS/Zone;->allRRsets()[Lorg/xbill/DNS/RRset;",
        "Lorg/xbill/DNS/Zone;->addRecord()V",
        "Lorg/xbill/DNS/Zone;->toMasterFile()Ljava/lang/String;",
        "Lorg/xbill/DNS/Zone;->findRRset()Lorg/xbill/DNS/RRset;",
        "Lorg/xbill/DNS/Zone;->exactName()Ljava/lang/Object;"
    ],
    "Lorg/xbill/DNS/U16NameBase;": [
        "Lorg/xbill/DNS/U16NameBase;->checkName()Lorg/xbill/DNS/Name;",
        "Lorg/xbill/DNS/U16NameBase;->checkU16()I"
    ],
    "Lorg/xbill/DNS/WKSRecord;": [
        "Lorg/xbill/DNS/WKSRecord;->checkU8()I",
        "Lorg/xbill/DNS/WKSRecord;->checkU16()I"
    ],
    "Lorg/xbill/DNS/WKSRecord$Protocol;": [
        "Lorg/xbill/DNS/WKSRecord$Protocol;->value()I"
    ],
    "Lorg/xbill/DNS/WKSRecord$Service;": [
        "Lorg/xbill/DNS/WKSRecord$Service;->value()I"
    ],
    "Lorg/xbill/DNS/spi/DNSJavaNameService;": [
        "Lorg/xbill/DNS/spi/DNSJavaNameService;->lookupAllHostAddr()[Ljava/net/InetAddress;",
        "Lorg/xbill/DNS/spi/DNSJavaNameService;->getHostByAddr()Ljava/lang/String;"
    ],
    "Lorg/xbill/DNS/AAAARecord;": [
        "Lorg/xbill/DNS/AAAARecord;->getAddress()Ljava/net/InetAddress;"
    ],
    "Lorg/xbill/DNS/tests/primary;": [
        "Lorg/xbill/DNS/tests/primary;->usage()V"
    ],
    "Lorg/xbill/DNS/tests/xfrin;": [
        "Lorg/xbill/DNS/tests/xfrin;->usage()V"
    ],
    "Lorg/apache/harmony/javax/security/auth/Subject;": [
        "Lorg/apache/harmony/javax/security/auth/Subject;->checkState()V",
        "Lorg/apache/harmony/javax/security/auth/Subject;->doAs_PrivilegedAction()Ljava/lang/Object;",
        "Lorg/apache/harmony/javax/security/auth/Subject;->doAs_PrivilegedExceptionAction()Ljava/lang/Object;",
        "Lorg/apache/harmony/javax/security/auth/Subject;->checkPermission()V",
        "Lorg/apache/harmony/javax/security/auth/Subject;->getPrincipals()Ljava/util/Set;"
    ],
    "Ljava/lang/SecurityManager;": [
        "Ljava/lang/SecurityManager;->checkPermission()V"
    ],
    "Ljava/security/AccessController;": [
        "Ljava/security/AccessController;->doPrivileged()Ljava/lang/Object;",
        "Ljava/security/AccessController;->getContext()Ljava/security/AccessControlContext;"
    ],
    "Lorg/apache/harmony/javax/security/auth/SubjectDomainCombiner;": [
        "Lorg/apache/harmony/javax/security/auth/SubjectDomainCombiner;->getSubject()Lorg/apache/harmony/javax/security/auth/Subject;"
    ],
    "Lorg/apache/harmony/javax/security/auth/Subject$SecureSet;": [
        "Lorg/apache/harmony/javax/security/auth/Subject$SecureSet;->iterator()Ljava/util/Iterator;",
        "Lorg/apache/harmony/javax/security/auth/Subject$SecureSet;->equals()Z",
        "Lorg/apache/harmony/javax/security/auth/Subject$SecureSet;->get()Ljava/util/Set;",
        "Lorg/apache/harmony/javax/security/auth/Subject$SecureSet;->hashCode()I"
    ],
    "Lorg/apache/harmony/javax/security/auth/PrivateCredentialPermission$CredOwner;": [
        "Lorg/apache/harmony/javax/security/auth/PrivateCredentialPermission$CredOwner;->equals()Z",
        "Lorg/apache/harmony/javax/security/auth/PrivateCredentialPermission$CredOwner;->implies()Z",
        "Lorg/apache/harmony/javax/security/auth/PrivateCredentialPermission$CredOwner;->hashCode()I"
    ],
    "Lorg/apache/harmony/javax/security/auth/PrivateCredentialPermission;": [
        "Lorg/apache/harmony/javax/security/auth/PrivateCredentialPermission;->getName()Ljava/lang/String;",
        "Lorg/apache/harmony/javax/security/auth/PrivateCredentialPermission;->sameMembers()Z",
        "Lorg/apache/harmony/javax/security/auth/PrivateCredentialPermission;->getCredentialClass()Ljava/lang/String;"
    ],
    "Ljava/lang/reflect/Array;": [
        "Ljava/lang/reflect/Array;->newInstance()Ljava/lang/Object;"
    ],
    "Ljava/security/ProtectionDomain;": [
        "Ljava/security/ProtectionDomain;->getPermissions()Ljava/security/PermissionCollection;",
        "Ljava/security/ProtectionDomain;->getClassLoader()Ljava/lang/ClassLoader;",
        "Ljava/security/ProtectionDomain;->getCodeSource()Ljava/security/CodeSource;"
    ],
    "Lorg/apache/harmony/javax/security/auth/login/LoginContext;": [
        "Lorg/apache/harmony/javax/security/auth/login/LoginContext;->loginImpl()V",
        "Lorg/apache/harmony/javax/security/auth/login/LoginContext;->logoutImpl()V"
    ],
    "Lorg/apache/harmony/javax/security/auth/login/Configuration;": [
        "Lorg/apache/harmony/javax/security/auth/login/Configuration;->getDefaultProvider()Lorg/apache/harmony/javax/security/auth/login/Configuration;",
        "Lorg/apache/harmony/javax/security/auth/login/Configuration;->getAppConfigurationEntry()[Lorg/apache/harmony/javax/security/auth/login/AppConfigurationEntry;",
        "Lorg/apache/harmony/javax/security/auth/login/Configuration;->getAccessibleConfiguration()Lorg/apache/harmony/javax/security/auth/login/Configuration;"
    ],
    "Ljava/security/PrivilegedActionException;": [
        "Ljava/security/PrivilegedActionException;->getException()Ljava/lang/Exception;",
        "Ljava/security/PrivilegedActionException;->getCause()Ljava/lang/Throwable;"
    ],
    "Lorg/apache/harmony/javax/security/auth/login/LoginContext$Module;": [
        "Lorg/apache/harmony/javax/security/auth/login/LoginContext$Module;->getFlag()I",
        "Lorg/apache/harmony/javax/security/auth/login/LoginContext$Module;->create()V"
    ],
    "Lorg/apache/harmony/javax/security/auth/spi/LoginModule;": [
        "Lorg/apache/harmony/javax/security/auth/spi/LoginModule;->logout()Z",
        "Lorg/apache/harmony/javax/security/auth/spi/LoginModule;->commit()Z",
        "Lorg/apache/harmony/javax/security/auth/spi/LoginModule;->login()Z",
        "Lorg/apache/harmony/javax/security/auth/spi/LoginModule;->abort()Z"
    ],
    "Lorg/apache/harmony/javax/security/auth/callback/ChoiceCallback;": [
        "Lorg/apache/harmony/javax/security/auth/callback/ChoiceCallback;->setChoices()V",
        "Lorg/apache/harmony/javax/security/auth/callback/ChoiceCallback;->setDefaultChoice()V",
        "Lorg/apache/harmony/javax/security/auth/callback/ChoiceCallback;->setPrompt()V"
    ],
    "Lorg/apache/harmony/javax/security/auth/callback/TextInputCallback;": [
        "Lorg/apache/harmony/javax/security/auth/callback/TextInputCallback;->setPrompt()V",
        "Lorg/apache/harmony/javax/security/auth/callback/TextInputCallback;->setDefaultText()V"
    ],
    "Lorg/apache/harmony/javax/security/sasl/Sasl;": [
        "Lorg/apache/harmony/javax/security/sasl/Sasl;->newInstance()Ljava/lang/Object;",
        "Lorg/apache/harmony/javax/security/sasl/Sasl;->createSaslServer()Lorg/apache/harmony/javax/security/sasl/SaslServer;",
        "Lorg/apache/harmony/javax/security/sasl/Sasl;->getSaslServerFactories()Ljava/util/Enumeration;",
        "Lorg/apache/harmony/javax/security/sasl/Sasl;->findFactories()Ljava/util/Collection;"
    ],
    "Lorg/apache/harmony/javax/security/sasl/SaslClientFactory;": [
        "Lorg/apache/harmony/javax/security/sasl/SaslClientFactory;->createSaslClient()Lorg/apache/harmony/javax/security/sasl/SaslClient;",
        "Lorg/apache/harmony/javax/security/sasl/SaslClientFactory;->getMechanismNames()[Ljava/lang/String;"
    ],
    "Lorg/apache/harmony/javax/security/sasl/SaslServerFactory;": [
        "Lorg/apache/harmony/javax/security/sasl/SaslServerFactory;->getMechanismNames()[Ljava/lang/String;",
        "Lorg/apache/harmony/javax/security/sasl/SaslServerFactory;->createSaslServer()Lorg/apache/harmony/javax/security/sasl/SaslServer;"
    ],
    "Ljava/security/Provider;": [
        "Ljava/security/Provider;->getProperty()Ljava/lang/String;",
        "Ljava/security/Provider;->keys()Ljava/util/Enumeration;",
        "Ljava/security/Provider;->getName()Ljava/lang/String;"
    ],
    "Lorg/apache/harmony/javax/security/sasl/SaslException;": [
        "Lorg/apache/harmony/javax/security/sasl/SaslException;->printStackTrace()V"
    ],
    "Lorg/apache/qpid/management/common/sasl/JCAProvider;": [
        "Lorg/apache/qpid/management/common/sasl/JCAProvider;->put()Ljava/lang/Object;",
        "Lorg/apache/qpid/management/common/sasl/JCAProvider;->register()V"
    ],
    "Lorg/apache/qpid/management/common/sasl/SaslProvider;": [
        "Lorg/apache/qpid/management/common/sasl/SaslProvider;->put()Ljava/lang/Object;"
    ],
    "Lorg/apache/qpid/management/common/sasl/UserPasswordCallbackHandler;": [
        "Lorg/apache/qpid/management/common/sasl/UserPasswordCallbackHandler;->clearPassword()V"
    ],
    "Lorg/apache/qpid/management/common/sasl/UsernameHashedPasswordCallbackHandler;": [
        "Lorg/apache/qpid/management/common/sasl/UsernameHashedPasswordCallbackHandler;->clearPassword()V",
        "Lorg/apache/qpid/management/common/sasl/UsernameHashedPasswordCallbackHandler;->getHash()[C"
    ],
    "Lorg/apache/qpid/management/common/sasl/PlainSaslClient;": [
        "Lorg/apache/qpid/management/common/sasl/PlainSaslClient;->clearPassword()V",
        "Lorg/apache/qpid/management/common/sasl/PlainSaslClient;->getUserInfo()[Ljava/lang/Object;"
    ],
    "Lorg/androidpn/client/LogUtil;": [
        "Lorg/androidpn/client/LogUtil;->makeLogTag()Ljava/lang/String;"
    ],
    "Lorg/androidpn/client/Notifier;": [
        "Lorg/androidpn/client/Notifier;->notify()V",
        "Lorg/androidpn/client/Notifier;->getNotificationIcon()I",
        "Lorg/androidpn/client/Notifier;->isNotificationSoundEnabled()Z",
        "Lorg/androidpn/client/Notifier;->isNotificationVibrateEnabled()Z",
        "Lorg/androidpn/client/Notifier;->isNotificationToastEnabled()Z",
        "Lorg/androidpn/client/Notifier;->isNotificationEnabled()Z"
    ],
    "Lorg/androidpn/client/HnfoodService;": [
        "Lorg/androidpn/client/HnfoodService;->getIntent()Landroid/content/Intent;",
        "Lorg/androidpn/client/HnfoodService;->getSystemService()Ljava/lang/Object;",
        "Lorg/androidpn/client/HnfoodService;->registerNotificationReceiver()V",
        "Lorg/androidpn/client/HnfoodService;->start()V",
        "Lorg/androidpn/client/HnfoodService;->registerReceiver()Landroid/content/Intent;",
        "Lorg/androidpn/client/HnfoodService;->registerConnectivityReceiver()V",
        "Lorg/androidpn/client/HnfoodService;->unregisterConnectivityReceiver()V",
        "Lorg/androidpn/client/HnfoodService;->connect()V",
        "Lorg/androidpn/client/HnfoodService;->stop()V",
        "Lorg/androidpn/client/HnfoodService;->getTaskTracker()Lorg/androidpn/client/HnfoodService$TaskTracker;",
        "Lorg/androidpn/client/HnfoodService;->unregisterNotificationReceiver()V",
        "Lorg/androidpn/client/HnfoodService;->getSharedPreferences()Landroid/content/SharedPreferences;",
        "Lorg/androidpn/client/HnfoodService;->getTaskSubmitter()Lorg/androidpn/client/HnfoodService$TaskSubmitter;",
        "Lorg/androidpn/client/HnfoodService;->unregisterReceiver()V",
        "Lorg/androidpn/client/HnfoodService;->disconnect()V"
    ],
    "Lorg/androidpn/client/XmppManager;": [
        "Lorg/androidpn/client/XmppManager;->submitLoginTask()V",
        "Lorg/androidpn/client/XmppManager;->getHandler()Landroid/os/Handler;",
        "Lorg/androidpn/client/XmppManager;->addTask()V",
        "Lorg/androidpn/client/XmppManager;->submitConnectTask()V",
        "Lorg/androidpn/client/XmppManager;->disconnect()V",
        "Lorg/androidpn/client/XmppManager;->runTask()V",
        "Lorg/androidpn/client/XmppManager;->isConnected()Z",
        "Lorg/androidpn/client/XmppManager;->isRegistered()Z",
        "Lorg/androidpn/client/XmppManager;->removeAccount()V",
        "Lorg/androidpn/client/XmppManager;->connect()V",
        "Lorg/androidpn/client/XmppManager;->getConnection()Lorg/jivesoftware/smack/XMPPConnection;",
        "Lorg/androidpn/client/XmppManager;->startReconnectionThread()V",
        "Lorg/androidpn/client/XmppManager;->isAuthenticated()Z",
        "Lorg/androidpn/client/XmppManager;->newRandomUUID()Ljava/lang/String;",
        "Lorg/androidpn/client/XmppManager;->terminatePersistentConnection()V",
        "Lorg/androidpn/client/XmppManager;->getContext()Landroid/content/Context;",
        "Lorg/androidpn/client/XmppManager;->submitRegisterTask()V"
    ],
    "Lorg/androidpn/client/HnfoodService$TaskTracker;": [
        "Lorg/androidpn/client/HnfoodService$TaskTracker;->decrease()V",
        "Lorg/androidpn/client/HnfoodService$TaskTracker;->increase()V"
    ],
    "Lorg/androidpn/client/HnfoodService$TaskSubmitter;": [
        "Lorg/androidpn/client/HnfoodService$TaskSubmitter;->submit()Ljava/util/concurrent/Future;"
    ],
    "Ljava/util/UUID;": [
        "Ljava/util/UUID;->randomUUID()Ljava/util/UUID;",
        "Ljava/util/UUID;->toString()Ljava/lang/String;"
    ],
    "Lorg/androidpn/client/ServiceManager;": [
        "Lorg/androidpn/client/ServiceManager;->loadProperties()Ljava/util/Properties;"
    ],
    "Landroid/widget/LinearLayout$LayoutParams;": [
        "Landroid/widget/LinearLayout$LayoutParams;->setMargins()V"
    ],
    "Lorg/androidpn/client/NotificationDetailsActivity;": [
        "Lorg/androidpn/client/NotificationDetailsActivity;->createView()Landroid/view/View;",
        "Lorg/androidpn/client/NotificationDetailsActivity;->setContentView()V",
        "Lorg/androidpn/client/NotificationDetailsActivity;->getSharedPreferences()Landroid/content/SharedPreferences;",
        "Lorg/androidpn/client/NotificationDetailsActivity;->getIntent()Landroid/content/Intent;"
    ],
    "Landroid/telephony/PhoneStateListener;": [
        "Landroid/telephony/PhoneStateListener;->onDataConnectionStateChanged()V"
    ],
    "Lorg/androidpn/client/PhoneStateChangeListener;": [
        "Lorg/androidpn/client/PhoneStateChangeListener;->getState()Ljava/lang/String;"
    ],
    "Lorg/androidpn/client/ReconnectionThread;": [
        "Lorg/androidpn/client/ReconnectionThread;->waiting()I",
        "Lorg/androidpn/client/ReconnectionThread;->isInterrupted()Z"
    ],
    "Lorg/androidpn/client/NotificationSettingsActivity;": [
        "Lorg/androidpn/client/NotificationSettingsActivity;->getPreferenceManager()Landroid/preference/PreferenceManager;",
        "Lorg/androidpn/client/NotificationSettingsActivity;->setPreferenceScreen()V",
        "Lorg/androidpn/client/NotificationSettingsActivity;->createPreferenceHierarchy()Landroid/preference/PreferenceScreen;",
        "Lorg/androidpn/client/NotificationSettingsActivity;->setPreferenceDependencies()V"
    ],
    "Landroid/preference/PreferenceManager;": [
        "Landroid/preference/PreferenceManager;->createPreferenceScreen()Landroid/preference/PreferenceScreen;",
        "Landroid/preference/PreferenceManager;->findPreference()Landroid/preference/Preference;",
        "Landroid/preference/PreferenceManager;->setSharedPreferencesName()V",
        "Landroid/preference/PreferenceManager;->getDefaultSharedPreferences()Landroid/content/SharedPreferences;",
        "Landroid/preference/PreferenceManager;->setSharedPreferencesMode()V"
    ],
    "Landroid/preference/CheckBoxPreference;": [
        "Landroid/preference/CheckBoxPreference;->isChecked()Z",
        "Landroid/preference/CheckBoxPreference;->setDefaultValue()V",
        "Landroid/preference/CheckBoxPreference;->setSummaryOn()V",
        "Landroid/preference/CheckBoxPreference;->setOnPreferenceChangeListener()V",
        "Landroid/preference/CheckBoxPreference;->setTitle()V",
        "Landroid/preference/CheckBoxPreference;->setSummary()V",
        "Landroid/preference/CheckBoxPreference;->setKey()V",
        "Landroid/preference/CheckBoxPreference;->setSummaryOff()V"
    ],
    "Landroid/preference/PreferenceScreen;": [
        "Landroid/preference/PreferenceScreen;->addPreference()Z"
    ],
    "Landroid/preference/Preference;": [
        "Landroid/preference/Preference;->setDependency()V"
    ],
    "Landroid/preference/PreferenceActivity;": [
        "Landroid/preference/PreferenceActivity;->onCreate()V"
    ],
    "Landroid/content/IntentFilter;": [
        "Landroid/content/IntentFilter;->addAction()V"
    ],
    "Lorg/androidpn/client/NotificationIQ;": [
        "Lorg/androidpn/client/NotificationIQ;->getChildElementXML()Ljava/lang/String;",
        "Lorg/androidpn/client/NotificationIQ;->getId()Ljava/lang/String;",
        "Lorg/androidpn/client/NotificationIQ;->getTitle()Ljava/lang/String;",
        "Lorg/androidpn/client/NotificationIQ;->setId()V",
        "Lorg/androidpn/client/NotificationIQ;->setTitle()V",
        "Lorg/androidpn/client/NotificationIQ;->setMessage()V",
        "Lorg/androidpn/client/NotificationIQ;->setApiKey()V",
        "Lorg/androidpn/client/NotificationIQ;->getUri()Ljava/lang/String;",
        "Lorg/androidpn/client/NotificationIQ;->setUri()V",
        "Lorg/androidpn/client/NotificationIQ;->getMessage()Ljava/lang/String;",
        "Lorg/androidpn/client/NotificationIQ;->getApiKey()Ljava/lang/String;"
    ],
    "Ljava/util/logging/Logger;": [
        "Ljava/util/logging/Logger;->log()V",
        "Ljava/util/logging/Logger;->finest()V",
        "Ljava/util/logging/Logger;->warning()V",
        "Ljava/util/logging/Logger;->finer()V",
        "Ljava/util/logging/Logger;->isLoggable()Z",
        "Ljava/util/logging/Logger;->getLogger()Ljava/util/logging/Logger;",
        "Ljava/util/logging/Logger;->fine()V"
    ],
    "Ljava/lang/ThreadLocal;": [
        "Ljava/lang/ThreadLocal;->set()V",
        "Ljava/lang/ThreadLocal;->get()Ljava/lang/Object;"
    ],
    "Ljava/lang/ref/SoftReference;": [
        "Ljava/lang/ref/SoftReference;->get()Ljava/lang/Object;"
    ],
    "Lcom/kenai/jbosh/BodyParserXmlPull;": [
        "Lcom/kenai/jbosh/BodyParserXmlPull;->getXmlPullParser()Lorg/xmlpull/v1/XmlPullParser;"
    ],
    "Lcom/kenai/jbosh/BodyParserResults;": [
        "Lcom/kenai/jbosh/BodyParserResults;->addBodyAttributeValue()V",
        "Lcom/kenai/jbosh/BodyParserResults;->getAttributes()Ljava/util/Map;"
    ],
    "Lcom/kenai/jbosh/AttrAck;": [
        "Lcom/kenai/jbosh/AttrAck;->createFromString()Lcom/kenai/jbosh/AttrAck;",
        "Lcom/kenai/jbosh/AttrAck;->getValue()Ljava/lang/Comparable;"
    ],
    "Lcom/kenai/jbosh/CMSessionParams;": [
        "Lcom/kenai/jbosh/CMSessionParams;->getSessionID()Lcom/kenai/jbosh/AttrSessionID;",
        "Lcom/kenai/jbosh/CMSessionParams;->fromSessionInit()Lcom/kenai/jbosh/CMSessionParams;",
        "Lcom/kenai/jbosh/CMSessionParams;->getAccept()Lcom/kenai/jbosh/AttrAccept;",
        "Lcom/kenai/jbosh/CMSessionParams;->getRequests()Lcom/kenai/jbosh/AttrRequests;",
        "Lcom/kenai/jbosh/CMSessionParams;->isAckingRequests()Z",
        "Lcom/kenai/jbosh/CMSessionParams;->getMaxPause()Lcom/kenai/jbosh/AttrMaxPause;",
        "Lcom/kenai/jbosh/CMSessionParams;->getRequiredAttribute()Ljava/lang/String;",
        "Lcom/kenai/jbosh/CMSessionParams;->getVersion()Lcom/kenai/jbosh/AttrVersion;",
        "Lcom/kenai/jbosh/CMSessionParams;->getPollingInterval()Lcom/kenai/jbosh/AttrPolling;"
    ],
    "Lcom/kenai/jbosh/AttrSessionID;": [
        "Lcom/kenai/jbosh/AttrSessionID;->toString()Ljava/lang/String;",
        "Lcom/kenai/jbosh/AttrSessionID;->createFromString()Lcom/kenai/jbosh/AttrSessionID;"
    ],
    "Lcom/kenai/jbosh/AttrWait;": [
        "Lcom/kenai/jbosh/AttrWait;->checkMinValue()V",
        "Lcom/kenai/jbosh/AttrWait;->createFromString()Lcom/kenai/jbosh/AttrWait;"
    ],
    "Lcom/kenai/jbosh/AttrVersion;": [
        "Lcom/kenai/jbosh/AttrVersion;->createFromString()Lcom/kenai/jbosh/AttrVersion;",
        "Lcom/kenai/jbosh/AttrVersion;->getSupportedVersion()Lcom/kenai/jbosh/AttrVersion;",
        "Lcom/kenai/jbosh/AttrVersion;->toString()Ljava/lang/String;"
    ],
    "Lcom/kenai/jbosh/AttrPolling;": [
        "Lcom/kenai/jbosh/AttrPolling;->checkMinValue()V",
        "Lcom/kenai/jbosh/AttrPolling;->intValue()I",
        "Lcom/kenai/jbosh/AttrPolling;->createFromString()Lcom/kenai/jbosh/AttrPolling;",
        "Lcom/kenai/jbosh/AttrPolling;->getInMilliseconds()I"
    ],
    "Lcom/kenai/jbosh/AttrInactivity;": [
        "Lcom/kenai/jbosh/AttrInactivity;->checkMinValue()V",
        "Lcom/kenai/jbosh/AttrInactivity;->createFromString()Lcom/kenai/jbosh/AttrInactivity;"
    ],
    "Lcom/kenai/jbosh/AttrRequests;": [
        "Lcom/kenai/jbosh/AttrRequests;->checkMinValue()V",
        "Lcom/kenai/jbosh/AttrRequests;->intValue()I",
        "Lcom/kenai/jbosh/AttrRequests;->createFromString()Lcom/kenai/jbosh/AttrRequests;"
    ],
    "Lcom/kenai/jbosh/AttrHold;": [
        "Lcom/kenai/jbosh/AttrHold;->checkMinValue()V",
        "Lcom/kenai/jbosh/AttrHold;->createFromString()Lcom/kenai/jbosh/AttrHold;"
    ],
    "Lcom/kenai/jbosh/AttrAccept;": [
        "Lcom/kenai/jbosh/AttrAccept;->isAccepted()Z",
        "Lcom/kenai/jbosh/AttrAccept;->createFromString()Lcom/kenai/jbosh/AttrAccept;"
    ],
    "Lcom/kenai/jbosh/AttrMaxPause;": [
        "Lcom/kenai/jbosh/AttrMaxPause;->createFromString()Lcom/kenai/jbosh/AttrMaxPause;",
        "Lcom/kenai/jbosh/AttrMaxPause;->intValue()I",
        "Lcom/kenai/jbosh/AttrMaxPause;->toString()Ljava/lang/String;",
        "Lcom/kenai/jbosh/AttrMaxPause;->checkMinValue()V"
    ],
    "Lcom/kenai/jbosh/AttrCharsets;": [
        "Lcom/kenai/jbosh/AttrCharsets;->createFromString()Lcom/kenai/jbosh/AttrCharsets;"
    ],
    "Lcom/kenai/jbosh/RequestIDSequence;": [
        "Lcom/kenai/jbosh/RequestIDSequence;->getNextRID()J",
        "Lcom/kenai/jbosh/RequestIDSequence;->generateInitialValue()J"
    ],
    "Ljava/util/concurrent/locks/Lock;": [
        "Ljava/util/concurrent/locks/Lock;->unlock()V",
        "Ljava/util/concurrent/locks/Lock;->lock()V",
        "Ljava/util/concurrent/locks/Lock;->newCondition()Ljava/util/concurrent/locks/Condition;"
    ],
    "Ljava/util/concurrent/atomic/AtomicLong;": [
        "Ljava/util/concurrent/atomic/AtomicLong;->getAndIncrement()J"
    ],
    "Lcom/kenai/jbosh/BOSHClientConnEvent;": [
        "Lcom/kenai/jbosh/BOSHClientConnEvent;->createConnectionClosedEvent()Lcom/kenai/jbosh/BOSHClientConnEvent;",
        "Lcom/kenai/jbosh/BOSHClientConnEvent;->createConnectionClosedOnErrorEvent()Lcom/kenai/jbosh/BOSHClientConnEvent;",
        "Lcom/kenai/jbosh/BOSHClientConnEvent;->createConnectionEstablishedEvent()Lcom/kenai/jbosh/BOSHClientConnEvent;",
        "Lcom/kenai/jbosh/BOSHClientConnEvent;->getSource()Ljava/lang/Object;"
    ],
    "Lcom/kenai/jbosh/StaticBody;": [
        "Lcom/kenai/jbosh/StaticBody;->fromString()Lcom/kenai/jbosh/StaticBody;",
        "Lcom/kenai/jbosh/StaticBody;->getAttributes()Ljava/util/Map;",
        "Lcom/kenai/jbosh/StaticBody;->toXML()Ljava/lang/String;"
    ],
    "Lcom/kenai/jbosh/BodyParser;": [
        "Lcom/kenai/jbosh/BodyParser;->parse()Lcom/kenai/jbosh/BodyParserResults;"
    ],
    "Ljava/util/concurrent/TimeUnit;": [
        "Ljava/util/concurrent/TimeUnit;->convert()J"
    ],
    "Lcom/kenai/jbosh/AttrPause;": [
        "Lcom/kenai/jbosh/AttrPause;->checkMinValue()V",
        "Lcom/kenai/jbosh/AttrPause;->getInMilliseconds()I",
        "Lcom/kenai/jbosh/AttrPause;->intValue()I",
        "Lcom/kenai/jbosh/AttrPause;->createFromString()Lcom/kenai/jbosh/AttrPause;"
    ],
    "Lcom/kenai/jbosh/AbstractIntegerAttr;": [
        "Lcom/kenai/jbosh/AbstractIntegerAttr;->parseInt()I",
        "Lcom/kenai/jbosh/AbstractIntegerAttr;->getValue()Ljava/lang/Comparable;"
    ],
    "Lcom/kenai/jbosh/QName;": [
        "Lcom/kenai/jbosh/QName;->getLocalPart()Ljava/lang/String;",
        "Lcom/kenai/jbosh/QName;->getPrefix()Ljava/lang/String;",
        "Lcom/kenai/jbosh/QName;->getNamespaceURI()Ljava/lang/String;",
        "Lcom/kenai/jbosh/QName;->hashCode()I",
        "Lcom/kenai/jbosh/QName;->equals()Z"
    ],
    "Ljava/util/concurrent/locks/ReentrantLock;": [
        "Ljava/util/concurrent/locks/ReentrantLock;->newCondition()Ljava/util/concurrent/locks/Condition;",
        "Ljava/util/concurrent/locks/ReentrantLock;->isHeldByCurrentThread()Z",
        "Ljava/util/concurrent/locks/ReentrantLock;->unlock()V",
        "Ljava/util/concurrent/locks/ReentrantLock;->lock()V"
    ],
    "Lcom/kenai/jbosh/BOSHClientConfig;": [
        "Lcom/kenai/jbosh/BOSHClientConfig;->getRoute()Ljava/lang/String;",
        "Lcom/kenai/jbosh/BOSHClientConfig;->getTo()Ljava/lang/String;",
        "Lcom/kenai/jbosh/BOSHClientConfig;->getProxyPort()I",
        "Lcom/kenai/jbosh/BOSHClientConfig;->getProxyHost()Ljava/lang/String;",
        "Lcom/kenai/jbosh/BOSHClientConfig;->getLang()Ljava/lang/String;",
        "Lcom/kenai/jbosh/BOSHClientConfig;->getURI()Ljava/net/URI;",
        "Lcom/kenai/jbosh/BOSHClientConfig;->isCompressionEnabled()Z",
        "Lcom/kenai/jbosh/BOSHClientConfig;->getFrom()Ljava/lang/String;"
    ],
    "Ljava/util/concurrent/locks/Condition;": [
        "Ljava/util/concurrent/locks/Condition;->await()V",
        "Ljava/util/concurrent/locks/Condition;->signalAll()V"
    ],
    "Lcom/kenai/jbosh/TerminalBindingCondition;": [
        "Lcom/kenai/jbosh/TerminalBindingCondition;->create()Lcom/kenai/jbosh/TerminalBindingCondition;",
        "Lcom/kenai/jbosh/TerminalBindingCondition;->forHTTPResponseCode()Lcom/kenai/jbosh/TerminalBindingCondition;",
        "Lcom/kenai/jbosh/TerminalBindingCondition;->getCondition()Ljava/lang/String;",
        "Lcom/kenai/jbosh/TerminalBindingCondition;->createWithCode()Lcom/kenai/jbosh/TerminalBindingCondition;",
        "Lcom/kenai/jbosh/TerminalBindingCondition;->getMessage()Ljava/lang/String;",
        "Lcom/kenai/jbosh/TerminalBindingCondition;->forString()Lcom/kenai/jbosh/TerminalBindingCondition;"
    ],
    "Ljava/util/concurrent/ScheduledFuture;": [
        "Ljava/util/concurrent/ScheduledFuture;->cancel()Z",
        "Ljava/util/concurrent/ScheduledFuture;->isDone()Z"
    ],
    "Lcom/kenai/jbosh/HTTPSender;": [
        "Lcom/kenai/jbosh/HTTPSender;->send()Lcom/kenai/jbosh/HTTPResponse;",
        "Lcom/kenai/jbosh/HTTPSender;->destroy()V"
    ],
    "Ljava/util/concurrent/ScheduledExecutorService;": [
        "Ljava/util/concurrent/ScheduledExecutorService;->shutdown()V",
        "Ljava/util/concurrent/ScheduledExecutorService;->shutdownNow()Ljava/util/List;",
        "Ljava/util/concurrent/ScheduledExecutorService;->schedule()Ljava/util/concurrent/ScheduledFuture;"
    ],
    "Lcom/kenai/jbosh/BOSHClientConnListener;": [
        "Lcom/kenai/jbosh/BOSHClientConnListener;->connectionEvent()V"
    ],
    "Lcom/kenai/jbosh/BOSHClientRequestListener;": [
        "Lcom/kenai/jbosh/BOSHClientRequestListener;->requestSent()V"
    ],
    "Lcom/kenai/jbosh/BOSHClientResponseListener;": [
        "Lcom/kenai/jbosh/BOSHClientResponseListener;->responseReceived()V"
    ],
    "Ljava/util/Queue;": [
        "Ljava/util/Queue;->peek()Ljava/lang/Object;",
        "Ljava/util/Queue;->remove()Z",
        "Ljava/util/Queue;->isEmpty()Z",
        "Ljava/util/Queue;->add()Z",
        "Ljava/util/Queue;->size()I",
        "Ljava/util/Queue;->iterator()Ljava/util/Iterator;"
    ],
    "Lcom/kenai/jbosh/HTTPExchange;": [
        "Lcom/kenai/jbosh/HTTPExchange;->getRequest()Lcom/kenai/jbosh/AbstractBody;",
        "Lcom/kenai/jbosh/HTTPExchange;->getHTTPResponse()Lcom/kenai/jbosh/HTTPResponse;",
        "Lcom/kenai/jbosh/HTTPExchange;->setHTTPResponse()V"
    ],
    "Lcom/kenai/jbosh/HTTPResponse;": [
        "Lcom/kenai/jbosh/HTTPResponse;->getHTTPStatus()I",
        "Lcom/kenai/jbosh/HTTPResponse;->getBody()Lcom/kenai/jbosh/AbstractBody;"
    ],
    "Ljava/util/concurrent/atomic/AtomicReference;": [
        "Ljava/util/concurrent/atomic/AtomicReference;->set()V",
        "Ljava/util/concurrent/atomic/AtomicReference;->get()Ljava/lang/Object;"
    ],
    "Lcom/kenai/jbosh/BOSHClient$ExchangeInterceptor;": [
        "Lcom/kenai/jbosh/BOSHClient$ExchangeInterceptor;->interceptExchange()Lcom/kenai/jbosh/HTTPExchange;"
    ],
    "Ljava/util/zip/InflaterInputStream;": [
        "Ljava/util/zip/InflaterInputStream;->read()I",
        "Ljava/util/zip/InflaterInputStream;->close()V"
    ],
    "Ljava/util/zip/DeflaterOutputStream;": [
        "Ljava/util/zip/DeflaterOutputStream;->write()V",
        "Ljava/util/zip/DeflaterOutputStream;->close()V"
    ],
    "Ljavax/xml/parsers/SAXParserFactory;": [
        "Ljavax/xml/parsers/SAXParserFactory;->setValidating()V",
        "Ljavax/xml/parsers/SAXParserFactory;->setNamespaceAware()V",
        "Ljavax/xml/parsers/SAXParserFactory;->newSAXParser()Ljavax/xml/parsers/SAXParser;",
        "Ljavax/xml/parsers/SAXParserFactory;->newInstance()Ljavax/xml/parsers/SAXParserFactory;"
    ],
    "Ljavax/xml/parsers/SAXParser;": [
        "Ljavax/xml/parsers/SAXParser;->getXMLReader()Lorg/xml/sax/XMLReader;",
        "Ljavax/xml/parsers/SAXParser;->reset()V",
        "Ljavax/xml/parsers/SAXParser;->parse()V"
    ],
    "Lcom/kenai/jbosh/BodyParserSAX;": [
        "Lcom/kenai/jbosh/BodyParserSAX;->getSAXParser()Ljavax/xml/parsers/SAXParser;"
    ],
    "Lcom/kenai/jbosh/ZLIBCodec;": [
        "Lcom/kenai/jbosh/ZLIBCodec;->encode()[B",
        "Lcom/kenai/jbosh/ZLIBCodec;->getID()Ljava/lang/String;",
        "Lcom/kenai/jbosh/ZLIBCodec;->decode()[B"
    ],
    "Lcom/kenai/jbosh/GZIPCodec;": [
        "Lcom/kenai/jbosh/GZIPCodec;->decode()[B",
        "Lcom/kenai/jbosh/GZIPCodec;->getID()Ljava/lang/String;",
        "Lcom/kenai/jbosh/GZIPCodec;->encode()[B"
    ],
    "Lorg/apache/http/entity/ByteArrayEntity;": [
        "Lorg/apache/http/entity/ByteArrayEntity;->setContentType()V",
        "Lorg/apache/http/entity/ByteArrayEntity;->setContentEncoding()V"
    ],
    "Lcom/kenai/jbosh/ApacheHTTPResponse;": [
        "Lcom/kenai/jbosh/ApacheHTTPResponse;->abort()V",
        "Lcom/kenai/jbosh/ApacheHTTPResponse;->awaitResponse()V"
    ],
    "Lorg/apache/http/conn/params/ConnManagerParams;": [
        "Lorg/apache/http/conn/params/ConnManagerParams;->setMaxTotalConnections()V"
    ],
    "Lorg/apache/http/params/HttpParams;": [
        "Lorg/apache/http/params/HttpParams;->setParameter()Lorg/apache/http/params/HttpParams;"
    ],
    "Lorg/apache/http/conn/scheme/PlainSocketFactory;": [
        "Lorg/apache/http/conn/scheme/PlainSocketFactory;->getSocketFactory()Lorg/apache/http/conn/scheme/PlainSocketFactory;"
    ],
    "Lorg/apache/http/conn/scheme/SchemeRegistry;": [
        "Lorg/apache/http/conn/scheme/SchemeRegistry;->register()Lorg/apache/http/conn/scheme/Scheme;"
    ],
    "Lorg/apache/http/conn/ssl/SSLSocketFactory;": [
        "Lorg/apache/http/conn/ssl/SSLSocketFactory;->setHostnameVerifier()V",
        "Lorg/apache/http/conn/ssl/SSLSocketFactory;->getSocketFactory()Lorg/apache/http/conn/ssl/SSLSocketFactory;"
    ],
    "Ljava/lang/Comparable;": [
        "Ljava/lang/Comparable;->compareTo()I"
    ],
    "Ljava/io/Closeable;": [
        "Ljava/io/Closeable;->close()V"
    ],
    "Lcom/kenai/jbosh/ServiceLib;": [
        "Lcom/kenai/jbosh/ServiceLib;->finalClose()V",
        "Lcom/kenai/jbosh/ServiceLib;->attemptLoad()Ljava/lang/Object;",
        "Lcom/kenai/jbosh/ServiceLib;->loadServicesImplementations()Ljava/util/List;"
    ],
    "Lcom/monsou/lvyoufuwu/Init_app_Activity;": [
        "Lcom/monsou/lvyoufuwu/Init_app_Activity;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/Init_app_Activity;->startActivity()V",
        "Lcom/monsou/lvyoufuwu/Init_app_Activity;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/Init_app_Activity;->finish()V"
    ],
    "Lcom/monsou/lvyoufuwu/SlidingButton;": [
        "Lcom/monsou/lvyoufuwu/SlidingButton;->setMe()V",
        "Lcom/monsou/lvyoufuwu/SlidingButton;->getLeft()I",
        "Lcom/monsou/lvyoufuwu/SlidingButton;->isMe()Z",
        "Lcom/monsou/lvyoufuwu/SlidingButton;->getLayoutParams()Landroid/view/ViewGroup$LayoutParams;",
        "Lcom/monsou/lvyoufuwu/SlidingButton;->startAnimation()V",
        "Lcom/monsou/lvyoufuwu/SlidingButton;->getParent()Landroid/view/ViewParent;",
        "Lcom/monsou/lvyoufuwu/SlidingButton;->setLayoutParams()V",
        "Lcom/monsou/lvyoufuwu/SlidingButton;->getWidth()I",
        "Lcom/monsou/lvyoufuwu/SlidingButton;->handleActivityEvent()Z"
    ],
    "Lcom/monsou/lvyoufuwu/ZixunShopListActivity;": [
        "Lcom/monsou/lvyoufuwu/ZixunShopListActivity;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/ZixunShopListActivity;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/ZixunShopListActivity;->getLayoutInflater()Landroid/view/LayoutInflater;",
        "Lcom/monsou/lvyoufuwu/ZixunShopListActivity;->getServerData()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/ZixunShopListActivity;->getWindow()Landroid/view/Window;",
        "Lcom/monsou/lvyoufuwu/ZixunShopListActivity;->getIntent()Landroid/content/Intent;",
        "Lcom/monsou/lvyoufuwu/ZixunShopListActivity;->parseJSON()V",
        "Lcom/monsou/lvyoufuwu/ZixunShopListActivity;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/ZixunShopListActivity;->getResources()Landroid/content/res/Resources;"
    ],
    "Lcom/monsou/lvyoufuwu/entity/ZixunShopList;": [
        "Lcom/monsou/lvyoufuwu/entity/ZixunShopList;->addItem()I",
        "Lcom/monsou/lvyoufuwu/entity/ZixunShopList;->getAllItems()Ljava/util/List;"
    ],
    "Lcom/monsou/lvyoufuwu/entity/ZixunShopItem;": [
        "Lcom/monsou/lvyoufuwu/entity/ZixunShopItem;->getComname()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/ZixunShopItem;->setContAdd()V",
        "Lcom/monsou/lvyoufuwu/entity/ZixunShopItem;->getPic()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/ZixunShopItem;->setPic()V",
        "Lcom/monsou/lvyoufuwu/entity/ZixunShopItem;->setComname()V",
        "Lcom/monsou/lvyoufuwu/entity/ZixunShopItem;->setId()V",
        "Lcom/monsou/lvyoufuwu/entity/ZixunShopItem;->setUpdatetime()V",
        "Lcom/monsou/lvyoufuwu/entity/ZixunShopItem;->getTitle()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/ZixunShopItem;->setTitle()V"
    ],
    "Lorg/json/JSONException;": [
        "Lorg/json/JSONException;->toString()Ljava/lang/String;",
        "Lorg/json/JSONException;->printStackTrace()V"
    ],
    "Ljava/net/HttpURLConnection;": [
        "Ljava/net/HttpURLConnection;->setReadTimeout()V",
        "Ljava/net/HttpURLConnection;->getOutputStream()Ljava/io/OutputStream;",
        "Ljava/net/HttpURLConnection;->connect()V",
        "Ljava/net/HttpURLConnection;->getResponseCode()I",
        "Ljava/net/HttpURLConnection;->setRequestMethod()V",
        "Ljava/net/HttpURLConnection;->getInputStream()Ljava/io/InputStream;",
        "Ljava/net/HttpURLConnection;->setConnectTimeout()V",
        "Ljava/net/HttpURLConnection;->setDoOutput()V",
        "Ljava/net/HttpURLConnection;->disconnect()V",
        "Ljava/net/HttpURLConnection;->setDoInput()V",
        "Ljava/net/HttpURLConnection;->setUseCaches()V",
        "Ljava/net/HttpURLConnection;->setRequestProperty()V"
    ],
    "Lcom/baidu/mobstat/StatActivity;": [
        "Lcom/baidu/mobstat/StatActivity;->onActivityResult()V",
        "Lcom/baidu/mobstat/StatActivity;->onCreate()V",
        "Lcom/baidu/mobstat/StatActivity;->finish()V",
        "Lcom/baidu/mobstat/StatActivity;->onResume()V"
    ],
    "Lcom/monsou/lvyoufuwu/MyApplication;": [
        "Lcom/monsou/lvyoufuwu/MyApplication;->getInstance()Lcom/monsou/lvyoufuwu/MyApplication;",
        "Lcom/monsou/lvyoufuwu/MyApplication;->addActivity()V"
    ],
    "Landroid/view/LayoutInflater;": [
        "Landroid/view/LayoutInflater;->inflate()Landroid/view/View;",
        "Landroid/view/LayoutInflater;->from()Landroid/view/LayoutInflater;"
    ],
    "Landroid/widget/ListView;": [
        "Landroid/widget/ListView;->setOnItemClickListener()V",
        "Landroid/widget/ListView;->getChildAt()Landroid/view/View;",
        "Landroid/widget/ListView;->setAdapter()V",
        "Landroid/widget/ListView;->setTranscriptMode()V",
        "Landroid/widget/ListView;->addFooterView()V",
        "Landroid/widget/ListView;->getListPaddingTop()I",
        "Landroid/widget/ListView;->setVisibility()V",
        "Landroid/widget/ListView;->setOnItemLongClickListener()V",
        "Landroid/widget/ListView;->startAnimation()V",
        "Landroid/widget/ListView;->setOnScrollListener()V",
        "Landroid/widget/ListView;->getFirstVisiblePosition()I"
    ],
    "Lcom/monsou/lvyoufuwu/entity/DbOpenHelper;": [
        "Lcom/monsou/lvyoufuwu/entity/DbOpenHelper;->deleteDatabase()Z",
        "Lcom/monsou/lvyoufuwu/entity/DbOpenHelper;->getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase;"
    ],
    "Lcom/monsou/lvyoufuwu/ZixunShopListActivity$SaxParseApplyTask;": [
        "Lcom/monsou/lvyoufuwu/ZixunShopListActivity$SaxParseApplyTask;->execute()Landroid/os/AsyncTask;"
    ],
    "Landroid/app/ProgressDialog;": [
        "Landroid/app/ProgressDialog;->show()Landroid/app/ProgressDialog;"
    ],
    "Lcom/monsou/lvyoufuwu/ShowInfo;": [
        "Lcom/monsou/lvyoufuwu/ShowInfo;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/ShowInfo;->finish()V",
        "Lcom/monsou/lvyoufuwu/ShowInfo;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/ShowInfo;->getIntent()Landroid/content/Intent;",
        "Lcom/monsou/lvyoufuwu/ShowInfo;->loadUrl()V",
        "Lcom/monsou/lvyoufuwu/ShowInfo;->getWindow()Landroid/view/Window;",
        "Lcom/monsou/lvyoufuwu/ShowInfo;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/ShowInfo;->requestWindowFeature()Z"
    ],
    "Lcom/monsou/lvyoufuwu/adapters/AreaList;": [
        "Lcom/monsou/lvyoufuwu/adapters/AreaList;->addItem()I",
        "Lcom/monsou/lvyoufuwu/adapters/AreaList;->getItem()Lcom/monsou/lvyoufuwu/adapters/AreaItem;",
        "Lcom/monsou/lvyoufuwu/adapters/AreaList;->getAllItems()Ljava/util/List;"
    ],
    "Lcom/monsou/lvyoufuwu/adapters/AreaItem;": [
        "Lcom/monsou/lvyoufuwu/adapters/AreaItem;->getPrmname()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/adapters/AreaItem;->setPrmclassid()V",
        "Lcom/monsou/lvyoufuwu/adapters/AreaItem;->setPrmname()V"
    ],
    "Lcom/monsou/lvyoufuwu/Publish2Activity;": [
        "Lcom/monsou/lvyoufuwu/Publish2Activity;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/Publish2Activity;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/Publish2Activity;->getFenData()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/Publish2Activity;->fenJSON()V"
    ],
    "Landroid/widget/RadioButton;": [
        "Landroid/widget/RadioButton;->isSelected()Z"
    ],
    "Landroid/widget/ArrayAdapter;": [
        "Landroid/widget/ArrayAdapter;->setDropDownViewResource()V"
    ],
    "Landroid/widget/Spinner;": [
        "Landroid/widget/Spinner;->setAdapter()V",
        "Landroid/widget/Spinner;->setOnItemSelectedListener()V",
        "Landroid/widget/Spinner;->setVisibility()V"
    ],
    "Lcom/monsou/lvyoufuwu/Huiyuan;": [
        "Lcom/monsou/lvyoufuwu/Huiyuan;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/Huiyuan;->getShopList()Lcom/monsou/lvyoufuwu/entity/HuiyuanList;",
        "Lcom/monsou/lvyoufuwu/Huiyuan;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/Huiyuan;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/Huiyuan;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/Huiyuan;->getIntent()Landroid/content/Intent;",
        "Lcom/monsou/lvyoufuwu/Huiyuan;->getWindow()Landroid/view/Window;"
    ],
    "Lorg/xml/sax/XMLReader;": [
        "Lorg/xml/sax/XMLReader;->parse()V",
        "Lorg/xml/sax/XMLReader;->setContentHandler()V"
    ],
    "Lcom/monsou/lvyoufuwu/adapters/HuiyuanItemHandler;": [
        "Lcom/monsou/lvyoufuwu/adapters/HuiyuanItemHandler;->getShoplist()Lcom/monsou/lvyoufuwu/entity/HuiyuanList;"
    ],
    "Lcom/monsou/lvyoufuwu/Huiyuan$SaxParseApplyTask;": [
        "Lcom/monsou/lvyoufuwu/Huiyuan$SaxParseApplyTask;->execute()Landroid/os/AsyncTask;"
    ],
    "Lcom/monsou/lvyoufuwu/entity/HuiyuanList;": [
        "Lcom/monsou/lvyoufuwu/entity/HuiyuanList;->getAllItems()Ljava/util/List;",
        "Lcom/monsou/lvyoufuwu/entity/HuiyuanList;->addItem()I"
    ],
    "Landroid/widget/EditText;": [
        "Landroid/widget/EditText;->setText()V",
        "Landroid/widget/EditText;->getText()Landroid/text/Editable;"
    ],
    "Landroid/text/Editable;": [
        "Landroid/text/Editable;->toString()Ljava/lang/String;"
    ],
    "Lcom/monsou/lvyoufuwu/RegisterPhone;": [
        "Lcom/monsou/lvyoufuwu/RegisterPhone;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/RegisterPhone;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/RegisterPhone;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/RegisterPhone;->findViewById()Landroid/view/View;"
    ],
    "Lcom/monsou/lvyoufuwu/App_recommend;": [
        "Lcom/monsou/lvyoufuwu/App_recommend;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/App_recommend;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/App_recommend;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/App_recommend;->getIntent()Landroid/content/Intent;",
        "Lcom/monsou/lvyoufuwu/App_recommend;->finish()V"
    ],
    "Lcom/monsou/lvyoufuwu/BackStageActivity;": [
        "Lcom/monsou/lvyoufuwu/BackStageActivity;->startActivity()V",
        "Lcom/monsou/lvyoufuwu/BackStageActivity;->finish()V",
        "Lcom/monsou/lvyoufuwu/BackStageActivity;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/BackStageActivity;->receiveOfflineMessage()V",
        "Lcom/monsou/lvyoufuwu/BackStageActivity;->getSharedPreferences()Landroid/content/SharedPreferences;",
        "Lcom/monsou/lvyoufuwu/BackStageActivity;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/BackStageActivity;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/BackStageActivity;->getIntent()Landroid/content/Intent;"
    ],
    "Lcom/xmpp/client/util/XmppTool;": [
        "Lcom/xmpp/client/util/XmppTool;->openConnection()V",
        "Lcom/xmpp/client/util/XmppTool;->getConnection()Lorg/jivesoftware/smack/XMPPConnection;",
        "Lcom/xmpp/client/util/XmppTool;->closeConnection()V",
        "Lcom/xmpp/client/util/XmppTool;->parseIP()Ljava/lang/String;"
    ],
    "Lcom/monsou/lvyoufuwu/Sousuo;": [
        "Lcom/monsou/lvyoufuwu/Sousuo;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/Sousuo;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/Sousuo;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/Sousuo;->getWindow()Landroid/view/Window;",
        "Lcom/monsou/lvyoufuwu/Sousuo;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/Sousuo;->getServerData()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/Sousuo;->parseJSON()V"
    ],
    "Lcom/monsou/lvyoufuwu/entity/SousuoShopList;": [
        "Lcom/monsou/lvyoufuwu/entity/SousuoShopList;->getAllItems()Ljava/util/List;",
        "Lcom/monsou/lvyoufuwu/entity/SousuoShopList;->addItem()I"
    ],
    "Lcom/monsou/lvyoufuwu/entity/SousuoShopItem;": [
        "Lcom/monsou/lvyoufuwu/entity/SousuoShopItem;->getTitle()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/SousuoShopItem;->getPic()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/SousuoShopItem;->setDatetime()V",
        "Lcom/monsou/lvyoufuwu/entity/SousuoShopItem;->setTitle()V",
        "Lcom/monsou/lvyoufuwu/entity/SousuoShopItem;->setContent()V",
        "Lcom/monsou/lvyoufuwu/entity/SousuoShopItem;->setPic()V",
        "Lcom/monsou/lvyoufuwu/entity/SousuoShopItem;->getContent()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/SousuoShopItem;->setContAdd()V"
    ],
    "Lcom/monsou/lvyoufuwu/Init_app_Activity2;": [
        "Lcom/monsou/lvyoufuwu/Init_app_Activity2;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/Init_app_Activity2;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/Init_app_Activity2;->requestWindowFeature()Z"
    ],
    "Landroid/widget/ViewFlipper;": [
        "Landroid/widget/ViewFlipper;->showNext()V"
    ],
    "Landroid/view/ViewParent;": [
        "Landroid/view/ViewParent;->getParent()Landroid/view/ViewParent;"
    ],
    "Landroid/view/animation/TranslateAnimation;": [
        "Landroid/view/animation/TranslateAnimation;->setInterpolator()V",
        "Landroid/view/animation/TranslateAnimation;->setDuration()V",
        "Landroid/view/animation/TranslateAnimation;->setAnimationListener()V",
        "Landroid/view/animation/TranslateAnimation;->setStartOffset()V"
    ],
    "Lcom/monsou/lvyoufuwu/Banben;": [
        "Lcom/monsou/lvyoufuwu/Banben;->getWindow()Landroid/view/Window;",
        "Lcom/monsou/lvyoufuwu/Banben;->getVersionCodeHttpUrl()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/Banben;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/Banben;->getPackageManager()Landroid/content/pm/PackageManager;",
        "Lcom/monsou/lvyoufuwu/Banben;->loadApk()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/Banben;->getPackageName()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/Banben;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/Banben;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/Banben;->getApplicationContext()Landroid/content/Context;",
        "Lcom/monsou/lvyoufuwu/Banben;->getSystemService()Ljava/lang/Object;",
        "Lcom/monsou/lvyoufuwu/Banben;->getClientVersion()Ljava/lang/String;"
    ],
    "Landroid/content/pm/PackageManager$NameNotFoundException;": [
        "Landroid/content/pm/PackageManager$NameNotFoundException;->printStackTrace()V"
    ],
    "Lcom/monsou/lvyoufuwu/Init_app_Activity3;": [
        "Lcom/monsou/lvyoufuwu/Init_app_Activity3;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/Init_app_Activity3;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/Init_app_Activity3;->requestWindowFeature()Z"
    ],
    "Lcom/monsou/lvyoufuwu/WebShopItem;": [
        "Lcom/monsou/lvyoufuwu/WebShopItem;->setTitle()V",
        "Lcom/monsou/lvyoufuwu/WebShopItem;->getTitle()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/WebShopItem;->setPicurl()V",
        "Lcom/monsou/lvyoufuwu/WebShopItem;->setTourl()V",
        "Lcom/monsou/lvyoufuwu/WebShopItem;->getPicurl()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/WebShopItem;->getTourl()Ljava/lang/String;"
    ],
    "Lorg/xml/sax/helpers/DefaultHandler;": [
        "Lorg/xml/sax/helpers/DefaultHandler;->endDocument()V"
    ],
    "Lcom/monsou/lvyoufuwu/WebShopList;": [
        "Lcom/monsou/lvyoufuwu/WebShopList;->addItem()I"
    ],
    "Lcom/monsou/lvyoufuwu/ZhaoshangShopListActivity;": [
        "Lcom/monsou/lvyoufuwu/ZhaoshangShopListActivity;->getIntent()Landroid/content/Intent;",
        "Lcom/monsou/lvyoufuwu/ZhaoshangShopListActivity;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/ZhaoshangShopListActivity;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/ZhaoshangShopListActivity;->getWindow()Landroid/view/Window;",
        "Lcom/monsou/lvyoufuwu/ZhaoshangShopListActivity;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/ZhaoshangShopListActivity;->parseJSON()V",
        "Lcom/monsou/lvyoufuwu/ZhaoshangShopListActivity;->requestWindowFeature()Z"
    ],
    "Lcom/monsou/lvyoufuwu/entity/ZhaoshangShopList;": [
        "Lcom/monsou/lvyoufuwu/entity/ZhaoshangShopList;->getAllItems()Ljava/util/List;",
        "Lcom/monsou/lvyoufuwu/entity/ZhaoshangShopList;->addItem()I"
    ],
    "Lcom/monsou/lvyoufuwu/entity/ZhaoshangShopItem;": [
        "Lcom/monsou/lvyoufuwu/entity/ZhaoshangShopItem;->setComname()V",
        "Lcom/monsou/lvyoufuwu/entity/ZhaoshangShopItem;->setDateandtime()V",
        "Lcom/monsou/lvyoufuwu/entity/ZhaoshangShopItem;->getPic()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/ZhaoshangShopItem;->setPic()V",
        "Lcom/monsou/lvyoufuwu/entity/ZhaoshangShopItem;->getTitle()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/ZhaoshangShopItem;->setTitle()V",
        "Lcom/monsou/lvyoufuwu/entity/ZhaoshangShopItem;->getComname()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/ZhaoshangShopItem;->setContAdd()V",
        "Lcom/monsou/lvyoufuwu/entity/ZhaoshangShopItem;->setId()V"
    ],
    "Lcom/monsou/lvyoufuwu/ZhaoshangShopListActivity$SaxParseApplyTask;": [
        "Lcom/monsou/lvyoufuwu/ZhaoshangShopListActivity$SaxParseApplyTask;->execute()Landroid/os/AsyncTask;"
    ],
    "Lcom/monsou/lvyoufuwu/GalleryShowInfo;": [
        "Lcom/monsou/lvyoufuwu/GalleryShowInfo;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/GalleryShowInfo;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/GalleryShowInfo;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/GalleryShowInfo;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/GalleryShowInfo;->getIntent()Landroid/content/Intent;"
    ],
    "Landroid/graphics/drawable/Drawable;": [
        "Landroid/graphics/drawable/Drawable;->getState()[I",
        "Landroid/graphics/drawable/Drawable;->createFromStream()Landroid/graphics/drawable/Drawable;",
        "Landroid/graphics/drawable/Drawable;->getBounds()Landroid/graphics/Rect;",
        "Landroid/graphics/drawable/Drawable;->setBounds()V",
        "Landroid/graphics/drawable/Drawable;->copyBounds()Landroid/graphics/Rect;",
        "Landroid/graphics/drawable/Drawable;->getIntrinsicHeight()I",
        "Landroid/graphics/drawable/Drawable;->setColorFilter()V",
        "Landroid/graphics/drawable/Drawable;->draw()V",
        "Landroid/graphics/drawable/Drawable;->setState()Z",
        "Landroid/graphics/drawable/Drawable;->clearColorFilter()V",
        "Landroid/graphics/drawable/Drawable;->getCurrent()Landroid/graphics/drawable/Drawable;",
        "Landroid/graphics/drawable/Drawable;->getIntrinsicWidth()I"
    ],
    "Ljava/net/MalformedURLException;": [
        "Ljava/net/MalformedURLException;->printStackTrace()V"
    ],
    "Lcom/monsou/lvyoufuwu/AsyncImageLoader$2;": [
        "Lcom/monsou/lvyoufuwu/AsyncImageLoader$2;->start()V"
    ],
    "Lcom/monsou/lvyoufuwu/GalleryShopListActivity;": [
        "Lcom/monsou/lvyoufuwu/GalleryShopListActivity;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/GalleryShopListActivity;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/GalleryShopListActivity;->getShopList()Lcom/monsou/lvyoufuwu/adapters/GalleryShopList;",
        "Lcom/monsou/lvyoufuwu/GalleryShopListActivity;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/GalleryShopListActivity;->requestWindowFeature()Z"
    ],
    "Lcom/monsou/lvyoufuwu/adapters/GalleryShopItemHandler;": [
        "Lcom/monsou/lvyoufuwu/adapters/GalleryShopItemHandler;->getShoplist()Lcom/monsou/lvyoufuwu/adapters/GalleryShopList;"
    ],
    "Lcom/monsou/lvyoufuwu/GalleryShopListActivity$SaxParseApplyTask;": [
        "Lcom/monsou/lvyoufuwu/GalleryShopListActivity$SaxParseApplyTask;->execute()Landroid/os/AsyncTask;"
    ],
    "Lcom/monsou/lvyoufuwu/adapters/GalleryShopList;": [
        "Lcom/monsou/lvyoufuwu/adapters/GalleryShopList;->getAllItems()Ljava/util/List;",
        "Lcom/monsou/lvyoufuwu/adapters/GalleryShopList;->addItem()I"
    ],
    "Landroid/widget/GridView;": [
        "Landroid/widget/GridView;->setVisibility()V",
        "Landroid/widget/GridView;->setAdapter()V",
        "Landroid/widget/GridView;->setOnItemClickListener()V"
    ],
    "Lcom/monsou/lvyoufuwu/XinwenShowInfo;": [
        "Lcom/monsou/lvyoufuwu/XinwenShowInfo;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/XinwenShowInfo;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/XinwenShowInfo;->finish()V",
        "Lcom/monsou/lvyoufuwu/XinwenShowInfo;->loadUrl()V",
        "Lcom/monsou/lvyoufuwu/XinwenShowInfo;->getWindow()Landroid/view/Window;",
        "Lcom/monsou/lvyoufuwu/XinwenShowInfo;->getIntent()Landroid/content/Intent;",
        "Lcom/monsou/lvyoufuwu/XinwenShowInfo;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/XinwenShowInfo;->setContentView()V"
    ],
    "Lcom/monsou/lvyoufuwu/VipList;": [
        "Lcom/monsou/lvyoufuwu/VipList;->getIntent()Landroid/content/Intent;",
        "Lcom/monsou/lvyoufuwu/VipList;->webviewConfig()V",
        "Lcom/monsou/lvyoufuwu/VipList;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/VipList;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/VipList;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/VipList;->finish()V",
        "Lcom/monsou/lvyoufuwu/VipList;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/VipList;->getWindow()Landroid/view/Window;"
    ],
    "Lcom/monsou/lvyoufuwu/RefreshableView;": [
        "Lcom/monsou/lvyoufuwu/RefreshableView;->refresh()V",
        "Lcom/monsou/lvyoufuwu/RefreshableView;->getChildAt()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/RefreshableView;->returnInitState()V",
        "Lcom/monsou/lvyoufuwu/RefreshableView;->canScroll()Z",
        "Lcom/monsou/lvyoufuwu/RefreshableView;->setRefreshTime()V",
        "Lcom/monsou/lvyoufuwu/RefreshableView;->doMovement()V",
        "Lcom/monsou/lvyoufuwu/RefreshableView;->fling()V",
        "Lcom/monsou/lvyoufuwu/RefreshableView;->invalidate()V",
        "Lcom/monsou/lvyoufuwu/RefreshableView;->addView()V",
        "Lcom/monsou/lvyoufuwu/RefreshableView;->getChildCount()I"
    ],
    "Landroid/widget/ScrollView;": [
        "Landroid/widget/ScrollView;->getScrollY()I"
    ],
    "Landroid/widget/Scroller;": [
        "Landroid/widget/Scroller;->computeScrollOffset()Z",
        "Landroid/widget/Scroller;->startScroll()V",
        "Landroid/widget/Scroller;->getCurrY()I"
    ],
    "Lcom/monsou/lvyoufuwu/RefreshableView$RefreshListener;": [
        "Lcom/monsou/lvyoufuwu/RefreshableView$RefreshListener;->onRefresh()V"
    ],
    "Lcom/monsou/lvyoufuwu/ZhaoshangShowInfo;": [
        "Lcom/monsou/lvyoufuwu/ZhaoshangShowInfo;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/ZhaoshangShowInfo;->loadUrl()V",
        "Lcom/monsou/lvyoufuwu/ZhaoshangShowInfo;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/ZhaoshangShowInfo;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/ZhaoshangShowInfo;->getWindow()Landroid/view/Window;",
        "Lcom/monsou/lvyoufuwu/ZhaoshangShowInfo;->getIntent()Landroid/content/Intent;",
        "Lcom/monsou/lvyoufuwu/ZhaoshangShowInfo;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/ZhaoshangShowInfo;->finish()V"
    ],
    "Lcom/monsou/lvyoufuwu/More;": [
        "Lcom/monsou/lvyoufuwu/More;->getPackageManager()Landroid/content/pm/PackageManager;",
        "Lcom/monsou/lvyoufuwu/More;->getPackageName()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/More;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/More;->getWindow()Landroid/view/Window;",
        "Lcom/monsou/lvyoufuwu/More;->overridePendingTransition()V",
        "Lcom/monsou/lvyoufuwu/More;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/More;->startActivity()V",
        "Lcom/monsou/lvyoufuwu/More;->getClientVersion()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/More;->finish()V",
        "Lcom/monsou/lvyoufuwu/More;->getSharedPreferences()Landroid/content/SharedPreferences;",
        "Lcom/monsou/lvyoufuwu/More;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/More;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/More;->exitLogin()V"
    ],
    "Lcom/baidu/mapapi/BMapManager;": [
        "Lcom/baidu/mapapi/BMapManager;->start()Z",
        "Lcom/baidu/mapapi/BMapManager;->stop()Z",
        "Lcom/baidu/mapapi/BMapManager;->destroy()V",
        "Lcom/baidu/mapapi/BMapManager;->getLocationManager()Lcom/baidu/mapapi/MKLocationManager;"
    ],
    "Lcom/baidu/mapapi/MKLocationManager;": [
        "Lcom/baidu/mapapi/MKLocationManager;->removeUpdates()V",
        "Lcom/baidu/mapapi/MKLocationManager;->a()Z",
        "Lcom/baidu/mapapi/MKLocationManager;->requestLocationUpdates()V",
        "Lcom/baidu/mapapi/MKLocationManager;->disableProvider()Z",
        "Lcom/baidu/mapapi/MKLocationManager;->getLocationInfo()Landroid/location/Location;",
        "Lcom/baidu/mapapi/MKLocationManager;->enableProvider()Z",
        "Lcom/baidu/mapapi/MKLocationManager;->a()V"
    ],
    "Lcom/monsou/lvyoufuwu/ZixunShowInfo;": [
        "Lcom/monsou/lvyoufuwu/ZixunShowInfo;->getIntent()Landroid/content/Intent;",
        "Lcom/monsou/lvyoufuwu/ZixunShowInfo;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/ZixunShowInfo;->finish()V",
        "Lcom/monsou/lvyoufuwu/ZixunShowInfo;->loadUrl()V",
        "Lcom/monsou/lvyoufuwu/ZixunShowInfo;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/ZixunShowInfo;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/ZixunShowInfo;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/ZixunShowInfo;->getWindow()Landroid/view/Window;"
    ],
    "Lcom/monsou/lvyoufuwu/MainActivity;": [
        "Lcom/monsou/lvyoufuwu/MainActivity;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/MainActivity;->getWebShopList()Lcom/monsou/lvyoufuwu/WebShopList;",
        "Lcom/monsou/lvyoufuwu/MainActivity;->getServerData()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/MainActivity;->getSharedPreferences()Landroid/content/SharedPreferences;",
        "Lcom/monsou/lvyoufuwu/MainActivity;->getWindowManager()Landroid/view/WindowManager;",
        "Lcom/monsou/lvyoufuwu/MainActivity;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/MainActivity;->getApplicationContext()Landroid/content/Context;",
        "Lcom/monsou/lvyoufuwu/MainActivity;->parseJSON()V",
        "Lcom/monsou/lvyoufuwu/MainActivity;->exitLogin()V",
        "Lcom/monsou/lvyoufuwu/MainActivity;->getWindow()Landroid/view/Window;",
        "Lcom/monsou/lvyoufuwu/MainActivity;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/MainActivity;->dialog()V",
        "Lcom/monsou/lvyoufuwu/MainActivity;->getLayoutInflater()Landroid/view/LayoutInflater;",
        "Lcom/monsou/lvyoufuwu/MainActivity;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/MainActivity;->parseJSONa()V"
    ],
    "Lcom/monsou/lvyoufuwu/WebShopitemHandler;": [
        "Lcom/monsou/lvyoufuwu/WebShopitemHandler;->getWebShopList()Lcom/monsou/lvyoufuwu/WebShopList;"
    ],
    "Lcom/monsou/lvyoufuwu/entity/ShopList;": [
        "Lcom/monsou/lvyoufuwu/entity/ShopList;->addItem()I",
        "Lcom/monsou/lvyoufuwu/entity/ShopList;->getAllItems()Ljava/util/List;"
    ],
    "Lcom/monsou/lvyoufuwu/entity/TouShopItem;": [
        "Lcom/monsou/lvyoufuwu/entity/TouShopItem;->setC_name()V",
        "Lcom/monsou/lvyoufuwu/entity/TouShopItem;->setId()V",
        "Lcom/monsou/lvyoufuwu/entity/TouShopItem;->getC_name()Ljava/lang/String;"
    ],
    "Lcom/monsou/lvyoufuwu/entity/TouShopList;": [
        "Lcom/monsou/lvyoufuwu/entity/TouShopList;->addItem()I"
    ],
    "Lcom/monsou/lvyoufuwu/entity/LiebiaoShopList;": [
        "Lcom/monsou/lvyoufuwu/entity/LiebiaoShopList;->getAllItems()Ljava/util/List;",
        "Lcom/monsou/lvyoufuwu/entity/LiebiaoShopList;->addItem()I"
    ],
    "Lcom/monsou/lvyoufuwu/entity/LiebiaoShopItem;": [
        "Lcom/monsou/lvyoufuwu/entity/LiebiaoShopItem;->setRemark_1()V",
        "Lcom/monsou/lvyoufuwu/entity/LiebiaoShopItem;->getName()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/LiebiaoShopItem;->setContAdd()V",
        "Lcom/monsou/lvyoufuwu/entity/LiebiaoShopItem;->setName()V",
        "Lcom/monsou/lvyoufuwu/entity/LiebiaoShopItem;->getSmallimg()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/LiebiaoShopItem;->getRemark_1()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/LiebiaoShopItem;->setId()V",
        "Lcom/monsou/lvyoufuwu/entity/LiebiaoShopItem;->setSmallimg()V"
    ],
    "Lcom/monsou/lvyoufuwu/MainActivity$SaxParseApplyTask4;": [
        "Lcom/monsou/lvyoufuwu/MainActivity$SaxParseApplyTask4;->execute()Landroid/os/AsyncTask;"
    ],
    "Lcom/monsou/lvyoufuwu/MainActivity$SaxParseApplyTask;": [
        "Lcom/monsou/lvyoufuwu/MainActivity$SaxParseApplyTask;->execute()Landroid/os/AsyncTask;"
    ],
    "Lcom/monsou/lvyoufuwu/Proclass;": [
        "Lcom/monsou/lvyoufuwu/Proclass;->getFenData()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/Proclass;->getServerData()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/Proclass;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/Proclass;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/Proclass;->fenJSON()V",
        "Lcom/monsou/lvyoufuwu/Proclass;->parseJSON()V",
        "Lcom/monsou/lvyoufuwu/Proclass;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/Proclass;->setContentView()V"
    ],
    "Lcom/monsou/lvyoufuwu/adapters/ArticleList;": [
        "Lcom/monsou/lvyoufuwu/adapters/ArticleList;->addItem()I",
        "Lcom/monsou/lvyoufuwu/adapters/ArticleList;->getAllItems()Ljava/util/List;"
    ],
    "Lcom/monsou/lvyoufuwu/adapters/ArticleItem;": [
        "Lcom/monsou/lvyoufuwu/adapters/ArticleItem;->setPrmtitle()V",
        "Lcom/monsou/lvyoufuwu/adapters/ArticleItem;->setId()V",
        "Lcom/monsou/lvyoufuwu/adapters/ArticleItem;->setDatetime()V",
        "Lcom/monsou/lvyoufuwu/adapters/ArticleItem;->getDatetime()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/adapters/ArticleItem;->setPinglun()V",
        "Lcom/monsou/lvyoufuwu/adapters/ArticleItem;->getPrmtitle()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/adapters/ArticleItem;->getPinglun()Ljava/lang/String;"
    ],
    "Lcom/monsou/lvyoufuwu/RegisterCheckCode;": [
        "Lcom/monsou/lvyoufuwu/RegisterCheckCode;->getIntent()Landroid/content/Intent;",
        "Lcom/monsou/lvyoufuwu/RegisterCheckCode;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/RegisterCheckCode;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/RegisterCheckCode;->setContentView()V"
    ],
    "Lcom/monsou/lvyoufuwu/LoginActivity;": [
        "Lcom/monsou/lvyoufuwu/LoginActivity;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/LoginActivity;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/LoginActivity;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/LoginActivity;->getIntent()Landroid/content/Intent;"
    ],
    "Lcom/monsou/lvyoufuwu/ShakeListener;": [
        "Lcom/monsou/lvyoufuwu/ShakeListener;->setOnShakeListener()V",
        "Lcom/monsou/lvyoufuwu/ShakeListener;->start()V"
    ],
    "Lcom/monsou/lvyoufuwu/ShakeListener$OnShakeListener;": [
        "Lcom/monsou/lvyoufuwu/ShakeListener$OnShakeListener;->onShake()V"
    ],
    "Landroid/hardware/SensorManager;": [
        "Landroid/hardware/SensorManager;->getDefaultSensor()Landroid/hardware/Sensor;",
        "Landroid/hardware/SensorManager;->unregisterListener()V",
        "Landroid/hardware/SensorManager;->registerListener()Z"
    ],
    "Lcom/monsou/lvyoufuwu/CommentPl;": [
        "Lcom/monsou/lvyoufuwu/CommentPl;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/CommentPl;->getServerData()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/CommentPl;->getIntent()Landroid/content/Intent;",
        "Lcom/monsou/lvyoufuwu/CommentPl;->parseJSON()V",
        "Lcom/monsou/lvyoufuwu/CommentPl;->findViewById()Landroid/view/View;"
    ],
    "Lcom/monsou/lvyoufuwu/adapters/CommentsList;": [
        "Lcom/monsou/lvyoufuwu/adapters/CommentsList;->addItem()I",
        "Lcom/monsou/lvyoufuwu/adapters/CommentsList;->getAllItems()Ljava/util/List;"
    ],
    "Lcom/monsou/lvyoufuwu/adapters/CommentItem;": [
        "Lcom/monsou/lvyoufuwu/adapters/CommentItem;->getDatetime()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/adapters/CommentItem;->setAnsAuthor()V",
        "Lcom/monsou/lvyoufuwu/adapters/CommentItem;->setId()V",
        "Lcom/monsou/lvyoufuwu/adapters/CommentItem;->setDatetime()V",
        "Lcom/monsou/lvyoufuwu/adapters/CommentItem;->getAnsAuthor()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/adapters/CommentItem;->getAnsContent()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/adapters/CommentItem;->setAnsContent()V"
    ],
    "Lcom/monsou/lvyoufuwu/ProDetail;": [
        "Lcom/monsou/lvyoufuwu/ProDetail;->comment_pro()V",
        "Lcom/monsou/lvyoufuwu/ProDetail;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/ProDetail;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/ProDetail;->getIntent()Landroid/content/Intent;",
        "Lcom/monsou/lvyoufuwu/ProDetail;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/ProDetail;->webviewConfig()V",
        "Lcom/monsou/lvyoufuwu/ProDetail;->startActivity()V",
        "Lcom/monsou/lvyoufuwu/ProDetail;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/ProDetail;->getLayoutInflater()Landroid/view/LayoutInflater;",
        "Lcom/monsou/lvyoufuwu/ProDetail;->getSharedPreferences()Landroid/content/SharedPreferences;"
    ],
    "Lcom/monsou/lvyoufuwu/MyAroundUs;": [
        "Lcom/monsou/lvyoufuwu/MyAroundUs;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/MyAroundUs;->isFinishing()Z",
        "Lcom/monsou/lvyoufuwu/MyAroundUs;->getServerData()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/MyAroundUs;->getApplication()Landroid/app/Application;",
        "Lcom/monsou/lvyoufuwu/MyAroundUs;->getSharedPreferences()Landroid/content/SharedPreferences;",
        "Lcom/monsou/lvyoufuwu/MyAroundUs;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/MyAroundUs;->ShowDialog()V",
        "Lcom/monsou/lvyoufuwu/MyAroundUs;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/MyAroundUs;->setContentView()V"
    ],
    "Lcom/monsou/lvyoufuwu/MyAroundUs$SaxParserApplyTask;": [
        "Lcom/monsou/lvyoufuwu/MyAroundUs$SaxParserApplyTask;->execute()Landroid/os/AsyncTask;"
    ],
    "Landroid/app/Application;": [
        "Landroid/app/Application;->getSystemService()Ljava/lang/Object;"
    ],
    "Lcom/monsou/lvyoufuwu/adapters/AroundList;": [
        "Lcom/monsou/lvyoufuwu/adapters/AroundList;->getAllItems()Ljava/util/List;",
        "Lcom/monsou/lvyoufuwu/adapters/AroundList;->addItem()I"
    ],
    "Lcom/monsou/lvyoufuwu/adapters/AroundItem;": [
        "Lcom/monsou/lvyoufuwu/adapters/AroundItem;->getTel()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/adapters/AroundItem;->getPicurl()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/adapters/AroundItem;->setPicurl()V",
        "Lcom/monsou/lvyoufuwu/adapters/AroundItem;->setApp_url()V",
        "Lcom/monsou/lvyoufuwu/adapters/AroundItem;->getDistance()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/adapters/AroundItem;->setApp_name()V",
        "Lcom/monsou/lvyoufuwu/adapters/AroundItem;->getApp_name()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/adapters/AroundItem;->setDistance()V",
        "Lcom/monsou/lvyoufuwu/adapters/AroundItem;->setTel()V"
    ],
    "Landroid/os/Vibrator;": [
        "Landroid/os/Vibrator;->vibrate()V"
    ],
    "Lcom/monsou/lvyoufuwu/util/GalleryFlow;": [
        "Lcom/monsou/lvyoufuwu/util/GalleryFlow;->getCenterOfView()I",
        "Lcom/monsou/lvyoufuwu/util/GalleryFlow;->getPaddingLeft()I",
        "Lcom/monsou/lvyoufuwu/util/GalleryFlow;->getCenterOfCoverflow()I",
        "Lcom/monsou/lvyoufuwu/util/GalleryFlow;->getWidth()I",
        "Lcom/monsou/lvyoufuwu/util/GalleryFlow;->getPaddingRight()I",
        "Lcom/monsou/lvyoufuwu/util/GalleryFlow;->setStaticTransformationsEnabled()V",
        "Lcom/monsou/lvyoufuwu/util/GalleryFlow;->transformImageBitmap()V"
    ],
    "Landroid/graphics/Camera;": [
        "Landroid/graphics/Camera;->save()V",
        "Landroid/graphics/Camera;->translate()V",
        "Landroid/graphics/Camera;->restore()V",
        "Landroid/graphics/Camera;->rotateY()V",
        "Landroid/graphics/Camera;->getMatrix()V"
    ],
    "Landroid/view/animation/Transformation;": [
        "Landroid/view/animation/Transformation;->getMatrix()Landroid/graphics/Matrix;",
        "Landroid/view/animation/Transformation;->setTransformationType()V",
        "Landroid/view/animation/Transformation;->clear()V"
    ],
    "Landroid/graphics/Matrix;": [
        "Landroid/graphics/Matrix;->reset()V",
        "Landroid/graphics/Matrix;->preTranslate()Z",
        "Landroid/graphics/Matrix;->postScale()Z",
        "Landroid/graphics/Matrix;->postTranslate()Z",
        "Landroid/graphics/Matrix;->postRotate()Z",
        "Landroid/graphics/Matrix;->setRotate()V",
        "Landroid/graphics/Matrix;->preScale()Z"
    ],
    "Lcom/monsou/lvyoufuwu/upload/UpLoadPic_alter;": [
        "Lcom/monsou/lvyoufuwu/upload/UpLoadPic_alter;->managedQuery()Landroid/database/Cursor;",
        "Lcom/monsou/lvyoufuwu/upload/UpLoadPic_alter;->returnBitMap()Landroid/graphics/Bitmap;",
        "Lcom/monsou/lvyoufuwu/upload/UpLoadPic_alter;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/upload/UpLoadPic_alter;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/upload/UpLoadPic_alter;->saveBmpToSd()V",
        "Lcom/monsou/lvyoufuwu/upload/UpLoadPic_alter;->getApplicationContext()Landroid/content/Context;",
        "Lcom/monsou/lvyoufuwu/upload/UpLoadPic_alter;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/upload/UpLoadPic_alter;->startActivityForResult()V",
        "Lcom/monsou/lvyoufuwu/upload/UpLoadPic_alter;->getContentResolver()Landroid/content/ContentResolver;",
        "Lcom/monsou/lvyoufuwu/upload/UpLoadPic_alter;->getIntent()Landroid/content/Intent;",
        "Lcom/monsou/lvyoufuwu/upload/UpLoadPic_alter;->findViewById()Landroid/view/View;"
    ],
    "Lcom/monsou/lvyoufuwu/upload/FormFile;": [
        "Lcom/monsou/lvyoufuwu/upload/FormFile;->getParameterName()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/upload/FormFile;->getFile()Ljava/io/File;",
        "Lcom/monsou/lvyoufuwu/upload/FormFile;->getInStream()Ljava/io/InputStream;",
        "Lcom/monsou/lvyoufuwu/upload/FormFile;->getData()[B",
        "Lcom/monsou/lvyoufuwu/upload/FormFile;->getFilname()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/upload/FormFile;->getContentType()Ljava/lang/String;"
    ],
    "Landroid/provider/MediaStore$Images$Media;": [
        "Landroid/provider/MediaStore$Images$Media;->getBitmap()Landroid/graphics/Bitmap;"
    ],
    "Lcom/monsou/lvyoufuwu/upload/SocketHttpRequester;": [
        "Lcom/monsou/lvyoufuwu/upload/SocketHttpRequester;->readStream()[B",
        "Lcom/monsou/lvyoufuwu/upload/SocketHttpRequester;->post()Z"
    ],
    "Lcom/monsou/lvyoufuwu/upload/ImageFileListAdapter;": [
        "Lcom/monsou/lvyoufuwu/upload/ImageFileListAdapter;->scalBit()Landroid/graphics/Bitmap;"
    ],
    "Lcom/monsou/lvyoufuwu/upload/CommentProducts;": [
        "Lcom/monsou/lvyoufuwu/upload/CommentProducts;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/upload/CommentProducts;->notify_list()V",
        "Lcom/monsou/lvyoufuwu/upload/CommentProducts;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/upload/CommentProducts;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/upload/CommentProducts;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/upload/CommentProducts;->getIntent()Landroid/content/Intent;",
        "Lcom/monsou/lvyoufuwu/upload/CommentProducts;->getShopList()Lcom/monsou/lvyoufuwu/entity/MonsouShopList;"
    ],
    "Lcom/monsou/lvyoufuwu/adapters/MonsouShopHandler;": [
        "Lcom/monsou/lvyoufuwu/adapters/MonsouShopHandler;->getMshoplist()Lcom/monsou/lvyoufuwu/entity/MonsouShopList;"
    ],
    "Lcom/monsou/lvyoufuwu/entity/MonsouShopList;": [
        "Lcom/monsou/lvyoufuwu/entity/MonsouShopList;->addItem()I",
        "Lcom/monsou/lvyoufuwu/entity/MonsouShopList;->getAllItems()Ljava/util/List;"
    ],
    "Lcom/monsou/lvyoufuwu/upload/MonsouProducts;": [
        "Lcom/monsou/lvyoufuwu/upload/MonsouProducts;->getShopList()Lcom/monsou/lvyoufuwu/entity/MonsouShopList;",
        "Lcom/monsou/lvyoufuwu/upload/MonsouProducts;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/upload/MonsouProducts;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/upload/MonsouProducts;->notify_list()V",
        "Lcom/monsou/lvyoufuwu/upload/MonsouProducts;->getIntent()Landroid/content/Intent;",
        "Lcom/monsou/lvyoufuwu/upload/MonsouProducts;->getShopShow()Lcom/monsou/lvyoufuwu/entity/MonsouShopShow;",
        "Lcom/monsou/lvyoufuwu/upload/MonsouProducts;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/upload/MonsouProducts;->getApplicationContext()Landroid/content/Context;",
        "Lcom/monsou/lvyoufuwu/upload/MonsouProducts;->findViewById()Landroid/view/View;"
    ],
    "Lcom/monsou/lvyoufuwu/adapters/MonsouShopShowHandler;": [
        "Lcom/monsou/lvyoufuwu/adapters/MonsouShopShowHandler;->getMshopShow()Lcom/monsou/lvyoufuwu/entity/MonsouShopShow;"
    ],
    "Ljava/io/FileNotFoundException;": [
        "Ljava/io/FileNotFoundException;->printStackTrace()V"
    ],
    "Lcom/monsou/lvyoufuwu/upload/UpLoadPic;": [
        "Lcom/monsou/lvyoufuwu/upload/UpLoadPic;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/upload/UpLoadPic;->getContentResolver()Landroid/content/ContentResolver;",
        "Lcom/monsou/lvyoufuwu/upload/UpLoadPic;->getIntent()Landroid/content/Intent;",
        "Lcom/monsou/lvyoufuwu/upload/UpLoadPic;->managedQuery()Landroid/database/Cursor;",
        "Lcom/monsou/lvyoufuwu/upload/UpLoadPic;->requestWindowFeature()Z",
        "Lcom/monsou/lvyoufuwu/upload/UpLoadPic;->getResources()Landroid/content/res/Resources;",
        "Lcom/monsou/lvyoufuwu/upload/UpLoadPic;->startActivityForResult()V",
        "Lcom/monsou/lvyoufuwu/upload/UpLoadPic;->findViewById()Landroid/view/View;",
        "Lcom/monsou/lvyoufuwu/upload/UpLoadPic;->getApplicationContext()Landroid/content/Context;"
    ],
    "Lcom/monsou/lvyoufuwu/upload/SelectFileActivity;": [
        "Lcom/monsou/lvyoufuwu/upload/SelectFileActivity;->getImageFile()Z",
        "Lcom/monsou/lvyoufuwu/upload/SelectFileActivity;->getApplicationContext()Landroid/content/Context;",
        "Lcom/monsou/lvyoufuwu/upload/SelectFileActivity;->getIntent()Landroid/content/Intent;",
        "Lcom/monsou/lvyoufuwu/upload/SelectFileActivity;->destoryBimap()V",
        "Lcom/monsou/lvyoufuwu/upload/SelectFileActivity;->getData()Ljava/util/List;",
        "Lcom/monsou/lvyoufuwu/upload/SelectFileActivity;->setContentView()V",
        "Lcom/monsou/lvyoufuwu/upload/SelectFileActivity;->setResult()V",
        "Lcom/monsou/lvyoufuwu/upload/SelectFileActivity;->overridePendingTransition()V",
        "Lcom/monsou/lvyoufuwu/upload/SelectFileActivity;->startActivity()V",
        "Lcom/monsou/lvyoufuwu/upload/SelectFileActivity;->finish()V",
        "Lcom/monsou/lvyoufuwu/upload/SelectFileActivity;->onActivityResult()V",
        "Lcom/monsou/lvyoufuwu/upload/SelectFileActivity;->setListAdapter()V",
        "Lcom/monsou/lvyoufuwu/upload/SelectFileActivity;->startActivityForResult()V"
    ],
    "Landroid/app/ListActivity;": [
        "Landroid/app/ListActivity;->finish()V",
        "Landroid/app/ListActivity;->onCreate()V",
        "Landroid/app/ListActivity;->onDestroy()V"
    ],
    "Ljava/io/BufferedOutputStream;": [
        "Ljava/io/BufferedOutputStream;->close()V",
        "Ljava/io/BufferedOutputStream;->write()V"
    ],
    "Landroid/database/sqlite/SQLiteOpenHelper;": [
        "Landroid/database/sqlite/SQLiteOpenHelper;->getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase;",
        "Landroid/database/sqlite/SQLiteOpenHelper;->onOpen()V",
        "Landroid/database/sqlite/SQLiteOpenHelper;->getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase;"
    ],
    "Lcom/monsou/lvyoufuwu/adapters/CustomAdapter;": [
        "Lcom/monsou/lvyoufuwu/adapters/CustomAdapter;->notifyDataSetChanged()V"
    ],
    "Lcom/monsou/lvyoufuwu/entity/ShopItem;": [
        "Lcom/monsou/lvyoufuwu/entity/ShopItem;->getContent()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/ShopItem;->getTit()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/ShopItem;->setLogtxt()V",
        "Lcom/monsou/lvyoufuwu/entity/ShopItem;->setWangzhi()V",
        "Lcom/monsou/lvyoufuwu/entity/ShopItem;->getImgtxt()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/ShopItem;->setTit()V",
        "Lcom/monsou/lvyoufuwu/entity/ShopItem;->setAddress()V",
        "Lcom/monsou/lvyoufuwu/entity/ShopItem;->setImgtxt()V",
        "Lcom/monsou/lvyoufuwu/entity/ShopItem;->setContent()V"
    ],
    "Lcom/monsou/lvyoufuwu/entity/MsgStr;": [
        "Lcom/monsou/lvyoufuwu/entity/MsgStr;->getName()Ljava/lang/String;"
    ],
    "Lcom/monsou/lvyoufuwu/entity/MonsouShop;": [
        "Lcom/monsou/lvyoufuwu/entity/MonsouShop;->getTitle()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/MonsouShop;->setShopid()V",
        "Lcom/monsou/lvyoufuwu/entity/MonsouShop;->setTitle()V",
        "Lcom/monsou/lvyoufuwu/entity/MonsouShop;->setId()V"
    ],
    "Lcom/monsou/lvyoufuwu/entity/ZhanhuiShopItem;": [
        "Lcom/monsou/lvyoufuwu/entity/ZhanhuiShopItem;->getTitle()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/ZhanhuiShopItem;->getNfrom()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/ZhanhuiShopItem;->getPic()Ljava/lang/String;"
    ],
    "Lcom/monsou/lvyoufuwu/entity/QiyeShopItem;": [
        "Lcom/monsou/lvyoufuwu/entity/QiyeShopItem;->getCompanyName()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/QiyeShopItem;->setSiteUrl()V",
        "Lcom/monsou/lvyoufuwu/entity/QiyeShopItem;->setIndustry()V",
        "Lcom/monsou/lvyoufuwu/entity/QiyeShopItem;->getSn()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/QiyeShopItem;->getCompanyContext()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/QiyeShopItem;->setMobile()V",
        "Lcom/monsou/lvyoufuwu/entity/QiyeShopItem;->setCompanyContext()V",
        "Lcom/monsou/lvyoufuwu/entity/QiyeShopItem;->setAddress()V",
        "Lcom/monsou/lvyoufuwu/entity/QiyeShopItem;->setPhone()V",
        "Lcom/monsou/lvyoufuwu/entity/QiyeShopItem;->setSn()V",
        "Lcom/monsou/lvyoufuwu/entity/QiyeShopItem;->setCompanyName()V",
        "Lcom/monsou/lvyoufuwu/entity/QiyeShopItem;->setFax()V"
    ],
    "Lcom/monsou/lvyoufuwu/entity/HuiyuanItem;": [
        "Lcom/monsou/lvyoufuwu/entity/HuiyuanItem;->setLogtxt()V",
        "Lcom/monsou/lvyoufuwu/entity/HuiyuanItem;->getWangzhi()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/HuiyuanItem;->getAddress()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/HuiyuanItem;->setContent()V",
        "Lcom/monsou/lvyoufuwu/entity/HuiyuanItem;->getLogtxt()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/HuiyuanItem;->setAddress()V",
        "Lcom/monsou/lvyoufuwu/entity/HuiyuanItem;->getContent()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/HuiyuanItem;->setImgtxt()V",
        "Lcom/monsou/lvyoufuwu/entity/HuiyuanItem;->setWangzhi()V",
        "Lcom/monsou/lvyoufuwu/entity/HuiyuanItem;->getTit()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/HuiyuanItem;->getImgtxt()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/HuiyuanItem;->setTit()V"
    ],
    "Lcom/monsou/lvyoufuwu/entity/XinwenShopItem;": [
        "Lcom/monsou/lvyoufuwu/entity/XinwenShopItem;->getTitle()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/XinwenShopItem;->getPic()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/XinwenShopItem;->getIntro()Ljava/lang/String;"
    ],
    "Lcom/monsou/lvyoufuwu/entity/ShousuoShopItem;": [
        "Lcom/monsou/lvyoufuwu/entity/ShousuoShopItem;->getName()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/ShousuoShopItem;->getSmallimg()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/ShousuoShopItem;->getRemark_1()Ljava/lang/String;"
    ],
    "Lcom/monsou/lvyoufuwu/entity/QiyeShopList;": [
        "Lcom/monsou/lvyoufuwu/entity/QiyeShopList;->addItem()I"
    ],
    "Lcom/monsou/lvyoufuwu/entity/MonsouShopShow;": [
        "Lcom/monsou/lvyoufuwu/entity/MonsouShopShow;->setTitle()V",
        "Lcom/monsou/lvyoufuwu/entity/MonsouShopShow;->setPrice()V",
        "Lcom/monsou/lvyoufuwu/entity/MonsouShopShow;->setPic()V",
        "Lcom/monsou/lvyoufuwu/entity/MonsouShopShow;->setContent()V"
    ],
    "Lcom/monsou/lvyoufuwu/entity/GongqiuShopItem;": [
        "Lcom/monsou/lvyoufuwu/entity/GongqiuShopItem;->getComname()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/GongqiuShopItem;->getPic()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/entity/GongqiuShopItem;->getTitle()Ljava/lang/String;"
    ],
    "Lcom/monsou/lvyoufuwu/adapters/GalleryShopItem;": [
        "Lcom/monsou/lvyoufuwu/adapters/GalleryShopItem;->setId()V",
        "Lcom/monsou/lvyoufuwu/adapters/GalleryShopItem;->setProname()V",
        "Lcom/monsou/lvyoufuwu/adapters/GalleryShopItem;->getProname()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/adapters/GalleryShopItem;->setUrl()V",
        "Lcom/monsou/lvyoufuwu/adapters/GalleryShopItem;->getUrl()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/adapters/GalleryShopItem;->getPic()Ljava/lang/String;",
        "Lcom/monsou/lvyoufuwu/adapters/GalleryShopItem;->setPic()V"
    ],
    "Lcom/monsou/lvyoufuwu/adapters/LiebiaoAdapter;": [
        "Lcom/monsou/lvyoufuwu/adapters/LiebiaoAdapter;->getItem()Ljava/lang/Object;",
        "Lcom/monsou/lvyoufuwu/adapters/LiebiaoAdapter;->getContext()Landroid/content/Context;"
    ],
    "Lcom/monsou/lvyoufuwu/ViewCache;": [
        "Lcom/monsou/lvyoufuwu/ViewCache;->getImageView()Landroid/widget/ImageView;",
        "Lcom/monsou/lvyoufuwu/ViewCache;->getTextView2()Landroid/widget/TextView;",
        "Lcom/monsou/lvyoufuwu/ViewCache;->getTextView()Landroid/widget/TextView;"
    ],
    "Lcom/monsou/lvyoufuwu/AsyncImageLoader;": [
        "Lcom/monsou/lvyoufuwu/AsyncImageLoader;->loadDrawable()Landroid/graphics/drawable/Drawable;"
    ],
    "Lcom/xmpp/client/FormClient;": [
        "Lcom/xmpp/client/FormClient;->getIntent()Landroid/content/Intent;",
        "Lcom/xmpp/client/FormClient;->getSharedPreferences()Landroid/content/SharedPreferences;",
        "Lcom/xmpp/client/FormClient;->setResult()V",
        "Lcom/xmpp/client/FormClient;->receiveOfflineMessage()V",
        "Lcom/xmpp/client/FormClient;->findViewById()Landroid/view/View;",
        "Lcom/xmpp/client/FormClient;->finish()V",
        "Lcom/xmpp/client/FormClient;->setContentView()V",
        "Lcom/xmpp/client/FormClient;->sendFile()V"
    ],
    "Lcom/xmpp/client/util/TimeRender;": [
        "Lcom/xmpp/client/util/TimeRender;->getDate()Ljava/lang/String;"
    ],
    "Landroid/os/Message;": [
        "Landroid/os/Message;->getTarget()Landroid/os/Handler;",
        "Landroid/os/Message;->setData()V",
        "Landroid/os/Message;->getData()Landroid/os/Bundle;",
        "Landroid/os/Message;->obtain()Landroid/os/Message;",
        "Landroid/os/Message;->sendToTarget()V"
    ],
    "Lcom/xmpp/client/FormFiles;": [
        "Lcom/xmpp/client/FormFiles;->setContentView()V",
        "Lcom/xmpp/client/FormFiles;->setResult()V",
        "Lcom/xmpp/client/FormFiles;->onExit()V",
        "Lcom/xmpp/client/FormFiles;->findViewById()Landroid/view/View;",
        "Lcom/xmpp/client/FormFiles;->finish()V",
        "Lcom/xmpp/client/FormFiles;->getFileDir()V"
    ],
    "Lcom/xmpp/client/FriendList;": [
        "Lcom/xmpp/client/FriendList;->receiveOfflineMessage()V",
        "Lcom/xmpp/client/FriendList;->setContentView()V",
        "Lcom/xmpp/client/FriendList;->findViewById()Landroid/view/View;",
        "Lcom/xmpp/client/FriendList;->getIntent()Landroid/content/Intent;"
    ],
    "Lcom/xmpp/client/util/UserList;": [
        "Lcom/xmpp/client/util/UserList;->getAllItems()Ljava/util/List;",
        "Lcom/xmpp/client/util/UserList;->addItem()I"
    ],
    "Lcom/xmpp/client/util/User;": [
        "Lcom/xmpp/client/util/User;->setFrom()V",
        "Lcom/xmpp/client/util/User;->setName()V",
        "Lcom/xmpp/client/util/User;->getName()Ljava/lang/String;",
        "Lcom/xmpp/client/util/User;->setUser()V",
        "Lcom/xmpp/client/util/User;->setSize()V",
        "Lcom/xmpp/client/util/User;->setType()V",
        "Lcom/xmpp/client/util/User;->setStatus()V"
    ],
    "Lcom/xmpp/client/util/TransferUtils;": [
        "Lcom/xmpp/client/util/TransferUtils;->splitAtDot()Ljava/lang/String;",
        "Lcom/xmpp/client/util/TransferUtils;->convertSecondstoHHMMSS()Ljava/lang/String;",
        "Lcom/xmpp/client/util/TransferUtils;->calculateSpeedLong()D"
    ],
    "Lcom/google/zxing/ResultPoint;": [
        "Lcom/google/zxing/ResultPoint;->distance()F",
        "Lcom/google/zxing/ResultPoint;->getY()F",
        "Lcom/google/zxing/ResultPoint;->getX()F",
        "Lcom/google/zxing/ResultPoint;->crossProductZ()F",
        "Lcom/google/zxing/ResultPoint;->orderBestPatterns()V"
    ],
    "Lcom/google/zxing/Binarizer;": [
        "Lcom/google/zxing/Binarizer;->getLuminanceSource()Lcom/google/zxing/LuminanceSource;",
        "Lcom/google/zxing/Binarizer;->getBlackMatrix()Lcom/google/zxing/common/BitMatrix;",
        "Lcom/google/zxing/Binarizer;->getBlackRow()Lcom/google/zxing/common/BitArray;",
        "Lcom/google/zxing/Binarizer;->createBinarizer()Lcom/google/zxing/Binarizer;"
    ],
    "Lcom/google/zxing/LuminanceSource;": [
        "Lcom/google/zxing/LuminanceSource;->getWidth()I",
        "Lcom/google/zxing/LuminanceSource;->isCropSupported()Z",
        "Lcom/google/zxing/LuminanceSource;->getRow()[B",
        "Lcom/google/zxing/LuminanceSource;->getMatrix()[B",
        "Lcom/google/zxing/LuminanceSource;->getHeight()I",
        "Lcom/google/zxing/LuminanceSource;->isRotateSupported()Z",
        "Lcom/google/zxing/LuminanceSource;->crop()Lcom/google/zxing/LuminanceSource;",
        "Lcom/google/zxing/LuminanceSource;->rotateCounterClockwise()Lcom/google/zxing/LuminanceSource;"
    ],
    "Lcom/google/zxing/MultiFormatWriter;": [
        "Lcom/google/zxing/MultiFormatWriter;->encode()Lcom/google/zxing/common/BitMatrix;"
    ],
    "Lcom/google/zxing/Writer;": [
        "Lcom/google/zxing/Writer;->encode()Lcom/google/zxing/common/BitMatrix;"
    ],
    "Lcom/google/zxing/Reader;": [
        "Lcom/google/zxing/Reader;->reset()V",
        "Lcom/google/zxing/Reader;->decode()Lcom/google/zxing/Result;"
    ],
    "Lcom/google/zxing/NotFoundException;": [
        "Lcom/google/zxing/NotFoundException;->getNotFoundInstance()Lcom/google/zxing/NotFoundException;"
    ],
    "Lcom/google/zxing/MultiFormatReader;": [
        "Lcom/google/zxing/MultiFormatReader;->decodeInternal()Lcom/google/zxing/Result;",
        "Lcom/google/zxing/MultiFormatReader;->decodeWithState()Lcom/google/zxing/Result;",
        "Lcom/google/zxing/MultiFormatReader;->reset()V",
        "Lcom/google/zxing/MultiFormatReader;->setHints()V"
    ],
    "Lcom/google/zxing/common/BitArray;": [
        "Lcom/google/zxing/common/BitArray;->xor()V",
        "Lcom/google/zxing/common/BitArray;->setBulk()V",
        "Lcom/google/zxing/common/BitArray;->isRange()Z",
        "Lcom/google/zxing/common/BitArray;->makeArray()[I",
        "Lcom/google/zxing/common/BitArray;->clear()V",
        "Lcom/google/zxing/common/BitArray;->set()V",
        "Lcom/google/zxing/common/BitArray;->appendBits()V",
        "Lcom/google/zxing/common/BitArray;->appendBitArray()V",
        "Lcom/google/zxing/common/BitArray;->reverse()V",
        "Lcom/google/zxing/common/BitArray;->appendBit()V",
        "Lcom/google/zxing/common/BitArray;->toBytes()V",
        "Lcom/google/zxing/common/BitArray;->ensureCapacity()V",
        "Lcom/google/zxing/common/BitArray;->get()Z",
        "Lcom/google/zxing/common/BitArray;->getSize()I",
        "Lcom/google/zxing/common/BitArray;->getSizeInBytes()I"
    ],
    "Lcom/google/zxing/common/GlobalHistogramBinarizer;": [
        "Lcom/google/zxing/common/GlobalHistogramBinarizer;->getLuminanceSource()Lcom/google/zxing/LuminanceSource;",
        "Lcom/google/zxing/common/GlobalHistogramBinarizer;->estimateBlackPoint()I",
        "Lcom/google/zxing/common/GlobalHistogramBinarizer;->getBlackMatrix()Lcom/google/zxing/common/BitMatrix;"
    ],
    "Lcom/google/zxing/common/BitMatrix;": [
        "Lcom/google/zxing/common/BitMatrix;->getTopLeftOnBit()[I",
        "Lcom/google/zxing/common/BitMatrix;->flip()V",
        "Lcom/google/zxing/common/BitMatrix;->getWidth()I",
        "Lcom/google/zxing/common/BitMatrix;->get()Z",
        "Lcom/google/zxing/common/BitMatrix;->set()V",
        "Lcom/google/zxing/common/BitMatrix;->setRegion()V",
        "Lcom/google/zxing/common/BitMatrix;->getHeight()I"
    ],
    "Lcom/google/zxing/common/CharacterSetECI;": [
        "Lcom/google/zxing/common/CharacterSetECI;->addCharacterSet()V",
        "Lcom/google/zxing/common/CharacterSetECI;->getEncodingName()Ljava/lang/String;",
        "Lcom/google/zxing/common/CharacterSetECI;->getCharacterSetECIByValue()Lcom/google/zxing/common/CharacterSetECI;",
        "Lcom/google/zxing/common/CharacterSetECI;->getCharacterSetECIByName()Lcom/google/zxing/common/CharacterSetECI;"
    ],
    "Lcom/google/zxing/common/Comparator;": [
        "Lcom/google/zxing/common/Comparator;->compare()I"
    ],
    "Lcom/google/zxing/common/HybridBinarizer;": [
        "Lcom/google/zxing/common/HybridBinarizer;->binarizeEntireImage()V",
        "Lcom/google/zxing/common/HybridBinarizer;->calculateBlackPoints()[[I",
        "Lcom/google/zxing/common/HybridBinarizer;->calculateThresholdForBlock()V",
        "Lcom/google/zxing/common/HybridBinarizer;->threshold8x8Block()V",
        "Lcom/google/zxing/common/HybridBinarizer;->getLuminanceSource()Lcom/google/zxing/LuminanceSource;"
    ],
    "Lcom/google/zxing/common/PerspectiveTransform;": [
        "Lcom/google/zxing/common/PerspectiveTransform;->quadrilateralToQuadrilateral()Lcom/google/zxing/common/PerspectiveTransform;",
        "Lcom/google/zxing/common/PerspectiveTransform;->squareToQuadrilateral()Lcom/google/zxing/common/PerspectiveTransform;",
        "Lcom/google/zxing/common/PerspectiveTransform;->quadrilateralToSquare()Lcom/google/zxing/common/PerspectiveTransform;",
        "Lcom/google/zxing/common/PerspectiveTransform;->transformPoints()V",
        "Lcom/google/zxing/common/PerspectiveTransform;->times()Lcom/google/zxing/common/PerspectiveTransform;",
        "Lcom/google/zxing/common/PerspectiveTransform;->buildAdjoint()Lcom/google/zxing/common/PerspectiveTransform;"
    ],
    "Lcom/google/zxing/common/DefaultGridSampler;": [
        "Lcom/google/zxing/common/DefaultGridSampler;->sampleGrid()Lcom/google/zxing/common/BitMatrix;",
        "Lcom/google/zxing/common/DefaultGridSampler;->checkAndNudgePoints()V"
    ],
    "Lcom/google/zxing/common/detector/WhiteRectangleDetector;": [
        "Lcom/google/zxing/common/detector/WhiteRectangleDetector;->containsBlackPoint()Z",
        "Lcom/google/zxing/common/detector/WhiteRectangleDetector;->distanceL2()I",
        "Lcom/google/zxing/common/detector/WhiteRectangleDetector;->round()I",
        "Lcom/google/zxing/common/detector/WhiteRectangleDetector;->getBlackPointOnSegment()Lcom/google/zxing/ResultPoint;",
        "Lcom/google/zxing/common/detector/WhiteRectangleDetector;->detect()[Lcom/google/zxing/ResultPoint;",
        "Lcom/google/zxing/common/detector/WhiteRectangleDetector;->centerEdges()[Lcom/google/zxing/ResultPoint;"
    ],
    "Lcom/google/zxing/common/detector/MonochromeRectangleDetector;": [
        "Lcom/google/zxing/common/detector/MonochromeRectangleDetector;->blackWhiteRange()[I",
        "Lcom/google/zxing/common/detector/MonochromeRectangleDetector;->findCornerFromCenter()Lcom/google/zxing/ResultPoint;"
    ],
    "Lcom/google/zxing/common/reedsolomon/GF256;": [
        "Lcom/google/zxing/common/reedsolomon/GF256;->exp()I",
        "Lcom/google/zxing/common/reedsolomon/GF256;->multiply()I",
        "Lcom/google/zxing/common/reedsolomon/GF256;->getOne()Lcom/google/zxing/common/reedsolomon/GF256Poly;",
        "Lcom/google/zxing/common/reedsolomon/GF256;->addOrSubtract()I",
        "Lcom/google/zxing/common/reedsolomon/GF256;->getZero()Lcom/google/zxing/common/reedsolomon/GF256Poly;",
        "Lcom/google/zxing/common/reedsolomon/GF256;->inverse()I",
        "Lcom/google/zxing/common/reedsolomon/GF256;->log()I",
        "Lcom/google/zxing/common/reedsolomon/GF256;->buildMonomial()Lcom/google/zxing/common/reedsolomon/GF256Poly;"
    ],
    "Lcom/google/zxing/common/reedsolomon/GF256Poly;": [
        "Lcom/google/zxing/common/reedsolomon/GF256Poly;->getDegree()I",
        "Lcom/google/zxing/common/reedsolomon/GF256Poly;->getCoefficient()I",
        "Lcom/google/zxing/common/reedsolomon/GF256Poly;->addOrSubtract()Lcom/google/zxing/common/reedsolomon/GF256Poly;",
        "Lcom/google/zxing/common/reedsolomon/GF256Poly;->getCoefficients()[I",
        "Lcom/google/zxing/common/reedsolomon/GF256Poly;->evaluateAt()I",
        "Lcom/google/zxing/common/reedsolomon/GF256Poly;->isZero()Z",
        "Lcom/google/zxing/common/reedsolomon/GF256Poly;->multiply()Lcom/google/zxing/common/reedsolomon/GF256Poly;",
        "Lcom/google/zxing/common/reedsolomon/GF256Poly;->multiplyByMonomial()Lcom/google/zxing/common/reedsolomon/GF256Poly;",
        "Lcom/google/zxing/common/reedsolomon/GF256Poly;->divide()[Lcom/google/zxing/common/reedsolomon/GF256Poly;"
    ],
    "Lcom/google/zxing/common/reedsolomon/ReedSolomonEncoder;": [
        "Lcom/google/zxing/common/reedsolomon/ReedSolomonEncoder;->buildGenerator()Lcom/google/zxing/common/reedsolomon/GF256Poly;",
        "Lcom/google/zxing/common/reedsolomon/ReedSolomonEncoder;->encode()V"
    ],
    "Lcom/google/zxing/common/reedsolomon/ReedSolomonDecoder;": [
        "Lcom/google/zxing/common/reedsolomon/ReedSolomonDecoder;->runEuclideanAlgorithm()[Lcom/google/zxing/common/reedsolomon/GF256Poly;",
        "Lcom/google/zxing/common/reedsolomon/ReedSolomonDecoder;->decode()V",
        "Lcom/google/zxing/common/reedsolomon/ReedSolomonDecoder;->findErrorLocations()[I",
        "Lcom/google/zxing/common/reedsolomon/ReedSolomonDecoder;->findErrorMagnitudes()[I"
    ],
    "Lcom/google/zxing/qrcode/encoder/QRCode;": [
        "Lcom/google/zxing/qrcode/encoder/QRCode;->setNumRSBlocks()V",
        "Lcom/google/zxing/qrcode/encoder/QRCode;->setMatrixWidth()V",
        "Lcom/google/zxing/qrcode/encoder/QRCode;->getMatrixWidth()I",
        "Lcom/google/zxing/qrcode/encoder/QRCode;->getNumTotalBytes()I",
        "Lcom/google/zxing/qrcode/encoder/QRCode;->toString()Ljava/lang/String;",
        "Lcom/google/zxing/qrcode/encoder/QRCode;->setNumTotalBytes()V",
        "Lcom/google/zxing/qrcode/encoder/QRCode;->setNumECBytes()V",
        "Lcom/google/zxing/qrcode/encoder/QRCode;->setMaskPattern()V",
        "Lcom/google/zxing/qrcode/encoder/QRCode;->getMaskPattern()I",
        "Lcom/google/zxing/qrcode/encoder/QRCode;->getNumRSBlocks()I",
        "Lcom/google/zxing/qrcode/encoder/QRCode;->setVersion()V",
        "Lcom/google/zxing/qrcode/encoder/QRCode;->isValid()Z",
        "Lcom/google/zxing/qrcode/encoder/QRCode;->getVersion()I",
        "Lcom/google/zxing/qrcode/encoder/QRCode;->setMatrix()V",
        "Lcom/google/zxing/qrcode/encoder/QRCode;->setNumDataBytes()V",
        "Lcom/google/zxing/qrcode/encoder/QRCode;->isValidMaskPattern()Z",
        "Lcom/google/zxing/qrcode/encoder/QRCode;->setMode()V",
        "Lcom/google/zxing/qrcode/encoder/QRCode;->getECLevel()Lcom/google/zxing/qrcode/decoder/ErrorCorrectionLevel;",
        "Lcom/google/zxing/qrcode/encoder/QRCode;->getNumDataBytes()I",
        "Lcom/google/zxing/qrcode/encoder/QRCode;->getMatrix()Lcom/google/zxing/qrcode/encoder/ByteMatrix;",
        "Lcom/google/zxing/qrcode/encoder/QRCode;->setECLevel()V"
    ],
    "Lcom/google/zxing/qrcode/encoder/ByteMatrix;": [
        "Lcom/google/zxing/qrcode/encoder/ByteMatrix;->set()V",
        "Lcom/google/zxing/qrcode/encoder/ByteMatrix;->getHeight()I",
        "Lcom/google/zxing/qrcode/encoder/ByteMatrix;->toString()Ljava/lang/String;",
        "Lcom/google/zxing/qrcode/encoder/ByteMatrix;->getArray()[[B",
        "Lcom/google/zxing/qrcode/encoder/ByteMatrix;->clear()V",
        "Lcom/google/zxing/qrcode/encoder/ByteMatrix;->getWidth()I",
        "Lcom/google/zxing/qrcode/encoder/ByteMatrix;->get()B"
    ],
    "Lcom/google/zxing/qrcode/QRCodeWriter;": [
        "Lcom/google/zxing/qrcode/QRCodeWriter;->renderResult()Lcom/google/zxing/common/BitMatrix;",
        "Lcom/google/zxing/qrcode/QRCodeWriter;->encode()Lcom/google/zxing/common/BitMatrix;"
    ],
    "Lcom/google/zxing/qrcode/encoder/Encoder;": [
        "Lcom/google/zxing/qrcode/encoder/Encoder;->append8BitBytes()V",
        "Lcom/google/zxing/qrcode/encoder/Encoder;->appendBytes()V",
        "Lcom/google/zxing/qrcode/encoder/Encoder;->appendModeInfo()V",
        "Lcom/google/zxing/qrcode/encoder/Encoder;->generateECBytes()[B",
        "Lcom/google/zxing/qrcode/encoder/Encoder;->appendNumericBytes()V",
        "Lcom/google/zxing/qrcode/encoder/Encoder;->appendLengthInfo()V",
        "Lcom/google/zxing/qrcode/encoder/Encoder;->isOnlyDoubleByteKanji()Z",
        "Lcom/google/zxing/qrcode/encoder/Encoder;->encode()V",
        "Lcom/google/zxing/qrcode/encoder/Encoder;->interleaveWithECBytes()V",
        "Lcom/google/zxing/qrcode/encoder/Encoder;->getNumDataBytesAndNumECBytesForBlockID()V",
        "Lcom/google/zxing/qrcode/encoder/Encoder;->chooseMaskPattern()I",
        "Lcom/google/zxing/qrcode/encoder/Encoder;->getAlphanumericCode()I",
        "Lcom/google/zxing/qrcode/encoder/Encoder;->chooseMode()Lcom/google/zxing/qrcode/decoder/Mode;",
        "Lcom/google/zxing/qrcode/encoder/Encoder;->terminateBits()V",
        "Lcom/google/zxing/qrcode/encoder/Encoder;->calculateMaskPenalty()I",
        "Lcom/google/zxing/qrcode/encoder/Encoder;->appendKanjiBytes()V",
        "Lcom/google/zxing/qrcode/encoder/Encoder;->appendAlphanumericBytes()V",
        "Lcom/google/zxing/qrcode/encoder/Encoder;->appendECI()V"
    ],
    "Lcom/google/zxing/qrcode/QRCodeReader;": [
        "Lcom/google/zxing/qrcode/QRCodeReader;->decode()Lcom/google/zxing/Result;",
        "Lcom/google/zxing/qrcode/QRCodeReader;->extractPureBits()Lcom/google/zxing/common/BitMatrix;"
    ],
    "Lcom/google/zxing/BinaryBitmap;": [
        "Lcom/google/zxing/BinaryBitmap;->crop()Lcom/google/zxing/BinaryBitmap;",
        "Lcom/google/zxing/BinaryBitmap;->getHeight()I",
        "Lcom/google/zxing/BinaryBitmap;->rotateCounterClockwise()Lcom/google/zxing/BinaryBitmap;",
        "Lcom/google/zxing/BinaryBitmap;->getBlackMatrix()Lcom/google/zxing/common/BitMatrix;",
        "Lcom/google/zxing/BinaryBitmap;->getBlackRow()Lcom/google/zxing/common/BitArray;",
        "Lcom/google/zxing/BinaryBitmap;->getWidth()I",
        "Lcom/google/zxing/BinaryBitmap;->isRotateSupported()Z"
    ],
    "Lcom/google/zxing/qrcode/decoder/Decoder;": [
        "Lcom/google/zxing/qrcode/decoder/Decoder;->decode()Lcom/google/zxing/common/DecoderResult;",
        "Lcom/google/zxing/qrcode/decoder/Decoder;->correctErrors()V"
    ],
    "Lcom/google/zxing/common/DecoderResult;": [
        "Lcom/google/zxing/common/DecoderResult;->getByteSegments()Ljava/util/Vector;",
        "Lcom/google/zxing/common/DecoderResult;->getECLevel()Lcom/google/zxing/qrcode/decoder/ErrorCorrectionLevel;",
        "Lcom/google/zxing/common/DecoderResult;->getText()Ljava/lang/String;",
        "Lcom/google/zxing/common/DecoderResult;->getRawBytes()[B"
    ],
    "Lcom/google/zxing/Result;": [
        "Lcom/google/zxing/Result;->getRawBytes()[B",
        "Lcom/google/zxing/Result;->getTimestamp()J",
        "Lcom/google/zxing/Result;->getBarcodeFormat()Lcom/google/zxing/BarcodeFormat;",
        "Lcom/google/zxing/Result;->putAllMetadata()V",
        "Lcom/google/zxing/Result;->getText()Ljava/lang/String;",
        "Lcom/google/zxing/Result;->getResultMetadata()Ljava/util/Hashtable;",
        "Lcom/google/zxing/Result;->addResultPoints()V",
        "Lcom/google/zxing/Result;->toString()Ljava/lang/String;",
        "Lcom/google/zxing/Result;->putMetadata()V",
        "Lcom/google/zxing/Result;->getResultPoints()[Lcom/google/zxing/ResultPoint;"
    ],
    "Lcom/google/zxing/qrcode/decoder/ErrorCorrectionLevel;": [
        "Lcom/google/zxing/qrcode/decoder/ErrorCorrectionLevel;->getBits()I",
        "Lcom/google/zxing/qrcode/decoder/ErrorCorrectionLevel;->toString()Ljava/lang/String;",
        "Lcom/google/zxing/qrcode/decoder/ErrorCorrectionLevel;->forBits()Lcom/google/zxing/qrcode/decoder/ErrorCorrectionLevel;",
        "Lcom/google/zxing/qrcode/decoder/ErrorCorrectionLevel;->ordinal()I"
    ],
    "Lcom/google/zxing/qrcode/detector/Detector;": [
        "Lcom/google/zxing/qrcode/detector/Detector;->sizeOfBlackWhiteBlackRunBothWays()F",
        "Lcom/google/zxing/qrcode/detector/Detector;->createTransform()Lcom/google/zxing/common/PerspectiveTransform;",
        "Lcom/google/zxing/qrcode/detector/Detector;->sampleGrid()Lcom/google/zxing/common/BitMatrix;",
        "Lcom/google/zxing/qrcode/detector/Detector;->round()I",
        "Lcom/google/zxing/qrcode/detector/Detector;->detect()Lcom/google/zxing/common/DetectorResult;",
        "Lcom/google/zxing/qrcode/detector/Detector;->computeDimension()I",
        "Lcom/google/zxing/qrcode/detector/Detector;->calculateModuleSize()F",
        "Lcom/google/zxing/qrcode/detector/Detector;->processFinderPatternInfo()Lcom/google/zxing/common/DetectorResult;",
        "Lcom/google/zxing/qrcode/detector/Detector;->calculateModuleSizeOneWay()F",
        "Lcom/google/zxing/qrcode/detector/Detector;->sizeOfBlackWhiteBlackRun()F",
        "Lcom/google/zxing/qrcode/detector/Detector;->findAlignmentInRegion()Lcom/google/zxing/qrcode/detector/AlignmentPattern;"
    ],
    "Lcom/google/zxing/common/DetectorResult;": [
        "Lcom/google/zxing/common/DetectorResult;->getBits()Lcom/google/zxing/common/BitMatrix;",
        "Lcom/google/zxing/common/DetectorResult;->getPoints()[Lcom/google/zxing/ResultPoint;"
    ],
    "Lcom/google/zxing/common/GridSampler;": [
        "Lcom/google/zxing/common/GridSampler;->getInstance()Lcom/google/zxing/common/GridSampler;",
        "Lcom/google/zxing/common/GridSampler;->sampleGrid()Lcom/google/zxing/common/BitMatrix;"
    ],
    "Lcom/google/zxing/qrcode/detector/FinderPatternFinder;": [
        "Lcom/google/zxing/qrcode/detector/FinderPatternFinder;->crossCheckVertical()F",
        "Lcom/google/zxing/qrcode/detector/FinderPatternFinder;->find()Lcom/google/zxing/qrcode/detector/FinderPatternInfo;",
        "Lcom/google/zxing/qrcode/detector/FinderPatternFinder;->crossCheckHorizontal()F",
        "Lcom/google/zxing/qrcode/detector/FinderPatternFinder;->centerFromEnd()F",
        "Lcom/google/zxing/qrcode/detector/FinderPatternFinder;->foundPatternCross()Z",
        "Lcom/google/zxing/qrcode/detector/FinderPatternFinder;->haveMultiplyConfirmedCenters()Z",
        "Lcom/google/zxing/qrcode/detector/FinderPatternFinder;->findRowSkip()I",
        "Lcom/google/zxing/qrcode/detector/FinderPatternFinder;->handlePossibleCenter()Z",
        "Lcom/google/zxing/qrcode/detector/FinderPatternFinder;->selectBestPatterns()[Lcom/google/zxing/qrcode/detector/FinderPattern;",
        "Lcom/google/zxing/qrcode/detector/FinderPatternFinder;->getCrossCheckStateCount()[I"
    ],
    "Lcom/google/zxing/qrcode/detector/AlignmentPatternFinder;": [
        "Lcom/google/zxing/qrcode/detector/AlignmentPatternFinder;->crossCheckVertical()F",
        "Lcom/google/zxing/qrcode/detector/AlignmentPatternFinder;->centerFromEnd()F",
        "Lcom/google/zxing/qrcode/detector/AlignmentPatternFinder;->foundPatternCross()Z",
        "Lcom/google/zxing/qrcode/detector/AlignmentPatternFinder;->find()Lcom/google/zxing/qrcode/detector/AlignmentPattern;",
        "Lcom/google/zxing/qrcode/detector/AlignmentPatternFinder;->handlePossibleCenter()Lcom/google/zxing/qrcode/detector/AlignmentPattern;"
    ],
    "Lcom/google/zxing/qrcode/detector/FinderPatternInfo;": [
        "Lcom/google/zxing/qrcode/detector/FinderPatternInfo;->getBottomLeft()Lcom/google/zxing/qrcode/detector/FinderPattern;",
        "Lcom/google/zxing/qrcode/detector/FinderPatternInfo;->getTopRight()Lcom/google/zxing/qrcode/detector/FinderPattern;",
        "Lcom/google/zxing/qrcode/detector/FinderPatternInfo;->getTopLeft()Lcom/google/zxing/qrcode/detector/FinderPattern;"
    ],
    "Lcom/google/zxing/qrcode/decoder/Version;": [
        "Lcom/google/zxing/qrcode/decoder/Version;->getProvisionalVersionForDimension()Lcom/google/zxing/qrcode/decoder/Version;",
        "Lcom/google/zxing/qrcode/decoder/Version;->buildVersions()[Lcom/google/zxing/qrcode/decoder/Version;",
        "Lcom/google/zxing/qrcode/decoder/Version;->buildFunctionPattern()Lcom/google/zxing/common/BitMatrix;",
        "Lcom/google/zxing/qrcode/decoder/Version;->getVersionNumber()I",
        "Lcom/google/zxing/qrcode/decoder/Version;->decodeVersionInformation()Lcom/google/zxing/qrcode/decoder/Version;",
        "Lcom/google/zxing/qrcode/decoder/Version;->getAlignmentPatternCenters()[I",
        "Lcom/google/zxing/qrcode/decoder/Version;->getDimensionForVersion()I",
        "Lcom/google/zxing/qrcode/decoder/Version;->getVersionForNumber()Lcom/google/zxing/qrcode/decoder/Version;",
        "Lcom/google/zxing/qrcode/decoder/Version;->getTotalCodewords()I",
        "Lcom/google/zxing/qrcode/decoder/Version;->getECBlocksForLevel()Lcom/google/zxing/qrcode/decoder/Version$ECBlocks;"
    ],
    "Lcom/google/zxing/qrcode/detector/FinderPattern;": [
        "Lcom/google/zxing/qrcode/detector/FinderPattern;->getX()F",
        "Lcom/google/zxing/qrcode/detector/FinderPattern;->getY()F",
        "Lcom/google/zxing/qrcode/detector/FinderPattern;->getEstimatedModuleSize()F",
        "Lcom/google/zxing/qrcode/detector/FinderPattern;->aboutEquals()Z",
        "Lcom/google/zxing/qrcode/detector/FinderPattern;->incrementCount()V",
        "Lcom/google/zxing/qrcode/detector/FinderPattern;->getCount()I"
    ],
    "Lcom/google/zxing/common/Collections;": [
        "Lcom/google/zxing/common/Collections;->insertionSort()V"
    ],
    "Lcom/google/zxing/ResultPointCallback;": [
        "Lcom/google/zxing/ResultPointCallback;->foundPossibleResultPoint()V"
    ],
    "Lcom/google/zxing/qrcode/detector/AlignmentPattern;": [
        "Lcom/google/zxing/qrcode/detector/AlignmentPattern;->getX()F",
        "Lcom/google/zxing/qrcode/detector/AlignmentPattern;->getY()F",
        "Lcom/google/zxing/qrcode/detector/AlignmentPattern;->aboutEquals()Z"
    ],
    "Lcom/google/zxing/qrcode/decoder/Mode;": [
        "Lcom/google/zxing/qrcode/decoder/Mode;->getCharacterCountBits()I",
        "Lcom/google/zxing/qrcode/decoder/Mode;->forBits()Lcom/google/zxing/qrcode/decoder/Mode;",
        "Lcom/google/zxing/qrcode/decoder/Mode;->getBits()I"
    ],
    "Lcom/google/zxing/common/ECI;": [
        "Lcom/google/zxing/common/ECI;->getValue()I"
    ],
    "Lcom/google/zxing/qrcode/encoder/MaskUtil;": [
        "Lcom/google/zxing/qrcode/encoder/MaskUtil;->applyMaskPenaltyRule4()I",
        "Lcom/google/zxing/qrcode/encoder/MaskUtil;->getDataMaskBit()Z",
        "Lcom/google/zxing/qrcode/encoder/MaskUtil;->applyMaskPenaltyRule1()I",
        "Lcom/google/zxing/qrcode/encoder/MaskUtil;->applyMaskPenaltyRule3()I",
        "Lcom/google/zxing/qrcode/encoder/MaskUtil;->applyMaskPenaltyRule1Internal()I",
        "Lcom/google/zxing/qrcode/encoder/MaskUtil;->applyMaskPenaltyRule2()I"
    ],
    "Lcom/google/zxing/qrcode/encoder/MatrixUtil;": [
        "Lcom/google/zxing/qrcode/encoder/MatrixUtil;->embedPositionDetectionPatternsAndSeparators()V",
        "Lcom/google/zxing/qrcode/encoder/MatrixUtil;->calculateBCHCode()I",
        "Lcom/google/zxing/qrcode/encoder/MatrixUtil;->makeVersionInfoBits()V",
        "Lcom/google/zxing/qrcode/encoder/MatrixUtil;->maybeEmbedVersionInfo()V",
        "Lcom/google/zxing/qrcode/encoder/MatrixUtil;->embedHorizontalSeparationPattern()V",
        "Lcom/google/zxing/qrcode/encoder/MatrixUtil;->buildMatrix()V",
        "Lcom/google/zxing/qrcode/encoder/MatrixUtil;->clearMatrix()V",
        "Lcom/google/zxing/qrcode/encoder/MatrixUtil;->embedDataBits()V",
        "Lcom/google/zxing/qrcode/encoder/MatrixUtil;->embedDarkDotAtLeftBottomCorner()V",
        "Lcom/google/zxing/qrcode/encoder/MatrixUtil;->embedTimingPatterns()V",
        "Lcom/google/zxing/qrcode/encoder/MatrixUtil;->isEmpty()Z",
        "Lcom/google/zxing/qrcode/encoder/MatrixUtil;->embedBasicPatterns()V",
        "Lcom/google/zxing/qrcode/encoder/MatrixUtil;->makeTypeInfoBits()V",
        "Lcom/google/zxing/qrcode/encoder/MatrixUtil;->embedPositionAdjustmentPattern()V",
        "Lcom/google/zxing/qrcode/encoder/MatrixUtil;->findMSBSet()I",
        "Lcom/google/zxing/qrcode/encoder/MatrixUtil;->isValidValue()Z",
        "Lcom/google/zxing/qrcode/encoder/MatrixUtil;->embedVerticalSeparationPattern()V",
        "Lcom/google/zxing/qrcode/encoder/MatrixUtil;->embedTypeInfo()V",
        "Lcom/google/zxing/qrcode/encoder/MatrixUtil;->embedPositionDetectionPattern()V",
        "Lcom/google/zxing/qrcode/encoder/MatrixUtil;->maybeEmbedPositionAdjustmentPatterns()V"
    ],
    "Lcom/google/zxing/qrcode/decoder/Version$ECBlocks;": [
        "Lcom/google/zxing/qrcode/decoder/Version$ECBlocks;->getECCodewordsPerBlock()I",
        "Lcom/google/zxing/qrcode/decoder/Version$ECBlocks;->getTotalECCodewords()I",
        "Lcom/google/zxing/qrcode/decoder/Version$ECBlocks;->getNumBlocks()I",
        "Lcom/google/zxing/qrcode/decoder/Version$ECBlocks;->getECBlocks()[Lcom/google/zxing/qrcode/decoder/Version$ECB;"
    ],
    "Lcom/google/zxing/qrcode/encoder/BlockPair;": [
        "Lcom/google/zxing/qrcode/encoder/BlockPair;->getDataBytes()[B",
        "Lcom/google/zxing/qrcode/encoder/BlockPair;->getErrorCorrectionBytes()[B"
    ],
    "Lcom/google/zxing/qrcode/decoder/Version$ECB;": [
        "Lcom/google/zxing/qrcode/decoder/Version$ECB;->getDataCodewords()I",
        "Lcom/google/zxing/qrcode/decoder/Version$ECB;->getCount()I"
    ],
    "Lcom/google/zxing/ChecksumException;": [
        "Lcom/google/zxing/ChecksumException;->getChecksumInstance()Lcom/google/zxing/ChecksumException;"
    ],
    "Lcom/google/zxing/qrcode/decoder/BitMatrixParser;": [
        "Lcom/google/zxing/qrcode/decoder/BitMatrixParser;->readVersion()Lcom/google/zxing/qrcode/decoder/Version;",
        "Lcom/google/zxing/qrcode/decoder/BitMatrixParser;->readFormatInformation()Lcom/google/zxing/qrcode/decoder/FormatInformation;",
        "Lcom/google/zxing/qrcode/decoder/BitMatrixParser;->readCodewords()[B",
        "Lcom/google/zxing/qrcode/decoder/BitMatrixParser;->copyBit()I"
    ],
    "Lcom/google/zxing/qrcode/decoder/FormatInformation;": [
        "Lcom/google/zxing/qrcode/decoder/FormatInformation;->numBitsDiffering()I",
        "Lcom/google/zxing/qrcode/decoder/FormatInformation;->getErrorCorrectionLevel()Lcom/google/zxing/qrcode/decoder/ErrorCorrectionLevel;",
        "Lcom/google/zxing/qrcode/decoder/FormatInformation;->getDataMask()B",
        "Lcom/google/zxing/qrcode/decoder/FormatInformation;->doDecodeFormatInformation()Lcom/google/zxing/qrcode/decoder/FormatInformation;",
        "Lcom/google/zxing/qrcode/decoder/FormatInformation;->decodeFormatInformation()Lcom/google/zxing/qrcode/decoder/FormatInformation;"
    ],
    "Lcom/google/zxing/qrcode/decoder/DataBlock;": [
        "Lcom/google/zxing/qrcode/decoder/DataBlock;->getCodewords()[B",
        "Lcom/google/zxing/qrcode/decoder/DataBlock;->getDataBlocks()[Lcom/google/zxing/qrcode/decoder/DataBlock;",
        "Lcom/google/zxing/qrcode/decoder/DataBlock;->getNumDataCodewords()I"
    ],
    "Lcom/google/zxing/qrcode/decoder/DecodedBitStreamParser;": [
        "Lcom/google/zxing/qrcode/decoder/DecodedBitStreamParser;->decodeByteSegment()V",
        "Lcom/google/zxing/qrcode/decoder/DecodedBitStreamParser;->toAlphaNumericChar()C",
        "Lcom/google/zxing/qrcode/decoder/DecodedBitStreamParser;->decodeAlphanumericSegment()V",
        "Lcom/google/zxing/qrcode/decoder/DecodedBitStreamParser;->decodeNumericSegment()V",
        "Lcom/google/zxing/qrcode/decoder/DecodedBitStreamParser;->parseECIValue()I",
        "Lcom/google/zxing/qrcode/decoder/DecodedBitStreamParser;->decodeKanjiSegment()V",
        "Lcom/google/zxing/qrcode/decoder/DecodedBitStreamParser;->decode()Lcom/google/zxing/common/DecoderResult;"
    ],
    "Lcom/google/zxing/FormatException;": [
        "Lcom/google/zxing/FormatException;->getFormatInstance()Lcom/google/zxing/FormatException;"
    ],
    "Lcom/google/zxing/qrcode/decoder/DataMask;": [
        "Lcom/google/zxing/qrcode/decoder/DataMask;->unmaskBitMatrix()V",
        "Lcom/google/zxing/qrcode/decoder/DataMask;->isMasked()Z",
        "Lcom/google/zxing/qrcode/decoder/DataMask;->forReference()Lcom/google/zxing/qrcode/decoder/DataMask;"
    ],
    "Lcom/google/zxing/common/BitSource;": [
        "Lcom/google/zxing/common/BitSource;->readBits()I",
        "Lcom/google/zxing/common/BitSource;->available()I"
    ],
    "Lcom/google/zxing/common/StringUtils;": [
        "Lcom/google/zxing/common/StringUtils;->guessEncoding()Ljava/lang/String;"
    ],
    "Lcom/google/zxing/datamatrix/DataMatrixReader;": [
        "Lcom/google/zxing/datamatrix/DataMatrixReader;->decode()Lcom/google/zxing/Result;",
        "Lcom/google/zxing/datamatrix/DataMatrixReader;->extractPureBits()Lcom/google/zxing/common/BitMatrix;"
    ],
    "Lcom/google/zxing/datamatrix/decoder/Decoder;": [
        "Lcom/google/zxing/datamatrix/decoder/Decoder;->decode()Lcom/google/zxing/common/DecoderResult;",
        "Lcom/google/zxing/datamatrix/decoder/Decoder;->correctErrors()V"
    ],
    "Lcom/google/zxing/datamatrix/detector/Detector;": [
        "Lcom/google/zxing/datamatrix/detector/Detector;->distance()I",
        "Lcom/google/zxing/datamatrix/detector/Detector;->round()I",
        "Lcom/google/zxing/datamatrix/detector/Detector;->transitionsBetween()Lcom/google/zxing/datamatrix/detector/Detector$ResultPointsAndTransitions;",
        "Lcom/google/zxing/datamatrix/detector/Detector;->increment()V",
        "Lcom/google/zxing/datamatrix/detector/Detector;->correctTopRight()Lcom/google/zxing/ResultPoint;",
        "Lcom/google/zxing/datamatrix/detector/Detector;->sampleGrid()Lcom/google/zxing/common/BitMatrix;",
        "Lcom/google/zxing/datamatrix/detector/Detector;->detect()Lcom/google/zxing/common/DetectorResult;",
        "Lcom/google/zxing/datamatrix/detector/Detector;->isValid()Z"
    ],
    "Lcom/google/zxing/datamatrix/detector/Detector$ResultPointsAndTransitions;": [
        "Lcom/google/zxing/datamatrix/detector/Detector$ResultPointsAndTransitions;->getTo()Lcom/google/zxing/ResultPoint;",
        "Lcom/google/zxing/datamatrix/detector/Detector$ResultPointsAndTransitions;->getTransitions()I",
        "Lcom/google/zxing/datamatrix/detector/Detector$ResultPointsAndTransitions;->getFrom()Lcom/google/zxing/ResultPoint;"
    ],
    "Lcom/google/zxing/datamatrix/decoder/DecodedBitStreamParser;": [
        "Lcom/google/zxing/datamatrix/decoder/DecodedBitStreamParser;->decodeAnsiX12Segment()V",
        "Lcom/google/zxing/datamatrix/decoder/DecodedBitStreamParser;->decodeTextSegment()V",
        "Lcom/google/zxing/datamatrix/decoder/DecodedBitStreamParser;->parseTwoBytes()V",
        "Lcom/google/zxing/datamatrix/decoder/DecodedBitStreamParser;->unrandomize255State()B",
        "Lcom/google/zxing/datamatrix/decoder/DecodedBitStreamParser;->decodeEdifactSegment()V",
        "Lcom/google/zxing/datamatrix/decoder/DecodedBitStreamParser;->decodeC40Segment()V",
        "Lcom/google/zxing/datamatrix/decoder/DecodedBitStreamParser;->decodeAsciiSegment()I",
        "Lcom/google/zxing/datamatrix/decoder/DecodedBitStreamParser;->decode()Lcom/google/zxing/common/DecoderResult;",
        "Lcom/google/zxing/datamatrix/decoder/DecodedBitStreamParser;->decodeBase256Segment()V"
    ],
    "Lcom/google/zxing/datamatrix/decoder/BitMatrixParser;": [
        "Lcom/google/zxing/datamatrix/decoder/BitMatrixParser;->readUtah()I",
        "Lcom/google/zxing/datamatrix/decoder/BitMatrixParser;->extractDataRegion()Lcom/google/zxing/common/BitMatrix;",
        "Lcom/google/zxing/datamatrix/decoder/BitMatrixParser;->readCorner4()I",
        "Lcom/google/zxing/datamatrix/decoder/BitMatrixParser;->readCorner2()I",
        "Lcom/google/zxing/datamatrix/decoder/BitMatrixParser;->readCorner3()I",
        "Lcom/google/zxing/datamatrix/decoder/BitMatrixParser;->readVersion()Lcom/google/zxing/datamatrix/decoder/Version;",
        "Lcom/google/zxing/datamatrix/decoder/BitMatrixParser;->readCodewords()[B",
        "Lcom/google/zxing/datamatrix/decoder/BitMatrixParser;->readModule()Z",
        "Lcom/google/zxing/datamatrix/decoder/BitMatrixParser;->readCorner1()I"
    ],
    "Lcom/google/zxing/datamatrix/decoder/DataBlock;": [
        "Lcom/google/zxing/datamatrix/decoder/DataBlock;->getDataBlocks()[Lcom/google/zxing/datamatrix/decoder/DataBlock;",
        "Lcom/google/zxing/datamatrix/decoder/DataBlock;->getNumDataCodewords()I",
        "Lcom/google/zxing/datamatrix/decoder/DataBlock;->getCodewords()[B"
    ],
    "Lcom/google/zxing/datamatrix/decoder/Version;": [
        "Lcom/google/zxing/datamatrix/decoder/Version;->getDataRegionSizeRows()I",
        "Lcom/google/zxing/datamatrix/decoder/Version;->getSymbolSizeColumns()I",
        "Lcom/google/zxing/datamatrix/decoder/Version;->getVersionForDimensions()Lcom/google/zxing/datamatrix/decoder/Version;",
        "Lcom/google/zxing/datamatrix/decoder/Version;->getVersionNumber()I",
        "Lcom/google/zxing/datamatrix/decoder/Version;->buildVersions()[Lcom/google/zxing/datamatrix/decoder/Version;",
        "Lcom/google/zxing/datamatrix/decoder/Version;->getECBlocks()Lcom/google/zxing/datamatrix/decoder/Version$ECBlocks;",
        "Lcom/google/zxing/datamatrix/decoder/Version;->getTotalCodewords()I",
        "Lcom/google/zxing/datamatrix/decoder/Version;->getSymbolSizeRows()I",
        "Lcom/google/zxing/datamatrix/decoder/Version;->getDataRegionSizeColumns()I"
    ],
    "Lcom/google/zxing/datamatrix/decoder/Version$ECBlocks;": [
        "Lcom/google/zxing/datamatrix/decoder/Version$ECBlocks;->getECBlocks()[Lcom/google/zxing/datamatrix/decoder/Version$ECB;",
        "Lcom/google/zxing/datamatrix/decoder/Version$ECBlocks;->getECCodewords()I"
    ],
    "Lcom/google/zxing/datamatrix/decoder/Version$ECB;": [
        "Lcom/google/zxing/datamatrix/decoder/Version$ECB;->getCount()I",
        "Lcom/google/zxing/datamatrix/decoder/Version$ECB;->getDataCodewords()I"
    ],
    "Lcom/google/zxing/oned/UPCEANWriter;": [
        "Lcom/google/zxing/oned/UPCEANWriter;->encode()Lcom/google/zxing/common/BitMatrix;",
        "Lcom/google/zxing/oned/UPCEANWriter;->renderResult()Lcom/google/zxing/common/BitMatrix;",
        "Lcom/google/zxing/oned/UPCEANWriter;->encode()[B"
    ],
    "Lcom/google/zxing/oned/EAN13Writer;": [
        "Lcom/google/zxing/oned/EAN13Writer;->appendPattern()I"
    ],
    "Lcom/google/zxing/oned/UPCEReader;": [
        "Lcom/google/zxing/oned/UPCEReader;->determineNumSysAndCheckDigit()V",
        "Lcom/google/zxing/oned/UPCEReader;->findGuardPattern()[I",
        "Lcom/google/zxing/oned/UPCEReader;->decodeDigit()I",
        "Lcom/google/zxing/oned/UPCEReader;->convertUPCEtoUPCA()Ljava/lang/String;"
    ],
    "Lcom/google/zxing/oned/UPCEANReader;": [
        "Lcom/google/zxing/oned/UPCEANReader;->checkChecksum()Z",
        "Lcom/google/zxing/oned/UPCEANReader;->decodeMiddle()I",
        "Lcom/google/zxing/oned/UPCEANReader;->decodeEnd()[I",
        "Lcom/google/zxing/oned/UPCEANReader;->recordPattern()V",
        "Lcom/google/zxing/oned/UPCEANReader;->findGuardPattern()[I",
        "Lcom/google/zxing/oned/UPCEANReader;->patternMatchVariance()I",
        "Lcom/google/zxing/oned/UPCEANReader;->checkStandardUPCEANChecksum()Z",
        "Lcom/google/zxing/oned/UPCEANReader;->decode()Lcom/google/zxing/Result;",
        "Lcom/google/zxing/oned/UPCEANReader;->decodeRow()Lcom/google/zxing/Result;",
        "Lcom/google/zxing/oned/UPCEANReader;->findStartGuardPattern()[I",
        "Lcom/google/zxing/oned/UPCEANReader;->decodeDigit()I",
        "Lcom/google/zxing/oned/UPCEANReader;->getBarcodeFormat()Lcom/google/zxing/BarcodeFormat;"
    ],
    "Lcom/google/zxing/oned/ITFWriter;": [
        "Lcom/google/zxing/oned/ITFWriter;->appendPattern()I"
    ],
    "Lcom/google/zxing/oned/UPCAReader;": [
        "Lcom/google/zxing/oned/UPCAReader;->maybeReturnResult()Lcom/google/zxing/Result;"
    ],
    "Lcom/google/zxing/oned/Code39Reader;": [
        "Lcom/google/zxing/oned/Code39Reader;->decodeExtended()Ljava/lang/String;",
        "Lcom/google/zxing/oned/Code39Reader;->patternToChar()C",
        "Lcom/google/zxing/oned/Code39Reader;->recordPattern()V",
        "Lcom/google/zxing/oned/Code39Reader;->findAsteriskPattern()[I",
        "Lcom/google/zxing/oned/Code39Reader;->toNarrowWidePattern()I"
    ],
    "Lcom/google/zxing/oned/EAN8Writer;": [
        "Lcom/google/zxing/oned/EAN8Writer;->appendPattern()I"
    ],
    "Lcom/google/zxing/oned/Code128Writer;": [
        "Lcom/google/zxing/oned/Code128Writer;->appendPattern()I"
    ],
    "Lcom/google/zxing/oned/UPCEANExtensionSupport;": [
        "Lcom/google/zxing/oned/UPCEANExtensionSupport;->determineCheckDigit()I",
        "Lcom/google/zxing/oned/UPCEANExtensionSupport;->extensionChecksum()I",
        "Lcom/google/zxing/oned/UPCEANExtensionSupport;->decodeMiddle()I",
        "Lcom/google/zxing/oned/UPCEANExtensionSupport;->decodeRow()Lcom/google/zxing/Result;",
        "Lcom/google/zxing/oned/UPCEANExtensionSupport;->parseExtensionString()Ljava/util/Hashtable;",
        "Lcom/google/zxing/oned/UPCEANExtensionSupport;->parseExtension5String()Ljava/lang/String;",
        "Lcom/google/zxing/oned/UPCEANExtensionSupport;->parseExtension2String()Ljava/lang/Integer;"
    ],
    "Lcom/google/zxing/oned/EANManufacturerOrgSupport;": [
        "Lcom/google/zxing/oned/EANManufacturerOrgSupport;->add()V",
        "Lcom/google/zxing/oned/EANManufacturerOrgSupport;->lookupCountryIdentifier()Ljava/lang/String;"
    ],
    "Lcom/google/zxing/oned/Code128Reader;": [
        "Lcom/google/zxing/oned/Code128Reader;->patternMatchVariance()I",
        "Lcom/google/zxing/oned/Code128Reader;->recordPattern()V",
        "Lcom/google/zxing/oned/Code128Reader;->decodeCode()I",
        "Lcom/google/zxing/oned/Code128Reader;->findStartPattern()[I"
    ],
    "Lcom/google/zxing/oned/EAN8Reader;": [
        "Lcom/google/zxing/oned/EAN8Reader;->findGuardPattern()[I",
        "Lcom/google/zxing/oned/EAN8Reader;->decodeDigit()I"
    ],
    "Lcom/google/zxing/oned/Code39Writer;": [
        "Lcom/google/zxing/oned/Code39Writer;->appendPattern()I",
        "Lcom/google/zxing/oned/Code39Writer;->toIntArray()V"
    ],
    "Lcom/google/zxing/oned/Code93Reader;": [
        "Lcom/google/zxing/oned/Code93Reader;->checkOneChecksum()V",
        "Lcom/google/zxing/oned/Code93Reader;->findAsteriskPattern()[I",
        "Lcom/google/zxing/oned/Code93Reader;->decodeExtended()Ljava/lang/String;",
        "Lcom/google/zxing/oned/Code93Reader;->recordPattern()V",
        "Lcom/google/zxing/oned/Code93Reader;->toPattern()I",
        "Lcom/google/zxing/oned/Code93Reader;->patternToChar()C",
        "Lcom/google/zxing/oned/Code93Reader;->checkChecksums()V"
    ],
    "Lcom/google/zxing/oned/CodaBarReader;": [
        "Lcom/google/zxing/oned/CodaBarReader;->findAsteriskPattern()[I",
        "Lcom/google/zxing/oned/CodaBarReader;->recordPattern()V",
        "Lcom/google/zxing/oned/CodaBarReader;->arrayContains()Z",
        "Lcom/google/zxing/oned/CodaBarReader;->toNarrowWidePattern()C"
    ],
    "Lcom/google/zxing/oned/OneDReader;": [
        "Lcom/google/zxing/oned/OneDReader;->doDecode()Lcom/google/zxing/Result;",
        "Lcom/google/zxing/oned/OneDReader;->decodeRow()Lcom/google/zxing/Result;",
        "Lcom/google/zxing/oned/OneDReader;->recordPattern()V",
        "Lcom/google/zxing/oned/OneDReader;->decode()Lcom/google/zxing/Result;"
    ],
    "Lcom/google/zxing/oned/ITFReader;": [
        "Lcom/google/zxing/oned/ITFReader;->decodeDigit()I",
        "Lcom/google/zxing/oned/ITFReader;->decodeMiddle()V",
        "Lcom/google/zxing/oned/ITFReader;->skipWhiteSpace()I",
        "Lcom/google/zxing/oned/ITFReader;->decodeEnd()[I",
        "Lcom/google/zxing/oned/ITFReader;->findGuardPattern()[I",
        "Lcom/google/zxing/oned/ITFReader;->recordPattern()V",
        "Lcom/google/zxing/oned/ITFReader;->patternMatchVariance()I",
        "Lcom/google/zxing/oned/ITFReader;->decodeStart()[I",
        "Lcom/google/zxing/oned/ITFReader;->validateQuietZone()V"
    ],
    "Lcom/google/zxing/oned/EAN13Reader;": [
        "Lcom/google/zxing/oned/EAN13Reader;->decodeDigit()I",
        "Lcom/google/zxing/oned/EAN13Reader;->determineFirstDigit()V",
        "Lcom/google/zxing/oned/EAN13Reader;->findGuardPattern()[I"
    ],
    "Lcom/google/zxing/oned/rss/Pair;": [
        "Lcom/google/zxing/oned/rss/Pair;->getFinderPattern()Lcom/google/zxing/oned/rss/FinderPattern;",
        "Lcom/google/zxing/oned/rss/Pair;->getCount()I",
        "Lcom/google/zxing/oned/rss/Pair;->incrementCount()V",
        "Lcom/google/zxing/oned/rss/Pair;->getChecksumPortion()I",
        "Lcom/google/zxing/oned/rss/Pair;->getValue()I"
    ],
    "Lcom/google/zxing/oned/rss/RSS14Reader;": [
        "Lcom/google/zxing/oned/rss/RSS14Reader;->parseFinderValue()I",
        "Lcom/google/zxing/oned/rss/RSS14Reader;->recordPattern()V",
        "Lcom/google/zxing/oned/rss/RSS14Reader;->increment()V",
        "Lcom/google/zxing/oned/rss/RSS14Reader;->checkChecksum()Z",
        "Lcom/google/zxing/oned/rss/RSS14Reader;->decrement()V",
        "Lcom/google/zxing/oned/rss/RSS14Reader;->decodeDataCharacter()Lcom/google/zxing/oned/rss/DataCharacter;",
        "Lcom/google/zxing/oned/rss/RSS14Reader;->addOrTally()V",
        "Lcom/google/zxing/oned/rss/RSS14Reader;->isFinderPattern()Z",
        "Lcom/google/zxing/oned/rss/RSS14Reader;->findFinderPattern()[I",
        "Lcom/google/zxing/oned/rss/RSS14Reader;->constructResult()Lcom/google/zxing/Result;",
        "Lcom/google/zxing/oned/rss/RSS14Reader;->decodePair()Lcom/google/zxing/oned/rss/Pair;",
        "Lcom/google/zxing/oned/rss/RSS14Reader;->parseFoundFinderPattern()Lcom/google/zxing/oned/rss/FinderPattern;",
        "Lcom/google/zxing/oned/rss/RSS14Reader;->adjustOddEvenCounts()V",
        "Lcom/google/zxing/oned/rss/RSS14Reader;->count()I",
        "Lcom/google/zxing/oned/rss/RSS14Reader;->recordPatternInReverse()V"
    ],
    "Lcom/google/zxing/oned/rss/FinderPattern;": [
        "Lcom/google/zxing/oned/rss/FinderPattern;->getStartEnd()[I",
        "Lcom/google/zxing/oned/rss/FinderPattern;->getResultPoints()[Lcom/google/zxing/ResultPoint;",
        "Lcom/google/zxing/oned/rss/FinderPattern;->getValue()I"
    ],
    "Lcom/google/zxing/oned/rss/RSSUtils;": [
        "Lcom/google/zxing/oned/rss/RSSUtils;->getRSSvalue()I",
        "Lcom/google/zxing/oned/rss/RSSUtils;->combins()I"
    ],
    "Lcom/google/zxing/oned/rss/DataCharacter;": [
        "Lcom/google/zxing/oned/rss/DataCharacter;->getChecksumPortion()I",
        "Lcom/google/zxing/oned/rss/DataCharacter;->getValue()I"
    ],
    "Lcom/google/zxing/oned/rss/AbstractRSSReader;": [
        "Lcom/google/zxing/oned/rss/AbstractRSSReader;->patternMatchVariance()I"
    ],
    "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;": [
        "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;->adjustOddEvenCounts()V",
        "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;->findNextPair()V",
        "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;->decrement()V",
        "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;->decodeRow2pairs()Ljava/util/Vector;",
        "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;->checkChecksum()Z",
        "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;->recordPatternInReverse()V",
        "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;->checkPairSequence()Z",
        "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;->reset()V",
        "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;->retrieveNextPair()Lcom/google/zxing/oned/rss/expanded/ExpandedPair;",
        "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;->decodeDataCharacter()Lcom/google/zxing/oned/rss/DataCharacter;",
        "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;->isFinderPattern()Z",
        "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;->isNotA1left()Z",
        "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;->getNextSecondBar()I",
        "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;->recordPattern()V",
        "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;->increment()V",
        "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;->constructResult()Lcom/google/zxing/Result;",
        "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;->parseFoundFinderPattern()Lcom/google/zxing/oned/rss/FinderPattern;",
        "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;->reverseCounters()V",
        "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;->parseFinderValue()I",
        "Lcom/google/zxing/oned/rss/expanded/RSSExpandedReader;->count()I"
    ],
    "Lcom/google/zxing/oned/rss/expanded/ExpandedPair;": [
        "Lcom/google/zxing/oned/rss/expanded/ExpandedPair;->getFinderPattern()Lcom/google/zxing/oned/rss/FinderPattern;",
        "Lcom/google/zxing/oned/rss/expanded/ExpandedPair;->getLeftChar()Lcom/google/zxing/oned/rss/DataCharacter;",
        "Lcom/google/zxing/oned/rss/expanded/ExpandedPair;->mayBeLast()Z",
        "Lcom/google/zxing/oned/rss/expanded/ExpandedPair;->mustBeLast()Z",
        "Lcom/google/zxing/oned/rss/expanded/ExpandedPair;->getRightChar()Lcom/google/zxing/oned/rss/DataCharacter;"
    ],
    "Lcom/google/zxing/oned/rss/expanded/BitArrayBuilder;": [
        "Lcom/google/zxing/oned/rss/expanded/BitArrayBuilder;->buildBitArray()Lcom/google/zxing/common/BitArray;"
    ],
    "Lcom/google/zxing/oned/rss/expanded/decoders/AbstractExpandedDecoder;": [
        "Lcom/google/zxing/oned/rss/expanded/decoders/AbstractExpandedDecoder;->parseInformation()Ljava/lang/String;",
        "Lcom/google/zxing/oned/rss/expanded/decoders/AbstractExpandedDecoder;->createDecoder()Lcom/google/zxing/oned/rss/expanded/decoders/AbstractExpandedDecoder;"
    ],
    "Lcom/google/zxing/oned/rss/expanded/decoders/AI01392xDecoder;": [
        "Lcom/google/zxing/oned/rss/expanded/decoders/AI01392xDecoder;->encodeCompressedGtin()V"
    ],
    "Lcom/google/zxing/oned/rss/expanded/decoders/GeneralAppIdDecoder;": [
        "Lcom/google/zxing/oned/rss/expanded/decoders/GeneralAppIdDecoder;->isAlphaOr646ToNumericLatch()Z",
        "Lcom/google/zxing/oned/rss/expanded/decoders/GeneralAppIdDecoder;->decodeNumeric()Lcom/google/zxing/oned/rss/expanded/decoders/DecodedNumeric;",
        "Lcom/google/zxing/oned/rss/expanded/decoders/GeneralAppIdDecoder;->parseBlocks()Lcom/google/zxing/oned/rss/expanded/decoders/DecodedInformation;",
        "Lcom/google/zxing/oned/rss/expanded/decoders/GeneralAppIdDecoder;->extractNumericValueFromBitArray()I",
        "Lcom/google/zxing/oned/rss/expanded/decoders/GeneralAppIdDecoder;->parseNumericBlock()Lcom/google/zxing/oned/rss/expanded/decoders/BlockParsedResult;",
        "Lcom/google/zxing/oned/rss/expanded/decoders/GeneralAppIdDecoder;->decodeAlphanumeric()Lcom/google/zxing/oned/rss/expanded/decoders/DecodedChar;",
        "Lcom/google/zxing/oned/rss/expanded/decoders/GeneralAppIdDecoder;->isStillIsoIec646()Z",
        "Lcom/google/zxing/oned/rss/expanded/decoders/GeneralAppIdDecoder;->isNumericToAlphaNumericLatch()Z",
        "Lcom/google/zxing/oned/rss/expanded/decoders/GeneralAppIdDecoder;->isStillNumeric()Z",
        "Lcom/google/zxing/oned/rss/expanded/decoders/GeneralAppIdDecoder;->parseAlphaBlock()Lcom/google/zxing/oned/rss/expanded/decoders/BlockParsedResult;",
        "Lcom/google/zxing/oned/rss/expanded/decoders/GeneralAppIdDecoder;->isStillAlpha()Z",
        "Lcom/google/zxing/oned/rss/expanded/decoders/GeneralAppIdDecoder;->decodeAllCodes()Ljava/lang/String;",
        "Lcom/google/zxing/oned/rss/expanded/decoders/GeneralAppIdDecoder;->decodeGeneralPurposeField()Lcom/google/zxing/oned/rss/expanded/decoders/DecodedInformation;",
        "Lcom/google/zxing/oned/rss/expanded/decoders/GeneralAppIdDecoder;->parseIsoIec646Block()Lcom/google/zxing/oned/rss/expanded/decoders/BlockParsedResult;",
        "Lcom/google/zxing/oned/rss/expanded/decoders/GeneralAppIdDecoder;->decodeIsoIec646()Lcom/google/zxing/oned/rss/expanded/decoders/DecodedChar;",
        "Lcom/google/zxing/oned/rss/expanded/decoders/GeneralAppIdDecoder;->isAlphaTo646ToAlphaLatch()Z"
    ],
    "Lcom/google/zxing/oned/rss/expanded/decoders/DecodedInformation;": [
        "Lcom/google/zxing/oned/rss/expanded/decoders/DecodedInformation;->getNewPosition()I",
        "Lcom/google/zxing/oned/rss/expanded/decoders/DecodedInformation;->isRemaining()Z",
        "Lcom/google/zxing/oned/rss/expanded/decoders/DecodedInformation;->getNewString()Ljava/lang/String;",
        "Lcom/google/zxing/oned/rss/expanded/decoders/DecodedInformation;->getRemainingValue()I"
    ],
    "Lcom/google/zxing/oned/rss/expanded/decoders/AI013x0xDecoder;": [
        "Lcom/google/zxing/oned/rss/expanded/decoders/AI013x0xDecoder;->encodeCompressedWeight()V",
        "Lcom/google/zxing/oned/rss/expanded/decoders/AI013x0xDecoder;->encodeCompressedGtin()V"
    ],
    "Lcom/google/zxing/oned/rss/expanded/decoders/AI01decoder;": [
        "Lcom/google/zxing/oned/rss/expanded/decoders/AI01decoder;->appendCheckDigit()V",
        "Lcom/google/zxing/oned/rss/expanded/decoders/AI01decoder;->encodeCompressedGtinWithoutAI()V"
    ],
    "Lcom/google/zxing/oned/rss/expanded/decoders/AI013x0x1xDecoder;": [
        "Lcom/google/zxing/oned/rss/expanded/decoders/AI013x0x1xDecoder;->encodeCompressedGtin()V",
        "Lcom/google/zxing/oned/rss/expanded/decoders/AI013x0x1xDecoder;->encodeCompressedWeight()V",
        "Lcom/google/zxing/oned/rss/expanded/decoders/AI013x0x1xDecoder;->encodeCompressedDate()V"
    ],
    "Lcom/google/zxing/oned/rss/expanded/decoders/FieldParser;": [
        "Lcom/google/zxing/oned/rss/expanded/decoders/FieldParser;->processVariableAI()Ljava/lang/String;",
        "Lcom/google/zxing/oned/rss/expanded/decoders/FieldParser;->parseFieldsInGeneralPurpose()Ljava/lang/String;",
        "Lcom/google/zxing/oned/rss/expanded/decoders/FieldParser;->processFixedAI()Ljava/lang/String;"
    ],
    "Lcom/google/zxing/oned/rss/expanded/decoders/DecodedChar;": [
        "Lcom/google/zxing/oned/rss/expanded/decoders/DecodedChar;->getValue()C",
        "Lcom/google/zxing/oned/rss/expanded/decoders/DecodedChar;->isFNC1()Z",
        "Lcom/google/zxing/oned/rss/expanded/decoders/DecodedChar;->getNewPosition()I"
    ],
    "Lcom/google/zxing/oned/rss/expanded/decoders/CurrentParsingState;": [
        "Lcom/google/zxing/oned/rss/expanded/decoders/CurrentParsingState;->isIsoIec646()Z",
        "Lcom/google/zxing/oned/rss/expanded/decoders/CurrentParsingState;->setAlpha()V",
        "Lcom/google/zxing/oned/rss/expanded/decoders/CurrentParsingState;->setNumeric()V",
        "Lcom/google/zxing/oned/rss/expanded/decoders/CurrentParsingState;->setIsoIec646()V",
        "Lcom/google/zxing/oned/rss/expanded/decoders/CurrentParsingState;->isAlpha()Z"
    ],
    "Lcom/google/zxing/oned/rss/expanded/decoders/BlockParsedResult;": [
        "Lcom/google/zxing/oned/rss/expanded/decoders/BlockParsedResult;->getDecodedInformation()Lcom/google/zxing/oned/rss/expanded/decoders/DecodedInformation;",
        "Lcom/google/zxing/oned/rss/expanded/decoders/BlockParsedResult;->isFinished()Z"
    ],
    "Lcom/google/zxing/oned/rss/expanded/decoders/DecodedNumeric;": [
        "Lcom/google/zxing/oned/rss/expanded/decoders/DecodedNumeric;->getSecondDigit()I",
        "Lcom/google/zxing/oned/rss/expanded/decoders/DecodedNumeric;->getFirstDigit()I",
        "Lcom/google/zxing/oned/rss/expanded/decoders/DecodedNumeric;->isFirstDigitFNC1()Z",
        "Lcom/google/zxing/oned/rss/expanded/decoders/DecodedNumeric;->isSecondDigitFNC1()Z",
        "Lcom/google/zxing/oned/rss/expanded/decoders/DecodedNumeric;->getNewPosition()I"
    ],
    "Lcom/google/zxing/oned/rss/expanded/decoders/AI01AndOtherAIs;": [
        "Lcom/google/zxing/oned/rss/expanded/decoders/AI01AndOtherAIs;->encodeCompressedGtinWithoutAI()V"
    ],
    "Lcom/google/zxing/oned/rss/expanded/decoders/AI01weightDecoder;": [
        "Lcom/google/zxing/oned/rss/expanded/decoders/AI01weightDecoder;->checkWeight()I",
        "Lcom/google/zxing/oned/rss/expanded/decoders/AI01weightDecoder;->addWeightCode()V"
    ],
    "Lcom/google/zxing/oned/rss/expanded/decoders/AI01393xDecoder;": [
        "Lcom/google/zxing/oned/rss/expanded/decoders/AI01393xDecoder;->encodeCompressedGtin()V"
    ],
    "Lcom/google/zxing/client/android/FinishListener;": [
        "Lcom/google/zxing/client/android/FinishListener;->run()V"
    ],
    "Lcom/google/zxing/client/android/AndroidHttpClient;": [
        "Lcom/google/zxing/client/android/AndroidHttpClient;->getConnectionManager()Lorg/apache/http/conn/ClientConnectionManager;"
    ],
    "Lcom/google/zxing/client/android/PlanarYUVLuminanceSource;": [
        "Lcom/google/zxing/client/android/PlanarYUVLuminanceSource;->getWidth()I",
        "Lcom/google/zxing/client/android/PlanarYUVLuminanceSource;->renderCroppedGreyscaleBitmap()Landroid/graphics/Bitmap;",
        "Lcom/google/zxing/client/android/PlanarYUVLuminanceSource;->getHeight()I"
    ],
    "Lcom/google/zxing/client/android/CaptureActivity;": [
        "Lcom/google/zxing/client/android/CaptureActivity;->drawViewfinder()V",
        "Lcom/google/zxing/client/android/CaptureActivity;->getSystemService()Ljava/lang/Object;",
        "Lcom/google/zxing/client/android/CaptureActivity;->finish()V",
        "Lcom/google/zxing/client/android/CaptureActivity;->handleDecode()V",
        "Lcom/google/zxing/client/android/CaptureActivity;->drawResultPoints()V",
        "Lcom/google/zxing/client/android/CaptureActivity;->resetStatusView()V",
        "Lcom/google/zxing/client/android/CaptureActivity;->getHandler()Landroid/os/Handler;",
        "Lcom/google/zxing/client/android/CaptureActivity;->startActivity()V",
        "Lcom/google/zxing/client/android/CaptureActivity;->getString()Ljava/lang/String;",
        "Lcom/google/zxing/client/android/CaptureActivity;->handleDecodeInternally()V",
        "Lcom/google/zxing/client/android/CaptureActivity;->setResult()V",
        "Lcom/google/zxing/client/android/CaptureActivity;->handleDecodeExternally()V",
        "Lcom/google/zxing/client/android/CaptureActivity;->getResources()Landroid/content/res/Resources;",
        "Lcom/google/zxing/client/android/CaptureActivity;->drawLine()V",
        "Lcom/google/zxing/client/android/CaptureActivity;->getWindow()Landroid/view/Window;",
        "Lcom/google/zxing/client/android/CaptureActivity;->findViewById()Landroid/view/View;",
        "Lcom/google/zxing/client/android/CaptureActivity;->setContentView()V",
        "Lcom/google/zxing/client/android/CaptureActivity;->$SWITCH_TABLE$com$google$zxing$client$android$CaptureActivity$Source()[I",
        "Lcom/google/zxing/client/android/CaptureActivity;->getApplication()Landroid/app/Application;",
        "Lcom/google/zxing/client/android/CaptureActivity;->displayFrameworkBugMessageAndExit()V",
        "Lcom/google/zxing/client/android/CaptureActivity;->getViewfinderView()Lcom/google/zxing/client/android/ViewfinderView;",
        "Lcom/google/zxing/client/android/CaptureActivity;->getIntent()Landroid/content/Intent;"
    ],
    "Lcom/google/zxing/client/android/DecodeThread;": [
        "Lcom/google/zxing/client/android/DecodeThread;->join()V",
        "Lcom/google/zxing/client/android/DecodeThread;->start()V",
        "Lcom/google/zxing/client/android/DecodeThread;->getHandler()Landroid/os/Handler;"
    ],
    "Lcom/google/zxing/client/android/camera/CameraManager;": [
        "Lcom/google/zxing/client/android/camera/CameraManager;->requestAutoFocus()V",
        "Lcom/google/zxing/client/android/camera/CameraManager;->getFramingRect()Landroid/graphics/Rect;",
        "Lcom/google/zxing/client/android/camera/CameraManager;->openDriver()V",
        "Lcom/google/zxing/client/android/camera/CameraManager;->buildLuminanceSource()Lcom/google/zxing/client/android/PlanarYUVLuminanceSource;",
        "Lcom/google/zxing/client/android/camera/CameraManager;->closeDriver()V",
        "Lcom/google/zxing/client/android/camera/CameraManager;->stopPreview()V",
        "Lcom/google/zxing/client/android/camera/CameraManager;->getFramingRectInPreview()Landroid/graphics/Rect;",
        "Lcom/google/zxing/client/android/camera/CameraManager;->startPreview()V",
        "Lcom/google/zxing/client/android/camera/CameraManager;->get()Lcom/google/zxing/client/android/camera/CameraManager;",
        "Lcom/google/zxing/client/android/camera/CameraManager;->requestPreviewFrame()V"
    ],
    "Lcom/google/zxing/client/android/CaptureActivityHandler;": [
        "Lcom/google/zxing/client/android/CaptureActivityHandler;->sendEmptyMessageDelayed()Z",
        "Lcom/google/zxing/client/android/CaptureActivityHandler;->sendEmptyMessage()Z",
        "Lcom/google/zxing/client/android/CaptureActivityHandler;->removeMessages()V",
        "Lcom/google/zxing/client/android/CaptureActivityHandler;->quitSynchronously()V",
        "Lcom/google/zxing/client/android/CaptureActivityHandler;->restartPreviewAndDecode()V",
        "Lcom/google/zxing/client/android/CaptureActivityHandler;->sendMessageDelayed()Z"
    ],
    "Lcom/google/zxing/client/android/DecodeFormatManager;": [
        "Lcom/google/zxing/client/android/DecodeFormatManager;->parseDecodeFormats()Ljava/util/Vector;"
    ],
    "Ljava/lang/Iterable;": [
        "Ljava/lang/Iterable;->iterator()Ljava/util/Iterator;"
    ],
    "Lcom/google/zxing/BarcodeFormat;": [
        "Lcom/google/zxing/BarcodeFormat;->toString()Ljava/lang/String;",
        "Lcom/google/zxing/BarcodeFormat;->valueOf()Lcom/google/zxing/BarcodeFormat;"
    ],
    "Ljava/util/concurrent/CountDownLatch;": [
        "Ljava/util/concurrent/CountDownLatch;->await()V",
        "Ljava/util/concurrent/CountDownLatch;->countDown()V"
    ],
    "Landroid/os/Looper;": [
        "Landroid/os/Looper;->myLooper()Landroid/os/Looper;",
        "Landroid/os/Looper;->loop()V",
        "Landroid/os/Looper;->quit()V",
        "Landroid/os/Looper;->prepare()V"
    ],
    "Lcom/google/zxing/client/android/DecodeHandler;": [
        "Lcom/google/zxing/client/android/DecodeHandler;->decode()V"
    ],
    "Lcom/google/zxing/client/android/ViewfinderView;": [
        "Lcom/google/zxing/client/android/ViewfinderView;->drawResultBitmap()V",
        "Lcom/google/zxing/client/android/ViewfinderView;->getResources()Landroid/content/res/Resources;",
        "Lcom/google/zxing/client/android/ViewfinderView;->invalidate()V",
        "Lcom/google/zxing/client/android/ViewfinderView;->postInvalidateDelayed()V",
        "Lcom/google/zxing/client/android/ViewfinderView;->setVisibility()V",
        "Lcom/google/zxing/client/android/ViewfinderView;->addPossibleResultPoint()V",
        "Lcom/google/zxing/client/android/ViewfinderView;->drawViewfinder()V"
    ],
    "Lcom/google/zxing/client/android/InactivityTimer;": [
        "Lcom/google/zxing/client/android/InactivityTimer;->cancel()V",
        "Lcom/google/zxing/client/android/InactivityTimer;->onActivity()V",
        "Lcom/google/zxing/client/android/InactivityTimer;->shutdown()V"
    ],
    "Lcom/google/zxing/client/android/CaptureActivity$Source;": [
        "Lcom/google/zxing/client/android/CaptureActivity$Source;->ordinal()I",
        "Lcom/google/zxing/client/android/CaptureActivity$Source;->values()[Lcom/google/zxing/client/android/CaptureActivity$Source;"
    ],
    "Lcom/google/zxing/client/android/result/ResultHandlerFactory;": [
        "Lcom/google/zxing/client/android/result/ResultHandlerFactory;->parseResult()Lcom/google/zxing/client/result/ParsedResult;",
        "Lcom/google/zxing/client/android/result/ResultHandlerFactory;->makeResultHandler()Lcom/google/zxing/client/android/result/ResultHandler;"
    ],
    "Lcom/google/zxing/client/android/result/ResultHandler;": [
        "Lcom/google/zxing/client/android/result/ResultHandler;->getDisplayTitle()I",
        "Lcom/google/zxing/client/android/result/ResultHandler;->getType()Lcom/google/zxing/client/result/ParsedResultType;",
        "Lcom/google/zxing/client/android/result/ResultHandler;->handleButtonPress()V",
        "Lcom/google/zxing/client/android/result/ResultHandler;->getDisplayContents()Ljava/lang/CharSequence;"
    ],
    "Landroid/text/ClipboardManager;": [
        "Landroid/text/ClipboardManager;->setText()V"
    ],
    "Lcom/google/zxing/client/result/ParsedResultType;": [
        "Lcom/google/zxing/client/result/ParsedResultType;->toString()Ljava/lang/String;"
    ],
    "Lcom/google/zxing/client/android/history/HistoryManager;": [
        "Lcom/google/zxing/client/android/history/HistoryManager;->buildAlert()Landroid/app/AlertDialog;",
        "Lcom/google/zxing/client/android/history/HistoryManager;->addHistoryItem()V",
        "Lcom/google/zxing/client/android/history/HistoryManager;->trimHistory()V",
        "Lcom/google/zxing/client/android/history/HistoryManager;->massageHistoryField()Ljava/lang/String;",
        "Lcom/google/zxing/client/android/history/HistoryManager;->getHistoryItems()Ljava/util/List;",
        "Lcom/google/zxing/client/android/history/HistoryManager;->clearHistory()V",
        "Lcom/google/zxing/client/android/history/HistoryManager;->buildHistory()Ljava/lang/CharSequence;",
        "Lcom/google/zxing/client/android/history/HistoryManager;->saveHistory()Landroid/net/Uri;"
    ],
    "Landroid/view/Menu;": [
        "Landroid/view/Menu;->add()Landroid/view/MenuItem;",
        "Landroid/view/Menu;->findItem()Landroid/view/MenuItem;"
    ],
    "Landroid/view/MenuItem;": [
        "Landroid/view/MenuItem;->setIcon()Landroid/view/MenuItem;",
        "Landroid/view/MenuItem;->setVisible()Landroid/view/MenuItem;",
        "Landroid/view/MenuItem;->getItemId()I"
    ],
    "Landroid/view/SurfaceView;": [
        "Landroid/view/SurfaceView;->getHolder()Landroid/view/SurfaceHolder;"
    ],
    "Landroid/view/SurfaceHolder;": [
        "Landroid/view/SurfaceHolder;->addCallback()V",
        "Landroid/view/SurfaceHolder;->setType()V"
    ],
    "Lcom/google/zxing/client/android/history/DBHelper;": [
        "Lcom/google/zxing/client/android/history/DBHelper;->onCreate()V"
    ],
    "Ljava/nio/charset/Charset;": [
        "Ljava/nio/charset/Charset;->forName()Ljava/nio/charset/Charset;"
    ],
    "Ljava/io/OutputStreamWriter;": [
        "Ljava/io/OutputStreamWriter;->close()V",
        "Ljava/io/OutputStreamWriter;->write()V"
    ],
    "Landroid/content/ContentValues;": [
        "Landroid/content/ContentValues;->put()V"
    ],
    "Lcom/google/zxing/client/result/ParsedResult;": [
        "Lcom/google/zxing/client/result/ParsedResult;->getDisplayResult()Ljava/lang/String;",
        "Lcom/google/zxing/client/result/ParsedResult;->getType()Lcom/google/zxing/client/result/ParsedResultType;"
    ],
    "Lcom/google/zxing/client/result/ResultParser;": [
        "Lcom/google/zxing/client/result/ResultParser;->parseResult()Lcom/google/zxing/client/result/ParsedResult;",
        "Lcom/google/zxing/client/result/ResultParser;->toStringArray()[Ljava/lang/String;",
        "Lcom/google/zxing/client/result/ResultParser;->matchPrefixedField()[Ljava/lang/String;",
        "Lcom/google/zxing/client/result/ResultParser;->findFirstEscape()I",
        "Lcom/google/zxing/client/result/ResultParser;->parseHexDigit()I",
        "Lcom/google/zxing/client/result/ResultParser;->urlDecode()Ljava/lang/String;",
        "Lcom/google/zxing/client/result/ResultParser;->appendKeyValue()V",
        "Lcom/google/zxing/client/result/ResultParser;->unescapeBackslash()Ljava/lang/String;"
    ],
    "Lcom/google/zxing/client/android/camera/CameraConfigurationManager;": [
        "Lcom/google/zxing/client/android/camera/CameraConfigurationManager;->setDesiredCameraParameters()V",
        "Lcom/google/zxing/client/android/camera/CameraConfigurationManager;->getPreviewFormat()I",
        "Lcom/google/zxing/client/android/camera/CameraConfigurationManager;->setFlash()V",
        "Lcom/google/zxing/client/android/camera/CameraConfigurationManager;->findBestMotZoomValue()I",
        "Lcom/google/zxing/client/android/camera/CameraConfigurationManager;->getCameraResolution()Landroid/graphics/Point;",
        "Lcom/google/zxing/client/android/camera/CameraConfigurationManager;->findBestPreviewSizeValue()Landroid/graphics/Point;",
        "Lcom/google/zxing/client/android/camera/CameraConfigurationManager;->setZoom()V",
        "Lcom/google/zxing/client/android/camera/CameraConfigurationManager;->getPreviewFormatString()Ljava/lang/String;",
        "Lcom/google/zxing/client/android/camera/CameraConfigurationManager;->getScreenResolution()Landroid/graphics/Point;"
    ],
    "Lcom/google/zxing/client/android/camera/FlashlightManager;": [
        "Lcom/google/zxing/client/android/camera/FlashlightManager;->maybeForName()Ljava/lang/Class;",
        "Lcom/google/zxing/client/android/camera/FlashlightManager;->disableFlashlight()V",
        "Lcom/google/zxing/client/android/camera/FlashlightManager;->getHardwareService()Ljava/lang/Object;",
        "Lcom/google/zxing/client/android/camera/FlashlightManager;->setFlashlight()V",
        "Lcom/google/zxing/client/android/camera/FlashlightManager;->invoke()Ljava/lang/Object;",
        "Lcom/google/zxing/client/android/camera/FlashlightManager;->getSetFlashEnabledMethod()Ljava/lang/reflect/Method;",
        "Lcom/google/zxing/client/android/camera/FlashlightManager;->enableFlashlight()V",
        "Lcom/google/zxing/client/android/camera/FlashlightManager;->maybeGetMethod()Ljava/lang/reflect/Method;"
    ],
    "Landroid/hardware/Camera;": [
        "Landroid/hardware/Camera;->autoFocus()V",
        "Landroid/hardware/Camera;->setOneShotPreviewCallback()V",
        "Landroid/hardware/Camera;->setPreviewCallback()V",
        "Landroid/hardware/Camera;->getParameters()Landroid/hardware/Camera$Parameters;",
        "Landroid/hardware/Camera;->startPreview()V",
        "Landroid/hardware/Camera;->setPreviewDisplay()V",
        "Landroid/hardware/Camera;->setParameters()V",
        "Landroid/hardware/Camera;->open()Landroid/hardware/Camera;",
        "Landroid/hardware/Camera;->release()V",
        "Landroid/hardware/Camera;->stopPreview()V"
    ],
    "Lcom/google/zxing/client/android/camera/AutoFocusCallback;": [
        "Lcom/google/zxing/client/android/camera/AutoFocusCallback;->setHandler()V"
    ],
    "Lcom/google/zxing/client/android/camera/PreviewCallback;": [
        "Lcom/google/zxing/client/android/camera/PreviewCallback;->setHandler()V"
    ],
    "Landroid/hardware/Camera$Parameters;": [
        "Landroid/hardware/Camera$Parameters;->setPreviewSize()V",
        "Landroid/hardware/Camera$Parameters;->set()V",
        "Landroid/hardware/Camera$Parameters;->get()Ljava/lang/String;",
        "Landroid/hardware/Camera$Parameters;->getPreviewFormat()I"
    ],
    "Lcom/google/zxing/client/result/AddressBookDoCoMoResultParser;": [
        "Lcom/google/zxing/client/result/AddressBookDoCoMoResultParser;->maybeWrap()[Ljava/lang/String;",
        "Lcom/google/zxing/client/result/AddressBookDoCoMoResultParser;->matchDoCoMoPrefixedField()[Ljava/lang/String;",
        "Lcom/google/zxing/client/result/AddressBookDoCoMoResultParser;->matchSingleDoCoMoPrefixedField()Ljava/lang/String;",
        "Lcom/google/zxing/client/result/AddressBookDoCoMoResultParser;->parseName()Ljava/lang/String;",
        "Lcom/google/zxing/client/result/AddressBookDoCoMoResultParser;->parse()Lcom/google/zxing/client/result/AddressBookParsedResult;",
        "Lcom/google/zxing/client/result/AddressBookDoCoMoResultParser;->isStringOfDigits()Z"
    ],
    "Lcom/google/zxing/client/result/BookmarkDoCoMoResultParser;": [
        "Lcom/google/zxing/client/result/BookmarkDoCoMoResultParser;->matchSingleDoCoMoPrefixedField()Ljava/lang/String;",
        "Lcom/google/zxing/client/result/BookmarkDoCoMoResultParser;->matchDoCoMoPrefixedField()[Ljava/lang/String;",
        "Lcom/google/zxing/client/result/BookmarkDoCoMoResultParser;->parse()Lcom/google/zxing/client/result/URIParsedResult;"
    ],
    "Lcom/google/zxing/client/result/URIResultParser;": [
        "Lcom/google/zxing/client/result/URIResultParser;->isBasicallyValidURI()Z",
        "Lcom/google/zxing/client/result/URIResultParser;->parse()Lcom/google/zxing/client/result/URIParsedResult;"
    ],
    "Lcom/google/zxing/client/result/TelParsedResult;": [
        "Lcom/google/zxing/client/result/TelParsedResult;->maybeAppend()V"
    ],
    "Lcom/google/zxing/client/result/EmailDoCoMoResultParser;": [
        "Lcom/google/zxing/client/result/EmailDoCoMoResultParser;->isBasicallyValidEmailAddress()Z",
        "Lcom/google/zxing/client/result/EmailDoCoMoResultParser;->parse()Lcom/google/zxing/client/result/EmailAddressParsedResult;",
        "Lcom/google/zxing/client/result/EmailDoCoMoResultParser;->isAtextSymbol()Z",
        "Lcom/google/zxing/client/result/EmailDoCoMoResultParser;->matchDoCoMoPrefixedField()[Ljava/lang/String;",
        "Lcom/google/zxing/client/result/EmailDoCoMoResultParser;->matchSingleDoCoMoPrefixedField()Ljava/lang/String;"
    ],
    "Lcom/google/zxing/client/result/AddressBookAUResultParser;": [
        "Lcom/google/zxing/client/result/AddressBookAUResultParser;->toStringArray()[Ljava/lang/String;",
        "Lcom/google/zxing/client/result/AddressBookAUResultParser;->parse()Lcom/google/zxing/client/result/AddressBookParsedResult;",
        "Lcom/google/zxing/client/result/AddressBookAUResultParser;->maybeWrap()[Ljava/lang/String;",
        "Lcom/google/zxing/client/result/AddressBookAUResultParser;->matchSinglePrefixedField()Ljava/lang/String;",
        "Lcom/google/zxing/client/result/AddressBookAUResultParser;->matchMultipleValuePrefix()[Ljava/lang/String;"
    ],
    "Lcom/google/zxing/client/result/VCardResultParser;": [
        "Lcom/google/zxing/client/result/VCardResultParser;->matchSingleVCardPrefixedField()Ljava/lang/String;",
        "Lcom/google/zxing/client/result/VCardResultParser;->stripContinuationCRLF()Ljava/lang/String;",
        "Lcom/google/zxing/client/result/VCardResultParser;->maybeAppendFragment()V",
        "Lcom/google/zxing/client/result/VCardResultParser;->isLikeVCardDate()Z",
        "Lcom/google/zxing/client/result/VCardResultParser;->toStringArray()[Ljava/lang/String;",
        "Lcom/google/zxing/client/result/VCardResultParser;->isStringOfDigits()Z",
        "Lcom/google/zxing/client/result/VCardResultParser;->formatNames()V",
        "Lcom/google/zxing/client/result/VCardResultParser;->matchVCardPrefixedField()[Ljava/lang/String;",
        "Lcom/google/zxing/client/result/VCardResultParser;->decodeQuotedPrintable()Ljava/lang/String;",
        "Lcom/google/zxing/client/result/VCardResultParser;->isSubstringOfDigits()Z",
        "Lcom/google/zxing/client/result/VCardResultParser;->formatAddress()Ljava/lang/String;",
        "Lcom/google/zxing/client/result/VCardResultParser;->toHexValue()I",
        "Lcom/google/zxing/client/result/VCardResultParser;->maybeAppendComponent()V",
        "Lcom/google/zxing/client/result/VCardResultParser;->parse()Lcom/google/zxing/client/result/AddressBookParsedResult;"
    ],
    "Lcom/google/zxing/client/result/BizcardResultParser;": [
        "Lcom/google/zxing/client/result/BizcardResultParser;->buildPhoneNumbers()[Ljava/lang/String;",
        "Lcom/google/zxing/client/result/BizcardResultParser;->parse()Lcom/google/zxing/client/result/AddressBookParsedResult;",
        "Lcom/google/zxing/client/result/BizcardResultParser;->buildName()Ljava/lang/String;",
        "Lcom/google/zxing/client/result/BizcardResultParser;->matchSingleDoCoMoPrefixedField()Ljava/lang/String;",
        "Lcom/google/zxing/client/result/BizcardResultParser;->matchDoCoMoPrefixedField()[Ljava/lang/String;",
        "Lcom/google/zxing/client/result/BizcardResultParser;->maybeWrap()[Ljava/lang/String;"
    ],
    "Lcom/google/zxing/client/result/VEventResultParser;": [
        "Lcom/google/zxing/client/result/VEventResultParser;->parse()Lcom/google/zxing/client/result/CalendarParsedResult;"
    ],
    "Lcom/google/zxing/client/result/EmailAddressResultParser;": [
        "Lcom/google/zxing/client/result/EmailAddressResultParser;->parse()Lcom/google/zxing/client/result/EmailAddressParsedResult;",
        "Lcom/google/zxing/client/result/EmailAddressResultParser;->parseNameValuePairs()Ljava/util/Hashtable;"
    ],
    "Lcom/google/zxing/client/result/TelResultParser;": [
        "Lcom/google/zxing/client/result/TelResultParser;->parse()Lcom/google/zxing/client/result/TelParsedResult;"
    ],
    "Lcom/google/zxing/client/result/SMSMMSResultParser;": [
        "Lcom/google/zxing/client/result/SMSMMSResultParser;->addNumberVia()V",
        "Lcom/google/zxing/client/result/SMSMMSResultParser;->toStringArray()[Ljava/lang/String;",
        "Lcom/google/zxing/client/result/SMSMMSResultParser;->parseNameValuePairs()Ljava/util/Hashtable;",
        "Lcom/google/zxing/client/result/SMSMMSResultParser;->parse()Lcom/google/zxing/client/result/SMSParsedResult;"
    ],
    "Lcom/google/zxing/client/result/SMSTOMMSTOResultParser;": [
        "Lcom/google/zxing/client/result/SMSTOMMSTOResultParser;->parse()Lcom/google/zxing/client/result/SMSParsedResult;"
    ],
    "Lcom/google/zxing/client/result/GeoResultParser;": [
        "Lcom/google/zxing/client/result/GeoResultParser;->parse()Lcom/google/zxing/client/result/GeoParsedResult;"
    ],
    "Lcom/google/zxing/client/result/WifiResultParser;": [
        "Lcom/google/zxing/client/result/WifiResultParser;->parse()Lcom/google/zxing/client/result/WifiParsedResult;",
        "Lcom/google/zxing/client/result/WifiResultParser;->matchSinglePrefixedField()Ljava/lang/String;"
    ],
    "Lcom/google/zxing/client/result/URLTOResultParser;": [
        "Lcom/google/zxing/client/result/URLTOResultParser;->parse()Lcom/google/zxing/client/result/URIParsedResult;"
    ],
    "Lcom/google/zxing/client/result/ISBNResultParser;": [
        "Lcom/google/zxing/client/result/ISBNResultParser;->parse()Lcom/google/zxing/client/result/ISBNParsedResult;"
    ],
    "Lcom/google/zxing/client/result/ProductResultParser;": [
        "Lcom/google/zxing/client/result/ProductResultParser;->parse()Lcom/google/zxing/client/result/ProductParsedResult;"
    ],
    "Lcom/google/zxing/client/result/ExpandedProductResultParser;": [
        "Lcom/google/zxing/client/result/ExpandedProductResultParser;->parse()Lcom/google/zxing/client/result/ExpandedProductParsedResult;",
        "Lcom/google/zxing/client/result/ExpandedProductResultParser;->findAIvalue()Ljava/lang/String;",
        "Lcom/google/zxing/client/result/ExpandedProductResultParser;->findValue()Ljava/lang/String;"
    ],
    "Lcom/google/zxing/client/result/EmailAddressParsedResult;": [
        "Lcom/google/zxing/client/result/EmailAddressParsedResult;->maybeAppend()V"
    ],
    "Lcom/google/zxing/client/result/AbstractDoCoMoResultParser;": [
        "Lcom/google/zxing/client/result/AbstractDoCoMoResultParser;->matchPrefixedField()[Ljava/lang/String;",
        "Lcom/google/zxing/client/result/AbstractDoCoMoResultParser;->matchSinglePrefixedField()Ljava/lang/String;"
    ],
    "Lcom/google/zxing/client/result/URIParsedResult;": [
        "Lcom/google/zxing/client/result/URIParsedResult;->massageURI()Ljava/lang/String;",
        "Lcom/google/zxing/client/result/URIParsedResult;->containsUser()Z",
        "Lcom/google/zxing/client/result/URIParsedResult;->maybeAppend()V",
        "Lcom/google/zxing/client/result/URIParsedResult;->isColonFollowedByPortNumber()Z"
    ],
    "Lcom/google/zxing/client/result/CalendarParsedResult;": [
        "Lcom/google/zxing/client/result/CalendarParsedResult;->validateDate()V",
        "Lcom/google/zxing/client/result/CalendarParsedResult;->maybeAppend()V"
    ],
    "Lcom/google/zxing/client/result/AddressBookParsedResult;": [
        "Lcom/google/zxing/client/result/AddressBookParsedResult;->maybeAppend()V"
    ],
    "Lcom/google/zxing/client/result/SMSParsedResult;": [
        "Lcom/google/zxing/client/result/SMSParsedResult;->maybeAppend()V"
    ],
    "Lcom/google/zxing/client/result/WifiParsedResult;": [
        "Lcom/google/zxing/client/result/WifiParsedResult;->maybeAppend()V"
    ],
    "Lcom/google/zxing/client/result/optional/NDEFRecord;": [
        "Lcom/google/zxing/client/result/optional/NDEFRecord;->readRecord()Lcom/google/zxing/client/result/optional/NDEFRecord;",
        "Lcom/google/zxing/client/result/optional/NDEFRecord;->isMessageBegin()Z",
        "Lcom/google/zxing/client/result/optional/NDEFRecord;->getPayload()[B",
        "Lcom/google/zxing/client/result/optional/NDEFRecord;->isMessageEnd()Z",
        "Lcom/google/zxing/client/result/optional/NDEFRecord;->getType()Ljava/lang/String;",
        "Lcom/google/zxing/client/result/optional/NDEFRecord;->getTotalRecordLength()I"
    ],
    "Lcom/google/zxing/client/result/optional/NDEFTextResultParser;": [
        "Lcom/google/zxing/client/result/optional/NDEFTextResultParser;->bytesToString()Ljava/lang/String;",
        "Lcom/google/zxing/client/result/optional/NDEFTextResultParser;->decodeTextPayload()[Ljava/lang/String;"
    ],
    "Lcom/google/zxing/client/result/optional/NDEFURIResultParser;": [
        "Lcom/google/zxing/client/result/optional/NDEFURIResultParser;->bytesToString()Ljava/lang/String;",
        "Lcom/google/zxing/client/result/optional/NDEFURIResultParser;->decodeURIPayload()Ljava/lang/String;"
    ],
    "Lcom/google/zxing/client/result/optional/AbstractNDEFResultParser;": [
        "Lcom/google/zxing/client/result/optional/AbstractNDEFResultParser;->bytesToString()Ljava/lang/String;"
    ],
    "Lcom/google/zxing/pdf417/PDF417Reader;": [
        "Lcom/google/zxing/pdf417/PDF417Reader;->decode()Lcom/google/zxing/Result;"
    ],
    "Lcom/google/zxing/pdf417/decoder/Decoder;": [
        "Lcom/google/zxing/pdf417/decoder/Decoder;->decode()Lcom/google/zxing/common/DecoderResult;",
        "Lcom/google/zxing/pdf417/decoder/Decoder;->correctErrors()I",
        "Lcom/google/zxing/pdf417/decoder/Decoder;->verifyCodewordCount()V"
    ],
    "Lcom/google/zxing/pdf417/detector/Detector;": [
        "Lcom/google/zxing/pdf417/detector/Detector;->findVertices180()[Lcom/google/zxing/ResultPoint;",
        "Lcom/google/zxing/pdf417/detector/Detector;->patternMatchVariance()I",
        "Lcom/google/zxing/pdf417/detector/Detector;->detect()Lcom/google/zxing/common/DetectorResult;",
        "Lcom/google/zxing/pdf417/detector/Detector;->correctCodeWordVertices()V",
        "Lcom/google/zxing/pdf417/detector/Detector;->computeModuleWidth()F",
        "Lcom/google/zxing/pdf417/detector/Detector;->computeDimension()I",
        "Lcom/google/zxing/pdf417/detector/Detector;->sampleGrid()Lcom/google/zxing/common/BitMatrix;",
        "Lcom/google/zxing/pdf417/detector/Detector;->round()I",
        "Lcom/google/zxing/pdf417/detector/Detector;->findGuardPattern()[I",
        "Lcom/google/zxing/pdf417/detector/Detector;->findVertices()[Lcom/google/zxing/ResultPoint;"
    ],
    "Lcom/google/zxing/pdf417/decoder/BitMatrixParser;": [
        "Lcom/google/zxing/pdf417/decoder/BitMatrixParser;->findCodewordIndex()I",
        "Lcom/google/zxing/pdf417/decoder/BitMatrixParser;->processRow()I",
        "Lcom/google/zxing/pdf417/decoder/BitMatrixParser;->getCodeword()I",
        "Lcom/google/zxing/pdf417/decoder/BitMatrixParser;->trimArray()[I",
        "Lcom/google/zxing/pdf417/decoder/BitMatrixParser;->getECLevel()I",
        "Lcom/google/zxing/pdf417/decoder/BitMatrixParser;->getErasures()[I",
        "Lcom/google/zxing/pdf417/decoder/BitMatrixParser;->readCodewords()[I"
    ],
    "Lcom/google/zxing/pdf417/decoder/DecodedBitStreamParser;": [
        "Lcom/google/zxing/pdf417/decoder/DecodedBitStreamParser;->numericCompaction()I",
        "Lcom/google/zxing/pdf417/decoder/DecodedBitStreamParser;->textCompaction()I",
        "Lcom/google/zxing/pdf417/decoder/DecodedBitStreamParser;->add()Ljava/lang/StringBuffer;",
        "Lcom/google/zxing/pdf417/decoder/DecodedBitStreamParser;->decode()Lcom/google/zxing/common/DecoderResult;",
        "Lcom/google/zxing/pdf417/decoder/DecodedBitStreamParser;->decodeBase900toBase10()Ljava/lang/String;",
        "Lcom/google/zxing/pdf417/decoder/DecodedBitStreamParser;->multiply()Ljava/lang/StringBuffer;",
        "Lcom/google/zxing/pdf417/decoder/DecodedBitStreamParser;->byteCompaction()I",
        "Lcom/google/zxing/pdf417/decoder/DecodedBitStreamParser;->decodeTextCompaction()V"
    ],
    "Lcom/google/zxing/multi/GenericMultipleBarcodeReader;": [
        "Lcom/google/zxing/multi/GenericMultipleBarcodeReader;->translateResultPoints()Lcom/google/zxing/Result;",
        "Lcom/google/zxing/multi/GenericMultipleBarcodeReader;->doDecodeMultiple()V",
        "Lcom/google/zxing/multi/GenericMultipleBarcodeReader;->decodeMultiple()[Lcom/google/zxing/Result;"
    ],
    "Lcom/google/zxing/multi/ByQuadrantReader;": [
        "Lcom/google/zxing/multi/ByQuadrantReader;->decode()Lcom/google/zxing/Result;"
    ],
    "Lcom/google/zxing/multi/qrcode/QRCodeMultiReader;": [
        "Lcom/google/zxing/multi/qrcode/QRCodeMultiReader;->decodeMultiple()[Lcom/google/zxing/Result;",
        "Lcom/google/zxing/multi/qrcode/QRCodeMultiReader;->getDecoder()Lcom/google/zxing/qrcode/decoder/Decoder;"
    ],
    "Lcom/google/zxing/multi/qrcode/detector/MultiDetector;": [
        "Lcom/google/zxing/multi/qrcode/detector/MultiDetector;->detectMulti()[Lcom/google/zxing/common/DetectorResult;",
        "Lcom/google/zxing/multi/qrcode/detector/MultiDetector;->getImage()Lcom/google/zxing/common/BitMatrix;",
        "Lcom/google/zxing/multi/qrcode/detector/MultiDetector;->processFinderPatternInfo()Lcom/google/zxing/common/DetectorResult;"
    ],
    "Lcom/google/zxing/multi/qrcode/detector/MultiFinderPatternFinder;": [
        "Lcom/google/zxing/multi/qrcode/detector/MultiFinderPatternFinder;->getImage()Lcom/google/zxing/common/BitMatrix;",
        "Lcom/google/zxing/multi/qrcode/detector/MultiFinderPatternFinder;->handlePossibleCenter()Z",
        "Lcom/google/zxing/multi/qrcode/detector/MultiFinderPatternFinder;->foundPatternCross()Z",
        "Lcom/google/zxing/multi/qrcode/detector/MultiFinderPatternFinder;->findMulti()[Lcom/google/zxing/qrcode/detector/FinderPatternInfo;",
        "Lcom/google/zxing/multi/qrcode/detector/MultiFinderPatternFinder;->selectBestPatterns()[[Lcom/google/zxing/qrcode/detector/FinderPattern;",
        "Lcom/google/zxing/multi/qrcode/detector/MultiFinderPatternFinder;->getPossibleCenters()Ljava/util/Vector;"
    ],
    "Lcom/novell/sasl/client/TokenParser;": [
        "Lcom/novell/sasl/client/TokenParser;->isWhiteSpace()Z",
        "Lcom/novell/sasl/client/TokenParser;->parseToken()Ljava/lang/String;",
        "Lcom/novell/sasl/client/TokenParser;->isValidTokenChar()Z"
    ],
    "Lcom/novell/sasl/client/DigestChallenge;": [
        "Lcom/novell/sasl/client/DigestChallenge;->handleNonce()V",
        "Lcom/novell/sasl/client/DigestChallenge;->getAlgorithm()Ljava/lang/String;",
        "Lcom/novell/sasl/client/DigestChallenge;->getRealms()Ljava/util/ArrayList;",
        "Lcom/novell/sasl/client/DigestChallenge;->checkSemantics()V",
        "Lcom/novell/sasl/client/DigestChallenge;->handleCipher()V",
        "Lcom/novell/sasl/client/DigestChallenge;->handleStale()V",
        "Lcom/novell/sasl/client/DigestChallenge;->handleCharset()V",
        "Lcom/novell/sasl/client/DigestChallenge;->getQop()I",
        "Lcom/novell/sasl/client/DigestChallenge;->handleAlgorithm()V",
        "Lcom/novell/sasl/client/DigestChallenge;->handleRealm()V",
        "Lcom/novell/sasl/client/DigestChallenge;->getNonce()Ljava/lang/String;",
        "Lcom/novell/sasl/client/DigestChallenge;->handleMaxbuf()V",
        "Lcom/novell/sasl/client/DigestChallenge;->handleQop()V"
    ],
    "Lorg/apache/harmony/javax/security/sasl/RealmChoiceCallback;": [
        "Lorg/apache/harmony/javax/security/sasl/RealmChoiceCallback;->getChoices()[Ljava/lang/String;",
        "Lorg/apache/harmony/javax/security/sasl/RealmChoiceCallback;->getSelectedIndexes()[I"
    ],
    "Lcom/novell/sasl/client/DigestMD5SaslClient;": [
        "Lcom/novell/sasl/client/DigestMD5SaslClient;->getClient()Lorg/apache/harmony/javax/security/sasl/SaslClient;",
        "Lcom/novell/sasl/client/DigestMD5SaslClient;->convertToHex()[C",
        "Lcom/novell/sasl/client/DigestMD5SaslClient;->DigestCalcResponse()[C",
        "Lcom/novell/sasl/client/DigestMD5SaslClient;->DigestCalcHA1()[C",
        "Lcom/novell/sasl/client/DigestMD5SaslClient;->createDigestResponse()Ljava/lang/String;",
        "Lcom/novell/sasl/client/DigestMD5SaslClient;->getClientNonce()Ljava/lang/String;",
        "Lcom/novell/sasl/client/DigestMD5SaslClient;->checkServerResponseAuth()Z",
        "Lcom/novell/sasl/client/DigestMD5SaslClient;->getHexChar()C"
    ],
    "Lcom/novell/sasl/client/ResponseAuth;": [
        "Lcom/novell/sasl/client/ResponseAuth;->checkSemantics()V",
        "Lcom/novell/sasl/client/ResponseAuth;->getResponseValue()Ljava/lang/String;"
    ],
    "Lcom/novell/sasl/client/DirectiveList;": [
        "Lcom/novell/sasl/client/DirectiveList;->parseDirectives()V",
        "Lcom/novell/sasl/client/DirectiveList;->isValidTokenChar()Z",
        "Lcom/novell/sasl/client/DirectiveList;->addDirective()V",
        "Lcom/novell/sasl/client/DirectiveList;->isWhiteSpace()Z",
        "Lcom/novell/sasl/client/DirectiveList;->getIterator()Ljava/util/Iterator;"
    ],
    "Lcom/novell/sasl/client/ParsedDirective;": [
        "Lcom/novell/sasl/client/ParsedDirective;->getName()Ljava/lang/String;",
        "Lcom/novell/sasl/client/ParsedDirective;->getValue()Ljava/lang/String;"
    ],
    "Lcom/baidu/mapapi/PoiOverlay;": [
        "Lcom/baidu/mapapi/PoiOverlay;->size()I",
        "Lcom/baidu/mapapi/PoiOverlay;->getItem()Lcom/baidu/mapapi/OverlayItem;",
        "Lcom/baidu/mapapi/PoiOverlay;->boundCenterBottom()Landroid/graphics/drawable/Drawable;",
        "Lcom/baidu/mapapi/PoiOverlay;->onTap()Z"
    ],
    "Lcom/baidu/mapapi/k;": [
        "Lcom/baidu/mapapi/k;->a()D",
        "Lcom/baidu/mapapi/k;->a()J",
        "Lcom/baidu/mapapi/k;->a()I",
        "Lcom/baidu/mapapi/k;->a()Z",
        "Lcom/baidu/mapapi/k;->a()Landroid/graphics/drawable/Drawable;"
    ],
    "Lcom/baidu/mapapi/OverlayItem;": [
        "Lcom/baidu/mapapi/OverlayItem;->getPoint()Lcom/baidu/mapapi/GeoPoint;",
        "Lcom/baidu/mapapi/OverlayItem;->a()[I",
        "Lcom/baidu/mapapi/OverlayItem;->getMarker()Landroid/graphics/drawable/Drawable;",
        "Lcom/baidu/mapapi/OverlayItem;->setMarker()V"
    ],
    "Lcom/baidu/mapapi/MapView;": [
        "Lcom/baidu/mapapi/MapView;->getController()Lcom/baidu/mapapi/MapController;",
        "Lcom/baidu/mapapi/MapView;->addView()V",
        "Lcom/baidu/mapapi/MapView;->getZoomLevel()I",
        "Lcom/baidu/mapapi/MapView;->requestChildFocus()V",
        "Lcom/baidu/mapapi/MapView;->getLeft()I",
        "Lcom/baidu/mapapi/MapView;->a()D",
        "Lcom/baidu/mapapi/MapView;->a()V",
        "Lcom/baidu/mapapi/MapView;->getBottom()I",
        "Lcom/baidu/mapapi/MapView;->getOverlays()Ljava/util/List;",
        "Lcom/baidu/mapapi/MapView;->setTraffic()V",
        "Lcom/baidu/mapapi/MapView;->getTop()I",
        "Lcom/baidu/mapapi/MapView;->getChildCount()I",
        "Lcom/baidu/mapapi/MapView;->isTraffic()Z",
        "Lcom/baidu/mapapi/MapView;->getMapCenter()Lcom/baidu/mapapi/GeoPoint;",
        "Lcom/baidu/mapapi/MapView;->getRight()I",
        "Lcom/baidu/mapapi/MapView;->invalidate()V",
        "Lcom/baidu/mapapi/MapView;->a()Z",
        "Lcom/baidu/mapapi/MapView;->getMaxZoomLevel()I",
        "Lcom/baidu/mapapi/MapView;->getContext()Landroid/content/Context;",
        "Lcom/baidu/mapapi/MapView;->removeView()V",
        "Lcom/baidu/mapapi/MapView;->getProjection()Lcom/baidu/mapapi/Projection;",
        "Lcom/baidu/mapapi/MapView;->getResources()Landroid/content/res/Resources;",
        "Lcom/baidu/mapapi/MapView;->checkLayoutParams()Z"
    ],
    "Lcom/baidu/mapapi/MapController;": [
        "Lcom/baidu/mapapi/MapController;->animateTo()V",
        "Lcom/baidu/mapapi/MapController;->zoomIn()Z",
        "Lcom/baidu/mapapi/MapController;->setCenter()V",
        "Lcom/baidu/mapapi/MapController;->zoomOut()Z",
        "Lcom/baidu/mapapi/MapController;->scrollBy()V"
    ],
    "Lcom/baidu/mapapi/ItemizedOverlay;": [
        "Lcom/baidu/mapapi/ItemizedOverlay;->populate()V",
        "Lcom/baidu/mapapi/ItemizedOverlay;->onTap()Z",
        "Lcom/baidu/mapapi/ItemizedOverlay;->setLastFocusedIndex()V",
        "Lcom/baidu/mapapi/ItemizedOverlay;->setFocus()V",
        "Lcom/baidu/mapapi/ItemizedOverlay;->a()V",
        "Lcom/baidu/mapapi/ItemizedOverlay;->a()Landroid/graphics/drawable/Drawable;",
        "Lcom/baidu/mapapi/ItemizedOverlay;->draw()Z",
        "Lcom/baidu/mapapi/ItemizedOverlay;->getItem()Lcom/baidu/mapapi/OverlayItem;",
        "Lcom/baidu/mapapi/ItemizedOverlay;->getFocus()Lcom/baidu/mapapi/OverlayItem;",
        "Lcom/baidu/mapapi/ItemizedOverlay;->getIndexToDraw()I",
        "Lcom/baidu/mapapi/ItemizedOverlay;->hitTest()Z"
    ],
    "Landroid/content/res/AssetManager;": [
        "Landroid/content/res/AssetManager;->open()Ljava/io/InputStream;"
    ],
    "Lcom/baidu/mapapi/CoordinateConvert;": [
        "Lcom/baidu/mapapi/CoordinateConvert;->bundleDecode()Lcom/baidu/mapapi/GeoPoint;",
        "Lcom/baidu/mapapi/CoordinateConvert;->a()Landroid/os/Bundle;",
        "Lcom/baidu/mapapi/CoordinateConvert;->fromWgs84ToBaidu()Landroid/os/Bundle;",
        "Lcom/baidu/mapapi/CoordinateConvert;->fromGcjToBaidu()Landroid/os/Bundle;"
    ],
    "Lcom/baidu/mapapi/MyLocationOverlay;": [
        "Lcom/baidu/mapapi/MyLocationOverlay;->disableMyLocation()V",
        "Lcom/baidu/mapapi/MyLocationOverlay;->drawCompass()V",
        "Lcom/baidu/mapapi/MyLocationOverlay;->getMyLocation()Lcom/baidu/mapapi/GeoPoint;",
        "Lcom/baidu/mapapi/MyLocationOverlay;->GetBaidu09Point()Lcom/baidu/mapapi/GeoPoint;",
        "Lcom/baidu/mapapi/MyLocationOverlay;->disableCompass()V",
        "Lcom/baidu/mapapi/MyLocationOverlay;->dispatchTap()Z",
        "Lcom/baidu/mapapi/MyLocationOverlay;->drawMyLocation()V"
    ],
    "Lcom/baidu/mapapi/Projection;": [
        "Lcom/baidu/mapapi/Projection;->toPixels()Landroid/graphics/Point;",
        "Lcom/baidu/mapapi/Projection;->metersToEquatorPixels()F",
        "Lcom/baidu/mapapi/Projection;->fromPixels()Lcom/baidu/mapapi/GeoPoint;"
    ],
    "Ljava/lang/Runnable;": [
        "Ljava/lang/Runnable;->run()V"
    ],
    "Landroid/hardware/Sensor;": [
        "Landroid/hardware/Sensor;->getType()I"
    ],
    "Lcom/baidu/mapapi/k$a;": [
        "Lcom/baidu/mapapi/k$a;->ordinal()I"
    ],
    "Lcom/baidu/mapapi/GeoPoint;": [
        "Lcom/baidu/mapapi/GeoPoint;->getLongitudeE6()I",
        "Lcom/baidu/mapapi/GeoPoint;->setLatitudeE6()V",
        "Lcom/baidu/mapapi/GeoPoint;->setLongitudeE6()V",
        "Lcom/baidu/mapapi/GeoPoint;->getLatitudeE6()I",
        "Lcom/baidu/mapapi/GeoPoint;->toString()Ljava/lang/String;"
    ],
    "Lcom/baidu/mapapi/MKMapViewListener;": [
        "Lcom/baidu/mapapi/MKMapViewListener;->onMapMoveFinish()V"
    ],
    "Lcom/baidu/mapapi/TransitOverlay;": [
        "Lcom/baidu/mapapi/TransitOverlay;->boundCenter()Landroid/graphics/drawable/Drawable;",
        "Lcom/baidu/mapapi/TransitOverlay;->getItem()Lcom/baidu/mapapi/OverlayItem;",
        "Lcom/baidu/mapapi/TransitOverlay;->boundCenterBottom()Landroid/graphics/drawable/Drawable;",
        "Lcom/baidu/mapapi/TransitOverlay;->onTap()Z",
        "Lcom/baidu/mapapi/TransitOverlay;->size()I"
    ],
    "Lcom/baidu/mapapi/MKTransitRoutePlan;": [
        "Lcom/baidu/mapapi/MKTransitRoutePlan;->getEnd()Lcom/baidu/mapapi/GeoPoint;",
        "Lcom/baidu/mapapi/MKTransitRoutePlan;->getLine()Lcom/baidu/mapapi/MKLine;",
        "Lcom/baidu/mapapi/MKTransitRoutePlan;->a()V",
        "Lcom/baidu/mapapi/MKTransitRoutePlan;->getRoute()Lcom/baidu/mapapi/MKRoute;",
        "Lcom/baidu/mapapi/MKTransitRoutePlan;->setLine()V",
        "Lcom/baidu/mapapi/MKTransitRoutePlan;->getNumRoute()I",
        "Lcom/baidu/mapapi/MKTransitRoutePlan;->getStart()Lcom/baidu/mapapi/GeoPoint;",
        "Lcom/baidu/mapapi/MKTransitRoutePlan;->getNumLines()I"
    ],
    "Lcom/baidu/mapapi/MKRoute;": [
        "Lcom/baidu/mapapi/MKRoute;->getArrayPoints()Ljava/util/ArrayList;",
        "Lcom/baidu/mapapi/MKRoute;->getRouteType()I",
        "Lcom/baidu/mapapi/MKRoute;->getNumSteps()I",
        "Lcom/baidu/mapapi/MKRoute;->getEnd()Lcom/baidu/mapapi/GeoPoint;",
        "Lcom/baidu/mapapi/MKRoute;->a()Ljava/lang/String;",
        "Lcom/baidu/mapapi/MKRoute;->getStart()Lcom/baidu/mapapi/GeoPoint;",
        "Lcom/baidu/mapapi/MKRoute;->getStep()Lcom/baidu/mapapi/MKStep;",
        "Lcom/baidu/mapapi/MKRoute;->a()V"
    ],
    "Lcom/baidu/mapapi/MKLine;": [
        "Lcom/baidu/mapapi/MKLine;->a()V",
        "Lcom/baidu/mapapi/MKLine;->getGetOnStop()Lcom/baidu/mapapi/MKPoiInfo;",
        "Lcom/baidu/mapapi/MKLine;->getGetOffStop()Lcom/baidu/mapapi/MKPoiInfo;",
        "Lcom/baidu/mapapi/MKLine;->getPoints()Ljava/util/ArrayList;",
        "Lcom/baidu/mapapi/MKLine;->getType()I",
        "Lcom/baidu/mapapi/MKLine;->a()Ljava/lang/String;"
    ],
    "Lcom/baidu/mapapi/RouteOverlay;": [
        "Lcom/baidu/mapapi/RouteOverlay;->getItem()Lcom/baidu/mapapi/OverlayItem;",
        "Lcom/baidu/mapapi/RouteOverlay;->size()I",
        "Lcom/baidu/mapapi/RouteOverlay;->onTap()Z",
        "Lcom/baidu/mapapi/RouteOverlay;->boundCenter()Landroid/graphics/drawable/Drawable;",
        "Lcom/baidu/mapapi/RouteOverlay;->boundCenterBottom()Landroid/graphics/drawable/Drawable;"
    ],
    "Lcom/baidu/mapapi/d;": [
        "Lcom/baidu/mapapi/d;->a()Landroid/graphics/Point;",
        "Lcom/baidu/mapapi/d;->fromPixels()Lcom/baidu/mapapi/GeoPoint;"
    ],
    "Lcom/baidu/mapapi/MKStep;": [
        "Lcom/baidu/mapapi/MKStep;->a()V",
        "Lcom/baidu/mapapi/MKStep;->getPoint()Lcom/baidu/mapapi/GeoPoint;",
        "Lcom/baidu/mapapi/MKStep;->getContent()Ljava/lang/String;",
        "Lcom/baidu/mapapi/MKStep;->a()I"
    ],
    "Lcom/baidu/mapapi/Mj;": [
        "Lcom/baidu/mapapi/Mj;->GetMapStatus()Landroid/os/Bundle;",
        "Lcom/baidu/mapapi/Mj;->InitMapApiEngine()I",
        "Lcom/baidu/mapapi/Mj;->sendBundle()I",
        "Lcom/baidu/mapapi/Mj;->a()V",
        "Lcom/baidu/mapapi/Mj;->SetNoitifyInternal()I",
        "Lcom/baidu/mapapi/Mj;->getNewBundle()Landroid/os/Bundle;",
        "Lcom/baidu/mapapi/Mj;->SetCellData()V",
        "Lcom/baidu/mapapi/Mj;->MapProc()I",
        "Lcom/baidu/mapapi/Mj;->InitMapControlCC()I",
        "Lcom/baidu/mapapi/Mj;->changeGprsConnect()V",
        "Lcom/baidu/mapapi/Mj;->SetProxyInfo()I",
        "Lcom/baidu/mapapi/Mj;->renderUpdateScreen()V",
        "Lcom/baidu/mapapi/Mj;->StartApiEngineCC()I",
        "Lcom/baidu/mapapi/Mj;->InitLocationCC()I",
        "Lcom/baidu/mapapi/Mj;->DisableProviderCC()I",
        "Lcom/baidu/mapapi/Mj;->UpdataGPS()V",
        "Lcom/baidu/mapapi/Mj;->SetUpdateWifi()V",
        "Lcom/baidu/mapapi/Mj;->a()Z",
        "Lcom/baidu/mapapi/Mj;->a()Ljava/lang/String;",
        "Lcom/baidu/mapapi/Mj;->UnInitMapApiEngine()I",
        "Lcom/baidu/mapapi/Mj;->GetNoitifyInternal()Landroid/os/Bundle;",
        "Lcom/baidu/mapapi/Mj;->EnableProviderCC()I",
        "Lcom/baidu/mapapi/Mj;->a()I",
        "Lcom/baidu/mapapi/Mj;->GetGPSStatus()Landroid/os/Bundle;",
        "Lcom/baidu/mapapi/Mj;->StopApiEngineCC()I",
        "Lcom/baidu/mapapi/Mj;->SetLocationCoordinateType()V"
    ],
    "Lcom/baidu/mapapi/MKOfflineMap;": [
        "Lcom/baidu/mapapi/MKOfflineMap;->a()Z"
    ],
    "Lcom/baidu/mapapi/j;": [
        "Lcom/baidu/mapapi/j;->a()I",
        "Lcom/baidu/mapapi/j;->a()V"
    ],
    "Lcom/baidu/mapapi/MKDrivingRouteResult;": [
        "Lcom/baidu/mapapi/MKDrivingRouteResult;->a()V"
    ],
    "Lcom/baidu/mapapi/MKRoutePlan;": [
        "Lcom/baidu/mapapi/MKRoutePlan;->a()V"
    ],
    "Lcom/baidu/mapapi/MKPoiResult;": [
        "Lcom/baidu/mapapi/MKPoiResult;->getMultiPoiResult()Ljava/util/ArrayList;",
        "Lcom/baidu/mapapi/MKPoiResult;->getAllPoi()Ljava/util/ArrayList;",
        "Lcom/baidu/mapapi/MKPoiResult;->a()V"
    ],
    "Lcom/baidu/mapapi/MKSearch;": [
        "Lcom/baidu/mapapi/MKSearch;->getPoiPageCapacity()I"
    ],
    "Lcom/baidu/mapapi/MKTransitRouteResult;": [
        "Lcom/baidu/mapapi/MKTransitRouteResult;->a()V"
    ],
    "Lcom/baidu/mapapi/MKWalkingRouteResult;": [
        "Lcom/baidu/mapapi/MKWalkingRouteResult;->a()V"
    ],
    "Lcom/baidu/mapapi/MKSearchListener;": [
        "Lcom/baidu/mapapi/MKSearchListener;->onGetTransitRouteResult()V",
        "Lcom/baidu/mapapi/MKSearchListener;->onGetPoiResult()V",
        "Lcom/baidu/mapapi/MKSearchListener;->onGetWalkingRouteResult()V",
        "Lcom/baidu/mapapi/MKSearchListener;->onGetAddrResult()V",
        "Lcom/baidu/mapapi/MKSearchListener;->onGetDrivingRouteResult()V"
    ],
    "Lcom/baidu/mapapi/MKGeneralListener;": [
        "Lcom/baidu/mapapi/MKGeneralListener;->onGetPermissionState()V",
        "Lcom/baidu/mapapi/MKGeneralListener;->onGetNetworkState()V"
    ],
    "Lcom/baidu/mapapi/MKOfflineMapListener;": [
        "Lcom/baidu/mapapi/MKOfflineMapListener;->onGetOfflineMapState()V"
    ],
    "Lcom/baidu/mapapi/a;": [
        "Lcom/baidu/mapapi/a;->a()V",
        "Lcom/baidu/mapapi/a;->a()Ljava/util/List;",
        "Lcom/baidu/mapapi/a;->layout()V",
        "Lcom/baidu/mapapi/a;->postInvalidate()V",
        "Lcom/baidu/mapapi/a;->a()Z",
        "Lcom/baidu/mapapi/a;->setLayoutParams()V",
        "Lcom/baidu/mapapi/a;->setFocusableInTouchMode()V",
        "Lcom/baidu/mapapi/a;->setVisibility()V",
        "Lcom/baidu/mapapi/a;->setOnKeyListener()V",
        "Lcom/baidu/mapapi/a;->setFocusable()V",
        "Lcom/baidu/mapapi/a;->invalidate()V"
    ],
    "Landroid/view/KeyEvent;": [
        "Landroid/view/KeyEvent;->getAction()I"
    ],
    "Lcom/baidu/mapapi/e;": [
        "Lcom/baidu/mapapi/e;->a()V",
        "Lcom/baidu/mapapi/e;->a()Z",
        "Lcom/baidu/mapapi/e;->a()Ljava/lang/String;"
    ],
    "Lcom/baidu/mapapi/n;": [
        "Lcom/baidu/mapapi/n;->a()V",
        "Lcom/baidu/mapapi/n;->a()Landroid/graphics/drawable/Drawable;"
    ],
    "Lcom/baidu/mapapi/Overlay;": [
        "Lcom/baidu/mapapi/Overlay;->a()V",
        "Lcom/baidu/mapapi/Overlay;->onTap()Z",
        "Lcom/baidu/mapapi/Overlay;->onKeyUp()Z",
        "Lcom/baidu/mapapi/Overlay;->onTrackballEvent()Z",
        "Lcom/baidu/mapapi/Overlay;->onTouchEvent()Z",
        "Lcom/baidu/mapapi/Overlay;->onKeyDown()Z",
        "Lcom/baidu/mapapi/Overlay;->drawAt()V",
        "Lcom/baidu/mapapi/Overlay;->draw()Z",
        "Lcom/baidu/mapapi/Overlay;->draw()V"
    ],
    "Lcom/baidu/mapapi/ItemizedOverlay$a;": [
        "Lcom/baidu/mapapi/ItemizedOverlay$a;->a()I",
        "Lcom/baidu/mapapi/ItemizedOverlay$a;->a()Z",
        "Lcom/baidu/mapapi/ItemizedOverlay$a;->a()Lcom/baidu/mapapi/OverlayItem;"
    ],
    "Lcom/baidu/mapapi/ItemizedOverlay$OnFocusChangeListener;": [
        "Lcom/baidu/mapapi/ItemizedOverlay$OnFocusChangeListener;->onFocusChanged()V"
    ],
    "Lcom/baidu/mapapi/MapActivity;": [
        "Lcom/baidu/mapapi/MapActivity;->a()Z",
        "Lcom/baidu/mapapi/MapActivity;->getWindowManager()Landroid/view/WindowManager;",
        "Lcom/baidu/mapapi/MapActivity;->getAssets()Landroid/content/res/AssetManager;"
    ],
    "Landroid/widget/ZoomControls;": [
        "Landroid/widget/ZoomControls;->setVisibility()V",
        "Landroid/widget/ZoomControls;->getMeasuredHeight()I",
        "Landroid/widget/ZoomControls;->setIsZoomOutEnabled()V",
        "Landroid/widget/ZoomControls;->setLayoutParams()V",
        "Landroid/widget/ZoomControls;->setOnZoomOutClickListener()V",
        "Landroid/widget/ZoomControls;->layout()V",
        "Landroid/widget/ZoomControls;->getMeasuredWidth()I",
        "Landroid/widget/ZoomControls;->measure()V",
        "Landroid/widget/ZoomControls;->setOnZoomInClickListener()V",
        "Landroid/widget/ZoomControls;->setFocusable()V",
        "Landroid/widget/ZoomControls;->setIsZoomInEnabled()V"
    ],
    "Landroid/view/ViewGroup;": [
        "Landroid/view/ViewGroup;->onKeyUp()Z",
        "Landroid/view/ViewGroup;->onFocusChanged()V",
        "Landroid/view/ViewGroup;->onTouchEvent()Z",
        "Landroid/view/ViewGroup;->onMeasure()V",
        "Landroid/view/ViewGroup;->generateDefaultLayoutParams()Landroid/view/ViewGroup$LayoutParams;",
        "Landroid/view/ViewGroup;->onDraw()V",
        "Landroid/view/ViewGroup;->onKeyDown()Z",
        "Landroid/view/ViewGroup;->onTrackballEvent()Z",
        "Landroid/view/ViewGroup;->onWindowFocusChanged()V",
        "Landroid/view/ViewGroup;->getChildAt()Landroid/view/View;",
        "Landroid/view/ViewGroup;->computeScroll()V",
        "Landroid/view/ViewGroup;->onSizeChanged()V"
    ],
    "Lcom/baidu/mapapi/c;": [
        "Lcom/baidu/mapapi/c;->a()[C"
    ],
    "Lcom/baidu/mapapi/l;": [
        "Lcom/baidu/mapapi/l;->a()Landroid/graphics/Bitmap;",
        "Lcom/baidu/mapapi/l;->a()V"
    ],
    "Ljava/nio/ShortBuffer;": [
        "Ljava/nio/ShortBuffer;->allocate()Ljava/nio/ShortBuffer;",
        "Ljava/nio/ShortBuffer;->put()Ljava/nio/ShortBuffer;",
        "Ljava/nio/ShortBuffer;->rewind()Ljava/nio/Buffer;"
    ],
    "Lcom/baidu/mapapi/MapView$a;": [
        "Lcom/baidu/mapapi/MapView$a;->ordinal()I"
    ],
    "Ljava/lang/UnsatisfiedLinkError;": [
        "Ljava/lang/UnsatisfiedLinkError;->getLocalizedMessage()Ljava/lang/String;"
    ],
    "Landroid/net/Proxy;": [
        "Landroid/net/Proxy;->getDefaultPort()I",
        "Landroid/net/Proxy;->getDefaultHost()Ljava/lang/String;"
    ],
    "Landroid/content/ContentResolver;": [
        "Landroid/content/ContentResolver;->query()Landroid/database/Cursor;"
    ],
    "Lcom/baidu/mapapi/h;": [
        "Lcom/baidu/mapapi/h;->a()V"
    ],
    "Lcom/baidu/mapapi/m;": [
        "Lcom/baidu/mapapi/m;->a()V"
    ],
    "Lcom/baidu/mapapi/LocationListener;": [
        "Lcom/baidu/mapapi/LocationListener;->onLocationChanged()V"
    ],
    "Landroid/os/HandlerThread;": [
        "Landroid/os/HandlerThread;->getLooper()Landroid/os/Looper;",
        "Landroid/os/HandlerThread;->start()V"
    ],
    "Lcom/baidu/mobstat/k;": [
        "Lcom/baidu/mobstat/k;->a()Lcom/baidu/mobstat/i;",
        "Lcom/baidu/mobstat/k;->a()V",
        "Lcom/baidu/mobstat/k;->a()J",
        "Lcom/baidu/mobstat/k;->a()Lcom/baidu/mobstat/k;",
        "Lcom/baidu/mobstat/k;->a()Z"
    ],
    "Lcom/baidu/mobstat/i;": [
        "Lcom/baidu/mobstat/i;->a()V",
        "Lcom/baidu/mobstat/i;->a()Z",
        "Lcom/baidu/mobstat/i;->a()I",
        "Lcom/baidu/mobstat/i;->a()J",
        "Lcom/baidu/mobstat/i;->a()Lorg/json/JSONObject;"
    ],
    "Lcom/baidu/mobstat/a/b;": [
        "Lcom/baidu/mobstat/a/b;->a()I",
        "Lcom/baidu/mobstat/a/b;->a()Ljava/lang/String;",
        "Lcom/baidu/mobstat/a/b;->a()Z",
        "Lcom/baidu/mobstat/a/b;->a()V"
    ],
    "Lcom/baidu/mobstat/a;": [
        "Lcom/baidu/mobstat/a;->a()Lcom/baidu/mobstat/a;",
        "Lcom/baidu/mobstat/a;->a()Ljava/lang/String;",
        "Lcom/baidu/mobstat/a;->a()Z",
        "Lcom/baidu/mobstat/a;->a()V"
    ],
    "Lcom/baidu/mobstat/e;": [
        "Lcom/baidu/mobstat/e;->a()Z",
        "Lcom/baidu/mobstat/e;->a()Lcom/baidu/mobstat/e;",
        "Lcom/baidu/mobstat/e;->start()V",
        "Lcom/baidu/mobstat/e;->a()V"
    ],
    "Lcom/baidu/mobstat/o;": [
        "Lcom/baidu/mobstat/o;->a()Ljava/lang/String;",
        "Lcom/baidu/mobstat/o;->a()Landroid/util/DisplayMetrics;",
        "Lcom/baidu/mobstat/o;->a()I"
    ],
    "Lcom/baidu/mobstat/a/a;": [
        "Lcom/baidu/mobstat/a/a;->a()[B",
        "Lcom/baidu/mobstat/a/a;->a()Ljava/lang/String;",
        "Lcom/baidu/mobstat/a/a;->a()Z",
        "Lcom/baidu/mobstat/a/a;->a()V",
        "Lcom/baidu/mobstat/a/a;->a()Ljava/net/HttpURLConnection;"
    ],
    "Ljava/io/BufferedWriter;": [
        "Ljava/io/BufferedWriter;->write()V",
        "Ljava/io/BufferedWriter;->close()V"
    ],
    "Lcom/baidu/mobstat/StatService;": [
        "Lcom/baidu/mobstat/StatService;->a()V",
        "Lcom/baidu/mobstat/StatService;->a()Z",
        "Lcom/baidu/mobstat/StatService;->onEvent()V",
        "Lcom/baidu/mobstat/StatService;->onResume()V",
        "Lcom/baidu/mobstat/StatService;->onPause()V",
        "Lcom/baidu/mobstat/StatService;->setSendLogStrategy()V"
    ],
    "Lcom/baidu/mobstat/d;": [
        "Lcom/baidu/mobstat/d;->a()Ljava/lang/String;",
        "Lcom/baidu/mobstat/d;->a()J",
        "Lcom/baidu/mobstat/d;->a()Lcom/baidu/mobstat/d;",
        "Lcom/baidu/mobstat/d;->a()Z",
        "Lcom/baidu/mobstat/d;->a()V"
    ],
    "Lcom/baidu/mobstat/f;": [
        "Lcom/baidu/mobstat/f;->a()Ljava/util/Timer;",
        "Lcom/baidu/mobstat/f;->a()Z",
        "Lcom/baidu/mobstat/f;->a()Landroid/content/SharedPreferences;",
        "Lcom/baidu/mobstat/f;->a()V",
        "Lcom/baidu/mobstat/f;->a()I",
        "Lcom/baidu/mobstat/f;->a()Lcom/baidu/mobstat/f;",
        "Lcom/baidu/mobstat/f;->a()Lcom/baidu/mobstat/SendStrategyEnum;"
    ],
    "Ljava/lang/StackTraceElement;": [
        "Ljava/lang/StackTraceElement;->getMethodName()Ljava/lang/String;",
        "Ljava/lang/StackTraceElement;->getClassName()Ljava/lang/String;"
    ],
    "Lcom/baidu/mobstat/b;": [
        "Lcom/baidu/mobstat/b;->a()V",
        "Lcom/baidu/mobstat/b;->a()Lcom/baidu/mobstat/b;"
    ],
    "Landroid/content/ComponentName;": [
        "Landroid/content/ComponentName;->getShortClassName()Ljava/lang/String;"
    ],
    "Lcom/baidu/mobstat/SendStrategyEnum;": [
        "Lcom/baidu/mobstat/SendStrategyEnum;->ordinal()I",
        "Lcom/baidu/mobstat/SendStrategyEnum;->values()[Lcom/baidu/mobstat/SendStrategyEnum;",
        "Lcom/baidu/mobstat/SendStrategyEnum;->name()Ljava/lang/String;",
        "Lcom/baidu/mobstat/SendStrategyEnum;->equals()Z"
    ],
    "Ljava/util/Timer;": [
        "Ljava/util/Timer;->cancel()V",
        "Ljava/util/Timer;->schedule()V"
    ],
    "[Lcom/baidu/mobstat/SendStrategyEnum;": [
        "[Lcom/baidu/mobstat/SendStrategyEnum;->clone()Ljava/lang/Object;"
    ],
    "Lcom/baidu/mobstat/j;": [
        "Lcom/baidu/mobstat/j;->a()Ljava/lang/String;",
        "Lcom/baidu/mobstat/j;->a()J"
    ],
    "Ljava/io/StringWriter;": [
        "Ljava/io/StringWriter;->toString()Ljava/lang/String;",
        "Ljava/io/StringWriter;->close()V"
    ],
    "Lde/measite/smack/SaslClientFactory;": [
        "Lde/measite/smack/SaslClientFactory;->getMechanismNames()[Ljava/lang/String;",
        "Lde/measite/smack/SaslClientFactory;->createSaslClient()Lorg/apache/harmony/javax/security/sasl/SaslClient;"
    ]
}