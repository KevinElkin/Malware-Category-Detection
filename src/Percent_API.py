import numpy as np
import pandas as pd
from scipy.sparse import lil_matrix, csr_matrix,save_npz,load_npz
from sklearn import svm
from scipy.sparse import hstack
from collections import defaultdict
import json 
from scipy import sparse
from scipy.sparse import rand
from scipy.sparse import csr_matrix
from scipy.sparse import coo_matrix, vstack
import scipy.stats as stats
from tqdm import tqdm


def percentAPI(AmatrixPath, labelPath):
    '''
    A method that returns a dataframe that calculates the percentage of occurences of a given 
    API for a category. For example, if 400 out of 800 benign apps have API xyz then we would 
    populate the cell of the df with .5 or 50%. 
    
    :param AmatrixPath: A path to the A Matrix
    :param labelPath: A path to the lables/categories (i.e. benign, trojan, adware...)
    :returns: A dataframe containing the percentage of APIs in a category containing a specific API
    
    '''
    Amatrix = load_npz(AmatrixPath).todense()
    labels = pd.read_csv(labelPath, names=['Label'])
    
    df = pd.concat([pd.DataFrame(Amatrix), labels], axis=1)
    vals = df['Label'].value_counts()
    catagory = df.groupby(['Label']).sum().transpose()
    
    count = 0
    for i in catagory:
        catagory[i] = catagory[i].div(vals[count])
        count += 1

    return(catagory.transpose())



def perDiff(percentIn, thresholdBenign): 
    '''
    A method that obtains the APIs that have a percent difference in malware 
    categories that is greater than a threshold value
    
    :param percentIn: A dataframe containing the percentage an API occurs in each category
    :param thresholdBenign: A threshold value that determins if an API is significant 
    :returns: A dictionary of APIs that are of significance (having a occurance that
    is greather than a threshold value compaired to benign)
    
    '''
    difPer = defaultdict(list)
    
    for i in range(percentIn.shape[1]):
        
        #Make sure its possibly "malware" API
        diff1 = percentIn[i][1] - percentIn[i][0]
        diff2 = percentIn[i][2] - percentIn[i][0]
        diff3 = percentIn[i][3] - percentIn[i][0]
        diff4 = percentIn[i][4] - percentIn[i][0]
        
        #Make sure its definitly a malware API
        if (diff1 > thresholdBenign or diff2 > thresholdBenign or diff3 > thresholdBenign or diff4 > thresholdBenign):
            difPer['Malware_APIs'].append(i)
            
    return difPer


def perDiffBenign(percentIn, thresholdBenign): 
    '''
    A method that obtains the APIs that have a percent difference in the benign 
    category that is greater than a threshold value (Used to find APIs for hypothesis testing)
    
    :param percentIn: A dataframe containing the percentage an API occurs in each category
    :param thresholdBenign: A threshold value that determins if an API is significant 
    :returns: A dictionary of APIs that are of significance (having a occurance that
    is greather than a threshold value compaired to malwares)
    
    '''
    
    difPer = defaultdict(list)
    
    print("Getting the percentage each API appears in every app catagory...")
    for i in tqdm(range(percentIn.shape[1])):
        
        #Make sure its definintly malware
        diff1 = percentIn[i][0] - percentIn[i][1]
        diff2 = percentIn[i][0] - percentIn[i][2]
        diff3 = percentIn[i][0] - percentIn[i][3]
        diff4 = percentIn[i][0] - percentIn[i][4]
        
        if (diff1 > thresholdBenign and diff2 > thresholdBenign and diff3 > thresholdBenign and diff4 > thresholdBenign):
            difPer['Benign_APIs'].append(i)
            
    return difPer


def getAPIs(path):
    '''
    A method that converts the indicies obtained and converts them to API strings
    
    :param path: the path of a json file containing indicies and API strings
    :returns: A dictionary of API strings based on the indecies 
    
    '''
    # Opening JSON file 
    with open(path) as json_file: 
        API_index = json.load(json_file) 

    API_index_swap = dict([(value, key) for key, value in API_index.items()]) 
    return API_index_swap



def filterSame(dic):
    '''
    A method that filters out repeate indecies/APIs
    
    :param dic: A dictionary containing all the APIs by category
    :returns: A dictionary without duplicates
    
    '''
    setDict = defaultdict(list)
    for val in dic:
        setDict[val].append(list(set(dic[val])))
    return setDict
    
    
    
def getAPIuseIdx(setDict, APIDict, outpath, percentIn):
    '''
    A method that orders the APIs based on the minimum difference obtained in getMin method.
    This method is used to order the heatMap viz in a more readable and interpritable way
    
    :param setDict: A dictionary without duplicate APIs
    :param APIDict: A dictionary containing APIs in string form
    :param outpath: Path to output JSON file
    :param percentIn: A dataframe containing the percentage an API occurs in each category
    :returns: A dictionary of APIs by category in sorted order based off results from getMin 
    
    '''
    realAPIs = defaultdict(list)
    
    for key in setDict:
        for idxs in setDict[key]:
            for i in idxs: 
                realAPIs[APIDict[i]].append([percentIn[i][0], percentIn[i][1], percentIn[i][2], percentIn[i][3], percentIn[i][4]])
                
    realAPIs = dict(sorted(realAPIs.items(), key=lambda x: x[1][0], reverse=True))
    
    with open(outpath, 'w') as fp:
        json.dump(realAPIs, fp)
    
    return realAPIs


def main(p):
    
    print("Getting training A-Matrix Percentages...")
    percentIn = percentAPI(p+'/Matrix_data/a_matrix_train.npz', p+'/Matrix_data/training_labels.csv')   
    
    print("Filtering APIs based on threshold value...")


    dicMal = perDiff(percentIn, .40)
    dicBen = perDiffBenign(percentIn, .65)


    MalAPIs = getAPIuseIdx(filterSame(dicMal), getAPIs(p+'/APIs/apis.json'), p+'/APIs/Malware_APIs.json', percentIn)   
    benAPIs = getAPIuseIdx(filterSame(dicBen), getAPIs(p+'/APIs/apis.json'), p+'/APIs/Benign_APIs.json', percentIn)
    
