from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import multilabel_confusion_matrix
import numpy as np

def run_model(p,kernels,malware):
    y = [0] * kernels['a_at'].shape[0]
    i = 1
    for family,apps in malware.items():
        for app_id in apps:
            y[app_id] = i
        i += 1
    clf = svm.LinearSVC(C=0.1, multi_class = 'ovr', dual = False)
    
    for k,x in kernels.items():
        X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=42)
        clf.fit(X_train, y_train)
        preds = clf.predict(X_test)
        target_names = ['Benign'] + list(malware.keys())
        report = classification_report(y_test,preds, target_names=target_names)
        report_2 = multilabel_confusion_matrix(y_test, preds)
        with open(p + '/report.txt','a+') as f:
            f.write(k)
            f.write(report)
            f.write('\n')
            for i,m in enumerate(report_2):
                f.write(target_names[i])
                f.write('\n')
                np.savetxt(f, m.round(2), delimiter=",")
            f.write('\n')
            np.savetxt(f, clf.support_vecotrs_, delimiter=",")
            f.write('\n')
            np.savetxt(f, clf.n_support_, delimiter=",")
            np.savetxt(f, clf.dual_coef_, delimiter=",")
            np.savetxt(f, clf.intercept_, delimiter=",")
            
            f.write('\n')
        f.close()
                      

            
